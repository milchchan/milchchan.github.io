!function(e){function t(t){for(var s,o,r=t[0],c=t[1],l=t[2],u=0,d=[];u<r.length;u++)o=r[u],Object.prototype.hasOwnProperty.call(n,o)&&n[o]&&d.push(n[o][0]),n[o]=0;for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&(e[s]=c[s]);for(h&&h(t);d.length;)d.shift()();return a.push.apply(a,l||[]),i()}function i(){for(var e,t=0;t<a.length;t++){for(var i=a[t],s=!0,r=1;r<i.length;r++){var c=i[r];0!==n[c]&&(s=!1)}s&&(a.splice(t--,1),e=o(o.s=i[0]))}return e}var s={},n={0:0},a=[];function o(t){if(s[t])return s[t].exports;var i=s[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=s,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(i,s,function(t){return e[t]}.bind(null,s));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/js";var r=window.webpackJsonp=window.webpackJsonp||[],c=r.push.bind(r);r.push=t,r=r.slice();for(var l=0;l<r.length;l++)t(r[l]);var h=c;a.push([19,1]),i()}({19:function(e,t,i){"use strict";i.r(t);var s=i(0),n=i(5),a=i(7),o=i(17),r=i(8),c=i(18),l=i(1),h=i(9),u=i(10),d=i(11),f=i(12),m=i(13),p=i(14),g=i(15),b=i(3),y=i(6),w=i(16),x=i(4);firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();const v="debug"===decodeURIComponent(window.location.hash.substring(1));let k=firebase.database(),L=firebase.storage();const I=new s.Pb({antialias:!0,alpha:!0,preserveDrawingBuffer:!0});I.setClearColor(16777215,0),I.toneMappingExposure=1,I.toneMapping=s.K,I.outputEncoding=s.Qb;const T=new s.cb(60,I.domElement.width/I.domElement.height,.1,1e3);T.position.set(0,1.5,5);const M=new a.a(T,I.domElement);M.enabled=!1,M.enableKeys=!1,M.screenSpacePanning=!1,M.enableDamping=!0,M.minPolarAngle=30*Math.PI/180,M.maxPolarAngle=150*Math.PI/180,M.minAzimuthAngle=-45*Math.PI/180,M.maxAzimuthAngle=45*Math.PI/180,M.minDistance=.75,M.maxDistance=5,M.target.set(0,2.5,1),M.update();const D=new s.tb,P=new s.m(16777215),S=new s.v(14154751,8295592,.7);P.intensity=.9,P.position.set(0,10,10).normalize(),D.add(P),D.add(S);const R=new s.ab;T.add(R);const A=new o.a(I);var E=new c.a(new s.Kb(I.domElement.width,I.domElement.height),1.5,.4,.85),q=new l.a(h.a),W=new l.a(u.a),_=(new l.a(d.a),new l.a(b.a)),B=new l.a(f.a),j=new l.a(m.a),O=new l.a(p.a),H=new l.a(g.a);E.renderToScreen=!0,E.threshold=.5,E.strength=.25,E.radius=0,q.uniforms.hue.value=-.025,q.uniforms.saturation.value=.25,W.uniforms.contrast.value=-.1,j.uniforms.mulRGB.value=new s.Lb(.95,.95,.95),j.uniforms.powRGB.value=new s.Lb(1,1,1),O.uniforms.amount.value=1e-4,O.uniforms.angle.value=0,B.uniforms.darkness.value=.25,B.uniforms.offset.value=0,_.renderToScreen=!0,H.uniforms.resolution.value.set(1/(I.domElement.width*window.devicePixelRatio),1/(I.domElement.height*window.devicePixelRatio)),A.setSize(I.domElement.width,I.domElement.height),A.setPixelRatio(window.devicePixelRatio),A.addPass(new r.a(D,T)),A.addPass(E),A.addPass(q),A.addPass(O),A.addPass(B),A.addPass(_);const C=new w;C.domElement.style.position="fixed",C.domElement.style.top="auto",C.domElement.style.bottom="0",C.domElement.style.left="auto",C.domElement.style.right="0",v||C.domElement.classList.add("is-hidden");const U=new s.k,$=new s.rb,Q=new s.Kb;let N=null,G=[],F=0;let z=0;let V=0;let J=null,X=null;let Y=null,K=null,Z=0;var ee=Vue.createApp({data:()=>({isDebug:v,isDarkMode:!1,isMuted:!0,isLoading:!1,isRevealed:!1,isOverlayed:!1,isUpdating:!1,isBlinded:!1,isPopup:!1,isExpanded:!1,isLearning:!1,isAnimating:!1,isHangingOn:!1,isSubmitting:!1,isStared:!1,mode:null,feedQueue:[],sequenceQueue:[],progress:null,user:null,input:"",animatedInputLength:0,maxInputLength:100,inputHasError:!1,messages:[],maxMessages:10,word:null,words:[],tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,stars:-1,animatedStars:0,screenshot:null,notifications:[],notificationHeight:0,animatedNotificationHeight:0,recentImages:[],backgroundImagesQueue:[],backgroundImages:[],preloadImages:[],isUploading:!1,animations:null,currentAnimations:[],blendShapeAnimations:[],insetTop:0,insetBottom:0,text:[],popupTextHeight:0,animatedPopupTextHeight:0,tickerWidth:0,animatedTickerWidth:0,message:null,states:{},character:null,wordDictionary:{},reverseWordDictionary:{},attributes:["名前","所属","時間","場所","する事","生き物","食べ物","飲み物","聞くもの","見るもの","読むもの","使う物","身につけるもの","乗り物","部位","病気"]}),watch:{isMuted(e){try{localStorage.setItem("character",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("character")}},words:{handler:()=>{ee.$nextTick(()=>{for(const e of document.body.querySelectorAll(".container>.wrap>.frame .clip")){let t=0;for(const i of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))t+=i.getBoundingClientRect().width;t>0&&(ee.tickerWidth=Math.min(t/2,document.body.querySelector(".container>.wrap>.frame .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=t+"px")}})},deep:!0},tickerWidth(e){const t=this,i={width:this.animatedTickerWidth};Object(x.a)({targets:i,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=i.width}})},backgroundImages:{handler:()=>{ee.$nextTick(()=>{const e=document.body.querySelectorAll("#app>.background>div");if(e.length>1){const t=e.length-1,i=15;let s=0,n=null;for(const a of e){const o=[];for(let t=0;t<e.length;t++)t===s?o.push({visibility:"visible"}):o.push({visibility:"hidden"});const r=a.animate(o,{fill:"forwards",easing:"steps("+t+")",duration:1e3/i*e.length,iterations:1/0});null===n?n=r.startTime:r.startTime=n,s++}}})},deep:!0},text:{handler:()=>{ee.$nextTick(()=>{ee.isPopup&&(ee.popupTextHeight=ee.$refs.popupText.getBoundingClientRect().height)})},deep:!0},popupTextHeight(e){const t={height:this.animatedPopupTextHeight};Object(x.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedPopupTextHeight=t.height}})},notifications:{handler:()=>{ee.$nextTick(()=>{ee.notificationHeight=ee.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationHeight(e){const t={height:this.animatedNotificationHeight};Object(x.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationHeight=t.height}})},stars(e){const t={count:this.animatedStars};Object(x.a)({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},input:{handler:()=>{ee.$nextTick(()=>{const e={count:ee.animatedInputLength};Object(x.a)({targets:e,count:ee.input.length,round:1,duration:500,easing:"linear",update:()=>{ee.animatedInputLength=e.count}})})},deep:!0}},methods:{signIn:function(e){if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,idToken:t.idToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){const e=t.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:e}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),"serviceWorker"in navigator&&null!==navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({command:"caches"})}).catch(e=>{console.error(e.code,e.message)})},refresh:function(e){this.isBlinded=!0,V=0},send:async function(e){if(this.isDebug)if(this.input.length>0){let e=[],t=[];for(const i of this.input.split(/\s/))this.backgroundImages.some(e=>e.id===i)?e.push(i):t.push(i);if(e.length>0&&t.length>0){for(const i of e)k.ref("bot/images/"+i).transaction((function(e){return e.tags=t,e}));this.isLearning=!1}else this.input.length<=this.maxInputLength&&(this.learn({name:this.input}),this.input="",this.isLearning=!1)}else for(const e of this.backgroundImages){this.input=e.id;break}else{if(this.input.length>0&&this.input.length<=this.maxInputLength)return this.learn({name:this.input}),this.input="",void(this.isLearning=!1);this.shake(this.$refs.input)}},change:function(e){this.input.length<=this.maxInputLength?this.inputHasError=!1:this.inputHasError=!0},upload:async function(e){function t(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,i=e.length;t<i;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")}const i=this,s=L.ref(),n=[],a=[];for(const t of e.target.files)n.push(t);this.isUploading=!0;for(const e of n.sort((e,t)=>e.name>t.name?1:e.name<t.name?-1:0)){const o=s.child("images/"+t()).put(e);try{await new Promise((function(e,t){o.on("state_changed",(function(e){i.progress=e.bytesTransferred/e.totalBytes/n.length+a.length/n.length}),(function(e){t(e)}),(function(){e()}))}))}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}a.push(o.snapshot.ref.fullPath)}k.ref("bot/images").push({paths:a,timestamp:Math.floor(new Date/1e3)}),this.progress=null,this.isUploading=!1},check:function(e){for(const t of this.word.attributes)t===e.target.dataset.attribute&&(t.value=e.target.checked)},share:async function(e){const t=this,i=Math.floor(new Date/1e3);e.name in this.wordDictionary&&delete this.wordDictionary[e.name],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.name)&&delete this.reverseWordDictionary[t]}),this.isSubmitting=!0,k.ref("bot/words/"+e.name).transaction((function(t){if(!t){t={attributes:{},timestamp:i};for(const s of e.attributes)s.value?t.attributes[s.name]=i:t.attributes[s.name]=0;return t}{let s=!1;for(const i of e.attributes){if(!(i.name in t.attributes)){s=!0;break}if(t.attributes[i.name]>0){if(!i.value){s=!0;break}}else if(i.value){s=!0;break}}if(s){let s=!0;const n={attributes:{}};for(const a of e.attributes)a.value?(a.name in t.attributes&&t.attributes[a.name]>0?n.attributes[a.name]=t.attributes[a.name]:n.attributes[a.name]=i-1,s=!1):n.attributes[a.name]=0;return s?null:(n.timestamp=i,n)}}}),(function(i,s,n){if(s){if(n.exists()){const i=n.val();let s=[];for(const e in i.attributes)"number"==typeof i.attributes[e]&&i.attributes[e]>0&&t.attributes.includes(e)&&s.push(i.attributes[e]);if(1===s.length&&s[0]===i.timestamp){function a(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,i){return t[parseInt(i)+1]}))}k.ref("bot/stars").transaction((function(e){return(e||0)+1}));for(const i of t.prepare(t.character.sequences.filter(e=>"Learned"===e.name)))"Message"===i.type&&t.notify({text:a(i.text,e.name),accent:t.character.accent,image:t.character.image});t.isStared=!0,window.setTimeout(()=>{t.isStared=!1},3e3),t.isMuted||t.$refs.twinkle.play()}}else k.ref("bot/stars").transaction((function(e){if(e)return e-1}));t.word=null}else i&&(t.notify({text:i.message,accent:t.character.accent,image:t.character.image}),console.error(i));t.isSubmitting=!1}))},learn:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,i){return t[parseInt(i)+1]}))}const i=[],s=[];if("attributes"in e)for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?s.push({name:t,value:!0}):s.push({name:t,value:!1}));else{const t=await k.ref("bot/words/"+e.name).once("value");if(t.exists()){const e=t.val();for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?s.push({name:t,value:!0}):s.push({name:t,value:!1}))}else for(const e of this.attributes)s.push({name:e,value:!1})}this.word={name:e.name,attributes:s};for(const s of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===s.type?i.push({type:s.type,speed:s.speed,duration:s.duration,text:t(s.text,e.name)}):i.push(s);i.length>0&&this.sequenceQueue.push(i)},activate:async function(e=[]){z=V=0,await this.talk(e)||this.talk()},talk:async function(e=[]){let t=this.character.sequences.filter(e=>"Activate"===e.name),i=[];if(this.isLoading=!0,e.length>0){const s=Math.floor(new Date/1e3),n=3600,a=Object.assign({},this.states),o=new TinySegmenter,r=[],c=[];for(const t of e){if(t in this.wordDictionary==!1||s-this.wordDictionary[t].timestamp>=n){const e=await k.ref("bot/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:s},e.exists()){const i=e.val();for(let e in i.attributes)"number"==typeof i.attributes[e]&&i.attributes[e]>0&&this.attributes.includes(e)&&this.wordDictionary[t].attributes.push(e)}}for(const e of this.wordDictionary[t].attributes)r.includes(e)||r.push(e)}for(const l of function(e){let t=[].concat(e),i=e.length;for(;i>1;){const e=(s=0,n=i,s=Math.ceil(s),n=Math.floor(n),Math.floor(Math.random()*(n-s))+s);i--;const a=t[i];t[i]=t[e],t[e]=a}var s,n;return t}(t)){const t=this.prepare([l]);let h=!1;for(const a of t){if("Message"==a.type)for(const l of Array.isArray(a.text)?a.text:o.segment(a.text)){if(Array.isArray(l)){for(const s of t)if("Message"==s.type){const t=await this.generate(s.text,e);if(null===t){h=!0;break}{let e,n;[e,n]=t,i.push({type:s.type,speed:s.speed,duration:s.duration,text:e})}}else i.push(s);if(h)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}if(l.length>1&&!c.includes(l)){if(l in this.wordDictionary==!1||s-this.wordDictionary[l].timestamp>=n){const e=await k.ref("bot/words/"+l).once("value");if(this.wordDictionary[l]={attributes:[],timestamp:s},e.exists()){const t=e.val();for(const e in t.attributes)"number"==typeof t.attributes[e]&&t.attributes[e]>0&&this.attributes.includes(e)&&this.wordDictionary[l].attributes.push(e)}}for(const s of this.wordDictionary[l].attributes)if(r.includes(s)){for(const s of t)if("Message"==s.type){const t=await this.generate(s.text,e);if(null===t){h=!0;break}{let e,n;[e,n]=t,i.push({type:s.type,speed:s.speed,duration:s.duration,text:e})}}else i.push(s);if(h)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}c.push(l)}}if(h){i.splice(0);break}}this.states=a}return this.isLoading=!1,!1}for(const e of this.prepare(t))if("Message"===e.type){const t=await this.generate(e.text);if(null===t)return this.isLoading=!1,!1;{let s,n;[s,n]=t,i.push({type:e.type,speed:e.speed,duration:e.duration,text:s})}}else i.push(e);return i.length>0?(this.sequenceQueue.push(i),this.isLoading=!1,!0):(this.isLoading=!1,!1)},generate:async function(e,t=[]){function i(e){let t=[],i=Number.MIN_VALUE,s=0;for(let t=0;t<e.length;t++)e[t]>i&&(i=e[t]);for(let t=0;t<e.length;t++)s+=Math.exp(e[t]-i);for(let n=0;n<e.length;n++)t.push(Math.exp(e[n]-i)/s);return t}const s=Math.floor(new Date/1e3);let n=new TinySegmenter,a=Array.isArray(e)?e:n.segment(e),o={},r=[],c=new RegExp("[.#$\\[\\]]"),l={},h="",u=0;const d=Math.pow(10,-6);let f=[{sequence:[],score:1}];for(const e of t){if(e in this.wordDictionary==!1||s-this.wordDictionary[e].timestamp>=3600){const t=await k.ref("bot/words/"+e).once("value");if(this.wordDictionary[e]={attributes:[],timestamp:s},t.exists()){const i=t.val();for(const t in i.attributes)"number"==typeof i.attributes[t]&&i.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[e].attributes.push(t)}}for(const t of this.wordDictionary[e].attributes)t in o?o[t].push(e):o[t]=[e]}for(const e of a){if(!r.includes(e)){if(Array.isArray(e)){let t=[],n=[];for(const i of e)if(i in o){for(const e of o[i])if(!t.includes(e)){let i=!0;t.push(e);for(const t of this.tags)if(e===t.name){n.push(t.score),i=!1;break}i&&n.push(d)}}else{if(i in this.reverseWordDictionary==!1||s-this.reverseWordDictionary[i].timestamp>=3600){const e=await k.ref("bot/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:s},e.exists()){const t=e.val();for(const e in t)this.reverseWordDictionary[i].words.push(e)}}for(const e of this.reverseWordDictionary[i].words)if(a.includes(e)&&!t.includes(e)){let i=!0;t.push(e);for(const t of this.tags)if(e==t.name){n.push(t.score),i=!1;break}i&&n.push(d)}}if(t.length>0&&n.length>0){const e=i(n);let s=[];for(let i=0;i<f.length;i++)for(let n=0;n<e.length;n++){let a=[].concat(f[i].sequence);a.push({index:u,term:t[n]}),s.push({sequence:a,score:f[i].score*e[n]})}f.splice(0);for(const e of this.take(s.sort((e,t)=>t.score-e.score),10))f.push(e)}}else if(!c.test(e)){let t=[],n=[];if(e in this.wordDictionary==!1||s-this.wordDictionary[e].timestamp>=3600){const t=await k.ref("bot/words/"+e).once("value");if(this.wordDictionary[e]={attributes:[],timestamp:s},t.exists()){const i=t.val();for(const t in i.attributes)"number"==typeof i.attributes[t]&&i.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[e].attributes.push(t)}}for(const i of this.wordDictionary[e].attributes)if(i in o){for(const e of o[i])if(!t.includes(e)){let i=!0;t.push(e);for(const t of this.tags)if(e===t.name){n.push(t.score),i=!1;break}i&&n.push(d)}}else{if(i in this.reverseWordDictionary==!1||s-this.reverseWordDictionary[i].timestamp>=3600){const e=await k.ref("bot/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:s},e.exists()){const t=e.val();for(let e in t)this.reverseWordDictionary[i].words.push(e)}}for(const e of this.reverseWordDictionary[i].words)if(a.includes(e)&&!t.includes(e)){let i=!0;t.push(e);for(const t of this.tags)if(e==t.name){n.push(t.score),i=!1;break}i&&n.push(d)}}if(t.length>0&&n.length>0){const e=i(n);let s=[];for(let i=0;i<f.length;i++)for(let n=0;n<e.length;n++){let a=[].concat(f[i].sequence);a.push({index:u,term:t[n]}),s.push({sequence:a,score:f[i].score*e[n]})}f.splice(0);for(const e of this.take(s.sort((e,t)=>t.score-e.score),10))f.push(e)}}r.push(e)}u++}const m=f[function(e){const t=Math.random();let i=0,s=0;for(let n of e){if(i<=t&&t<i+n)break;i+=n,s++}return s}(i(f.map(e=>e.score)))];for(let e=0;e<a.length;e++){const t=JSON.stringify(a[e]);if(t in l)void 0===l[t]?h+=a[e]:h+=l[t];else{let i=!0;for(let s=0;s<m.sequence.length;s++)if(m.sequence[s].index==e){t==m.sequence[s].term?l[t]=void 0:(l[t]=m.sequence[s].term,h+=m.sequence[s].term,i=!1);break}if(i){if(Array.isArray(a[e]))return null;h+=a[e]}}}return[h,l]},notify:function(e,t=3e3){const i=this;e.id=window.setTimeout(e=>{for(let t=0;t<i.notifications.length;t++)if(i.notifications[t].id===e.id){i.notifications.splice(t,1);break}},t,e),this.notifications.unshift(e)},blinded:async function(){if(0==this.backgroundImagesQueue.length){for(const e of function(e){let t=[].concat(e),i=e.length;for(;i>1;){const e=(s=0,n=i,s=Math.ceil(s),n=Math.floor(n),Math.floor(Math.random()*(n-s))+s);i--;const a=t[i];t[i]=t[e],t[e]=a}var s,n;return t}(this.recentImages))this.backgroundImagesQueue.push(e)}const e=this.backgroundImagesQueue.shift();this.preloadImages.splice(0),this.backgroundImages.splice(0);for(const t of e.paths)try{this.preloadImages.push({id:e.id,url:await L.ref().child(t).getDownloadURL(),timestamp:e.timestamp})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}"tags"in e&&this.talk(e.tags.filter(e=>-1===e.indexOf(this.character.name)))},load:function(e){let t=!0;for(let i of this.preloadImages)i.url==e?i.isLoaded=!0:"isLoaded"in i||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},error:function(e){let t=!0;for(let i of this.preloadImages)i.url==e?i.isLoaded=!0:"isLoaded"in i||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},update:async function(e,t){this.isUpdating=!0;try{const i=await new Promise(i=>{const s=Math.pow(10,-6);let n=[],a=[],o=[],r={};const c=(new Date).getTime()-432e5;let l={},h=[],u=s;for(const t in e)if("tags"in e[t]&&e[t].tags.length>0){let i=[];n.push({tokens:e[t].tags,timestamp:e[t].timestamp});for(const s of e[t].tags)i.includes(s)||(s in r?r[s]+=1:r[s]=1,i.push(s))}for(const e in r)r[e]=Math.log(n.length/(r[e]+s));for(const e of n)1e3*e.timestamp>c&&a.push(e);if(a.length<10){const e=Math.max(n.length-10,0);a.splice(0);for(let t=n.length-1;t>=e;t--)a.unshift(n[t])}for(const e of a){let t={};for(const i of e.tokens)i in t?t[i]+=1:t[i]=1;for(const i in t)t[i]/=e.tokens.length,i in l||(l[i]=0);o.push(t)}for(const e in l)for(const t of o)if(e in t){const i=t[e]*r[e];i>l[e]&&(l[e]=i)}for(const e in l)e.length>1&&"..."!=e&&h.push({term:e,value:l[e]});h.sort((e,t)=>t.value-e.value),h.length>t&&h.splice(t);for(const e of h)e.value>u&&(u=e.value);for(const e of h)e.value/=u;h.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),i(h)});this.tags.splice(0);for(let e=0;e<i.length;e++)this.tags.push({index:e,name:i[e].term,score:i[e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isUpdating=!1},shake:function(e){e.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(8px, 0, 0)"},{transform:"translate3d(-8px, 0, 0)"},{transform:"translate3d(7px, 0, 0)"},{transform:"translate3d(-7px, 0, 0)"},{transform:"translate3d(6px, 0, 0)"},{transform:"translate3d(-6px, 0, 0)"},{transform:"translate3d(5px, 0, 0)"},{transform:"translate3d(-5px, 0, 0)"},{transform:"translate3d(4px, 0, 0)"},{transform:"translate3d(-4px, 0, 0)"},{transform:"translate3d(3px, 0, 0)"},{transform:"translate3d(-3px, 0, 0)"},{transform:"translate3d(2px, 0, 0)"},{transform:"translate3d(-2px, 0, 0)"},{transform:"translate3d(1px, 0, 0)"},{transform:"translate3d(-1px, 0, 0)"},{transform:"translate3d(0, 0, 0)"}],{duration:1e3,iterations:1})},scrollToTop(){this.$nextTick(()=>{window.scroll(0,0)})},scrollToEnd:function(){"number"==typeof this.scrollTimeoutID&&clearTimeout(this.scrollTimeoutID),this.scrollTimeoutID=setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),500)},formatDate:function(e){return moment.locale(window.navigator.language),moment(e).format("LT")},animationStart:function(e){this.isAnimating=!0},animationEnd:function(e){const t=this;this.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height}),this.isPopup||(this.message=null),this.isAnimating=!1},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll(".container>.wrap>.frame .clip")){let i=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))i+=t.getBoundingClientRect().width;i>0&&(t.tickerWidth=Math.min(i/2,document.body.querySelector(".container>.wrap>.frame .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=i+"px")}})},arrange:function(e,t){let i=[],s=[];for(const n of e)s.length<t?s.push(n):(i.push(s),s=[n]);return i.push(s),i},take:function(e,t){if(e.length>t){let i=[].concat(e);return i.splice(t),i}return e},prepare:function(e,t=null,i=null){function s(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let n=[],a=[];for(const i of e){let e=t;if(null===t&&i.name in this.states&&(e=this.states[i.name]),null!==e&&"state"in i&&null!==i.state){new RegExp(i.state).test(e)&&n.push(i)}}if(0===n.length){for(const t of e)"state"in t!=!1&&null!==t.state||n.push(t);t=null}if(n.length>0){let e=[];for(const i of n[s(0,n.length)].sequence)null!==t&&(this.states[i.name]=t),e.push(i);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let n=[],a=[];for(const e of null===i?this.character.sequences:i){let i=this.getSequenceStack(e,t);if(i.length>0){let e=[];do{let t=i.pop();if(i.length>0){let s=[];for(const n of i[i.length-1].sequence)if("Sequence"==n.type){if("sequence"in n){let t=!0;for(const i of e)if(i===n){t=!1;break}t&&s.push(n)}if(n===t)break}for(;s.length>0;)e.push(s.pop())}if("sequence"in t){let i=!0;for(const s of e)if(s===t){i=!1;break}i&&e.push(t)}}while(i.length>0);for(;e.length>0;)n.push(e.pop())}else n.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of n)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;a.push(e)}}else for(const e of n)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}a.push(e)}if(a.length>0){let t=0;for(const i of a[s(0,a.length)].sequence)e.splice(t,0,i),t++}}}else a.push(t)}}return a},getSequenceStack:function(e,t){let i=[];if(i.push(e),i[i.length-1]!==t){if("sequence"in e)for(const s of e.sequence)if("Sequence"==s.type){let e=this.getSequenceStack(s,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{i.push(t.pop())}while(t.length>0);return i}}i.pop()}return i},animate:function(){requestAnimationFrame(this.animate);const e=U.getDelta();if(I.domElement.width!==I.domElement.clientWidth||I.domElement.height!==I.domElement.clientHeight){const e=I.domElement.clientWidth,t=I.domElement.clientHeight;E.setSize(e,t),H.uniforms.resolution.value.set(1/(e*window.devicePixelRatio),1/(t*window.devicePixelRatio)),I.setPixelRatio(window.devicePixelRatio),I.setSize(e,t,!1),T.aspect=e/t,T.updateProjectionMatrix(),A.setPixelRatio(window.devicePixelRatio),A.setSize(e,t)}if(N){function t(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let i=!1,n=!1,a=null,o=[];if(null===J&&(J={time:0,duration:.5,base:{x:R.position.x,y:R.position.y},source:{x:R.position.x,y:R.position.y},target:{x:R.position.x+.1*t(-1,1),y:R.position.y+.1*t(-1,1)}}),J.time+=e,J.time>=J.duration)R.position.x=J.target.x,R.position.y=J.target.y,J=J.base?{time:0,duration:.5,source:{x:R.position.x,y:R.position.y},target:{x:J.base.x,y:J.base.y}}:null;else{const e=J.time/J.duration;R.position.x=J.source.x+(J.target.x-J.source.x)*e,R.position.y=J.source.y+(J.target.y-J.source.y)*e}let r=Math.max(0,Math.min(-R.position.y,1)),c=!0;this.currentAnimations.length>0&&F<this.currentAnimations.length&&(a=this.currentAnimations[F],F+=2,i=!0);for(let t=this.blendShapeAnimations.length-1;t>=0;t--){let i=this.blendShapeAnimations[t];o.includes(i.name)||(i.time<=i.duration&&(i.time+=e,i.time>=i.duration?("blink"==i.name?(N.blendShapeProxy.setValue(i.name,.1*r+.9*Math.abs(Math.sin(i.end/2*Math.PI))),c=!1):N.blendShapeProxy.setValue(i.name,Math.abs(Math.sin(i.end/2*Math.PI))),this.blendShapeAnimations.splice(t,1)):"blink"==i.name?(N.blendShapeProxy.setValue(i.name,.1*r+.9*Math.abs(Math.sin((i.time/i.duration*(i.end-i.start)+i.start)/2*Math.PI))),c=!1):N.blendShapeProxy.setValue(i.name,Math.abs(Math.sin((i.time/i.duration*(i.end-i.start)+i.start)/2*Math.PI))),n=!0),o.push(i.name))}if(c&&N.blendShapeProxy.setValue("blink",.1*r),this.sequenceQueue.length>0&&Array.isArray(this.sequenceQueue[0])?z=0:(z+=e,this.isLoading||(V+=e),0==this.sequenceQueue.length&&(V>=10?(this.recentImages.length>0&&(this.isBlinded=!0),z=V=0):(z>=5||null===a)&&(this.sequenceQueue.push({sequences:this.prepare(this.character.sequences.filter(e=>"Idle"===e.name))}),z=0))),this.sequenceQueue.length>0){const e=Array.isArray(this.sequenceQueue[0])?this.sequenceQueue[0]:this.sequenceQueue[0].sequences;if(e.length>0){if("Animation"==e[0].type)if("name"in e[0])if(e[0].name in this.animations){let t=!1;if("dependencies"in e[0])for(const i of this.currentAnimations)if(e[0].dependencies.includes(i.name)){t=!0;break}if(!t||!i){this.currentAnimations.splice(0);for(let t of this.animations[e[0].name])this.currentAnimations.push(t);e.shift(),F=0,a=this.currentAnimations[F],F+=2}}else{let t=!1;if("dependencies"in e[0])for(const i of this.blendShapeAnimations)if(e[0].dependencies.includes(i.name)){t=!0;break}if(!t||!n){let i=[];for(this.blendShapeAnimations.unshift({name:e[0].name,time:0,duration:e[0].duration,start:e[0].start,end:e[0].end}),e.shift();e.length>0;){if(t=!1,"dependencies"in e[0])for(const i of this.blendShapeAnimations)if(e[0].dependencies.includes(i.name)){t=!0;break}if(t||"Animation"!=e[0].type||e[0].name in this.animations)break;this.blendShapeAnimations.unshift({name:e[0].name,time:0,duration:e[0].duration,start:e[0].start,end:e[0].end}),e.shift()}for(let e=this.blendShapeAnimations.length-1;e>=0;e--){let t=this.blendShapeAnimations[e];i.includes(t.name)||(N.blendShapeProxy.setValue(t.name,Math.abs(Math.sin(t.start/2*Math.PI))),i.push(t.name))}}}else e.shift();else if("Message"==e[0].type&&null===this.message&&!i&&!n&&("character"in e[0]?this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:e[0].character,text:e[0].text}:this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:{name:this.character.name,accent:this.character.accent,image:this.character.image},text:e[0].text},e.shift(),!this.isMuted)){const e=this.message.text;new Promise(async t=>{try{const t=await fetch("https://ai.milchchan.com/api/synthesize?text="+encodeURIComponent(e),{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(t.statusText);this.$refs.player.src=URL.createObjectURL(await t.blob()),null!==this.message&&e===this.message.text&&(this.$refs.player.currentTime=0,this.$refs.player.play())}catch(e){console.error(e)}t()})}}else null!==this.message||i||n||this.sequenceQueue.shift()}if(null!==this.message){if(this.message.type.reverse)if(this.message.type.count>0){if(this.message.type.elapsed+=2*e,this.message.type.elapsed>=1/this.message.type.speed){if(this.message.type.count-1<this.message.text.length){let e=Math.floor(this.message.text.length/2);this.message.type.buffer.length<=e&&this.message.type.count>0&&(this.message.type.count-=1),this.message.type.buffer.length>0&&(this.message.type.buffer=this.message.type.buffer.substring(0,this.message.type.buffer.length-1))}this.message.type.elapsed=0}}else this.isPopup=!1;else if(this.message.type.buffer.length<this.message.text.length){if(this.message.type.elapsed>=0?this.message.type.elapsed+=e:this.isAnimating||(this.isPopup?this.message.type.elapsed=e:this.isPopup=!0),this.message.type.elapsed>=1/this.message.type.speed){let e=this.message.type.buffer.length,t=Math.floor(this.message.text.length/2),i=this.message.text.length;this.message.type.count>=t&&(this.message.type.buffer+=this.message.text.charAt(e)),this.message.type.count<i&&(this.message.type.count+=1),this.message.type.elapsed=0}}else this.message.time+=e,this.message.time>=this.message.duration&&(this.message.type.reverse=!0);if(this.message.text.length===this.message.type.buffer.length){const e=this.message.text.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else{let e=new Array,i="";for(let t=0;t<this.message.text.length;t++)-1==e.indexOf(this.message.text.charAt(t))&&"\n"!=this.message.text.charAt(t)&&null==this.message.text.charAt(t).match(/\s/)&&e.push(this.message.text.charAt(t));if(e.length>0)for(let s=0;s<this.message.type.count;s++)"\n"==this.message.text.charAt(s)?i+="\n":i+=e[~~t(0,e.length)];if(i.length>this.message.type.buffer.length){const e=(this.message.type.buffer+i.substring(this.message.type.buffer.length,i.length)).split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else if(this.text.length!==this.message.type.buffer.length){const e=this.message.type.buffer.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}}}if(a)for(let e of a.animations){switch(e.bone){case"chest":case"head":case"hips":case"jaw":case"leftEye":case"leftFoot":case"leftHand":case"leftIndexDistal":case"leftIndexIntermediate":case"leftIndexProximal":case"leftLittleDistal":case"leftLittleIntermediate":case"leftLittleProximal":case"leftLowerArm":case"leftLowerLeg":case"leftMiddleDistal":case"leftMiddleIntermediate":case"leftMiddleProximal":case"leftRingDistal":case"leftRingIntermediate":case"leftRingProximal":case"leftShoulder":case"leftThumbDistal":case"leftThumbIntermediate":case"leftThumbProximal":case"leftToes":case"leftUpperArm":case"leftUpperLeg":case"neck":case"rightEye":case"rightFoot":case"rightHand":case"rightIndexDistal":case"rightIndexIntermediate":case"rightIndexProximal":case"rightLittleDistal":case"rightLittleIntermediate":case"rightLittleProximal":case"rightLowerArm":case"rightLowerLeg":case"rightMiddleDistal":case"rightMiddleIntermediate":case"rightMiddleProximal":case"rightRingDistal":case"rightRingIntermediate":case"rightRingProximal":case"rightShoulder":case"rightThumbDistal":case"rightThumbIntermediate":case"rightThumbProximal":case"rightToes":case"rightUpperArm":case"rightUpperLeg":case"spine":case"upperChest":break;case"eye.L":e.bone="leftEye";break;case"foot.L":e.bone="leftFoot";break;case"hand.L":e.bone="leftHand";break;case"f_index.03.L":e.bone="leftIndexDistal";break;case"f_index.02.L":e.bone="leftIndexIntermediate";break;case"f_index.01.L":e.bone="leftIndexProximal";break;case"f_pinky.03.L":e.bone="leftLittleDistal";break;case"f_pinky.02.L":e.bone="leftLittleIntermediate";break;case"f_pinky.01.L":e.bone="leftLittleProximal";break;case"lower_arm.L":e.bone="leftLowerArm";break;case"shin.L":e.bone="leftLowerLeg";break;case"f_middle.03.L":e.bone="leftMiddleDistal";break;case"f_middle.02.L":e.bone="leftMiddleIntermediate";break;case"f_middle.01.L":e.bone="leftMiddleProximal";break;case"f_ring.03.L":e.bone="leftRingDistal";break;case"f_ring.02.L":e.bone="leftRingIntermediate";break;case"f_ring.01.L":e.bone="leftRingProximal";break;case"shoulder.L":e.bone="leftShoulder";break;case"thumb_distal.L":e.bone="leftThumbDistal";break;case"thumb_intermediate.L":e.bone="leftThumbIntermediate";break;case"thumb_proximal.L":e.bone="leftThumbProximal";break;case"toe.L":e.bone="leftToes";break;case"upper_arm.L":e.bone="leftUpperArm";break;case"thigh.L":e.bone="leftUpperLeg";break;case"eye.R":e.bone="rightEye";break;case"foot.R":e.bone="rightFoot";break;case"hand.R":e.bone="rightHand";break;case"f_index.03.R":e.bone="rightIndexDistal";break;case"f_index.02.R":e.bone="rightIndexIntermediate";break;case"f_index.01.R":e.bone="rightIndexProximal";break;case"f_pinky.03.R":e.bone="rightLittleDistal";break;case"f_pinky.02.R":e.bone="rightLittleIntermediate";break;case"f_pinky.01.R":e.bone="rightLittleProximal";break;case"lower_arm.R":e.bone="rightLowerArm";break;case"shin.R":e.bone="rightLowerLeg";break;case"f_middle.03.R":e.bone="rightMiddleDistal";break;case"f_middle.02.R":e.bone="rightMiddleIntermediate";break;case"f_middle.01.R":e.bone="rightMiddleProximal";break;case"f_ring.03.R":e.bone="rightRingDistal";break;case"f_ring.02.R":e.bone="rightRingIntermediate";break;case"f_ring.01.R":e.bone="rightRingProximal";break;case"shoulder.R":e.bone="rightShoulder";break;case"thumb_distal.R":e.bone="rightThumbDistal";break;case"thumb_intermediate.R":e.bone="rightThumbIntermediate";break;case"thumb_proximal.R":e.bone="rightThumbProximal";break;case"toe.R":e.bone="rightToes";break;case"upper_arm.R":e.bone="rightUpperArm";break;case"thigh.R":e.bone="rightUpperLeg";break;case"upper_chest":e.bone="upperChest";break;default:e.bone=null}if(e.bone&&4==e.rotation.length)try{N.humanoid.getBoneNode(e.bone).position.set(e.position[0],e.position[1],-e.position[2]),N.humanoid.getBoneNode(e.bone).quaternion.set(-e.rotation[0],-e.rotation[1],e.rotation[2],e.rotation[3])}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}}if(G.length>0){const t={};let i=0;if(null===Y){if(null!==K)if(K.time-=e,K.time<=0){for(const e in K.bones)t[e]={direction:K.bones[e].direction,force:K.bones[e].base};K=null}else for(const e in K.bones)t[e]={direction:K.bones[e].direction,force:K.bones[e].base+K.bones[e].source+K.time/K.duration*(K.bones[e].target-K.bones[e].source-K.bones[e].base)}}else if(null===K){let e=null,i=0;for(const t of N.springBoneManager.springBoneGroupList)for(const n of t)i===Y.index&&(e=n.bone.getWorldPosition(new s.Lb)),i++;if(null!==e){const n=.25;i=0,K={time:0,duration:.5,center:e,bones:{}};for(const a of N.springBoneManager.springBoneGroupList)for(const o of a)e.distanceTo(o.bone.getWorldPosition(new s.Lb))<=n&&(K.bones[i]={direction:new s.Lb(Y.direction.x,Y.direction.y,0),base:o.gravityPower-G[i].gravityPower,source:0,target:-Math.min(.01*Y.distance*Math.cos(e.distanceTo(o.bone.getWorldPosition(new s.Lb))/n),5)},t[i]={direction:K.bones[i].direction,force:K.bones[i].source}),i++}}else if(K.time+=e,K.time>=K.duration){const e=.25;let i=0;for(const e in K.bones)t[e]={direction:K.bones[e].direction,force:K.bones[e].target};K.time=0;for(const t of N.springBoneManager.springBoneGroupList)for(const n of t)i in K.bones&&(K.bones[i].direction=new s.Lb(Y.direction.x,Y.direction.y,0),K.bones[i].source=K.bones[i].target,K.bones[i].target=-Math.min(.01*Y.distance*Math.cos(K.center.distanceTo(n.bone.getWorldPosition(new s.Lb))/e),5)),i++}else for(const e in K.bones)t[e]={direction:K.bones[e].direction,force:K.bones[e].base+K.bones[e].source+K.time/K.duration*(K.bones[e].target-K.bones[e].source-K.bones[e].base)};if(null===X){let e=0;X={time:0,duration:1,direction:new s.Lb(1,0,0),force:.01*(Math.random()-.5),sources:{}};for(const i of N.springBoneManager.springBoneGroupList)for(const s of i)e in t==!1&&(X.sources[e]=s.gravityPower-G[e].gravityPower),e++}else if(X.time+=e,X.time>=X.duration){for(const e in X.sources)e in t==!1&&(t[e]={direction:X.direction,force:X.force});X=null}else for(const e in X.sources)e in t==!1&&(t[e]={direction:X.direction,force:X.sources[e]+X.time/X.duration*(X.force-X.sources[e])});for(const e of N.springBoneManager.springBoneGroupList)for(const n of e){if(i in t){const e=new s.Lb(G[i].gravityDir.x+t[i].direction.x,G[i].gravityDir.y+t[i].direction.y,G[i].gravityDir.z+t[i].direction.z);n.gravityDir=e.normalize(),n.gravityPower=G[i].gravityPower+t[i].force}i++}}N.update(e)}M.update(),A.render(e),C.update()}},updated:function(){this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height;for(const e of document.body.querySelectorAll(".container>.wrap>.frame .clip")){let t=0;for(const i of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))t+=i.getBoundingClientRect().width;t>0&&(this.tickerWidth=Math.min(t/2,document.body.querySelector(".container>.wrap>.frame .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=t+"px")}},mounted:async function(){const e=this,t=localStorage.getItem("character"),i=localStorage.getItem("credential");let s=null;const a=[{path:"/assets/milch.json",probability:.9},{path:"/assets/merku.json",probability:.1}],o=new n.a;if(t)try{const e=JSON.parse(t);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("character")}if(i)try{s=JSON.parse(i)}catch(e){localStorage.removeItem("credential")}this.$refs.three.appendChild(I.domElement),this.$refs.three.after(C.domElement),this.animate(),this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height;try{const e=await fetch(function(e,t){const i=Math.random();let s=0,n=0;for(let a of e){const e=t(a);if(s<=i&&i<s+e)break;s+=e,n++}return e[n]}(a,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!e.ok)throw new Error(e.statusText);this.character=await e.json()}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.sequenceQueue.push(this.prepare(this.character.sequences.filter(e=>"Start"===e.name))),o.crossOrigin="anonymous",o.load(await L.ref().child(this.character.model).getDownloadURL(),t=>{y.a.from(t).then(async t=>{const i={idle1:"/assets/animation-idle1.json",idle2:"/assets/animation-idle2.json",jump:"/assets/animation-jump.json",lose:"/assets/animation-lose.json",win:"/assets/animation-win.json"};let s={};try{for(let e in i){const t=await fetch(encodeURI(i[e]),{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(t.statusText);{const i=await t.json();s[e]=i.data}}e.animations=s,N=t,D.add(t.scene),t.scene.rotation.y=Math.PI,t.lookAt.target=R,G.splice(0);for(const e of N.springBoneManager.springBoneGroupList)for(const t of e)G.push({gravityDir:t.gravityDir.clone(),gravityPower:t.gravityPower});e.progress=null}catch(t){e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)}})},t=>e.progress=t.loaded/t.total,e=>console.error(e)),null!==s&&(s.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(s.idToken)).catch(e=>{console.error(e.code,e.message)}):s.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(s.accessToken)).catch(e=>{console.error(e.code,e.message)}):s.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(s.accessToken,s.secret)).catch(e=>{console.error(e.code,e.message)})),firebase.auth().onAuthStateChanged((function(t){t?(e.user=t,k.ref("bot/feed").limitToLast(100).on("value",e=>{if(e.exists()){const t=e.val();let i=Object.keys(t),s=null;i.length>ee.maxMessages&&i.splice(0,i.length-ee.maxMessages),ee.feedQueue.splice(0);for(let e of i){const i=t[e],n=1e3*i.timestamp;let a=-1;for(let t=0;t<ee.messages.length;t++)if(e===ee.messages[t].id){a=t;break}if(i.user.accent||(i.user.accent="#30c0f5"),a>=0){const t={id:e,text:i.text,thread:i.thread,timestamp:new Date(n),user:i.user};ee.messages[a]=t}else{for(let e=0;e<ee.messages.length;e++)n<Math.floor(ee.messages[e].timestamp)&&(a=e);ee.messages.splice(a>=0?a:ee.messages.length,0,{id:e,text:i.text,thread:i.thread,timestamp:new Date(n),user:i.user}),ee.messages.length>ee.maxMessages&&ee.messages.shift(),ee.user.uid!==i.user.id&&(s=i.user)}ee.feedQueue.unshift(i)}for(let e=ee.messages.length-1;e>=0;e--)ee.messages[e].id in t||ee.messages.splice(e,1);s&&s.id,ee.feedQueue.push(ee.feedQueue.shift())}})):(k.ref("bot/feed").off("value"),e.user=null,e.stars=0),k.ref("bot/images").limitToLast(100).on("value",t=>{if(t.exists()){const i=t.val();let s=!1;for(const t in i)if(!e.recentImages.some(e=>e.id===t&&e.timestamp===i[t].timestamp)){s=!0;break}if(s){e.recentImages.splice(0);for(const t in i)i[t].id=t,e.recentImages.push(i[t]);e.update(e.recentImages,e.maxTags),e.isBlinded=!0}}}),k.ref("bot/stars").on("value",t=>{const i=t.val();e.stars=null===i?0:i}),k.ref("bot/words").orderByChild("timestamp").limitToLast(10).on("value",t=>{if(t.exists()){const i=t.val();let s=[],n=0;for(const e in i)s.push({name:e,timestamp:i[e].timestamp});for(const t of e.prepare(e.character.sequences.filter(e=>"Alert"===e.name),10))"Message"===t.type&&(e.words.splice(n,0,{name:t.text,image:e.character.image}),n++);for(const t of s.sort((e,t)=>t.timestamp-e.timestamp)){let i=-1;for(let s=0;s<e.words.length;s++)if(e.words[s].name==t.name){i=s;break}i>=0?(e.words[i].timestamp<t.timestamp&&(t.name in e.wordDictionary&&delete e.wordDictionary[t.name],Object.keys(e.reverseWordDictionary).forEach(i=>{e.reverseWordDictionary[i].words.some(e=>e===t.name)&&delete e.reverseWordDictionary[i]})),e.words.splice(i,1)):(t.name in e.wordDictionary&&delete e.wordDictionary[t.name],Object.keys(e.reverseWordDictionary).forEach(i=>{e.reverseWordDictionary[i].words.some(e=>e===t.name)&&delete e.reverseWordDictionary[i]})),e.words.splice(n,0,t),n++}for(let t=e.words.length-1;t>=n;t--)e.words.splice(t,1)}})}))},unmounted:function(){"number"==typeof this.tickIntervalID&&clearInterval(this.tickIntervalID),null!==N&&(D.remove(N.scene),N=null)}}).mount("#app");window.addEventListener("load",e=>{"serviceWorker"in navigator&&(navigator.serviceWorker.register("sw.js").then(e=>{e.onupdatefound=function(){e.update()}}).catch(e=>{console.error(e.code,e.message)}),navigator.serviceWorker.addEventListener("message",e=>{null!==navigator.serviceWorker.controller&&"command"in e.data&&"caches"===e.data.command&&navigator.serviceWorker.controller.postMessage({command:"clear",caches:e.data.caches})}))}),window.addEventListener("resize",e=>{ee.insetTop=ee.$refs.indicator.getBoundingClientRect().height,ee.insetBottom=ee.$refs.blank.getBoundingClientRect().height,ee.$nextTick(()=>{for(const e of document.body.querySelectorAll(".container>.wrap>.frame .clip")){let t=0;for(const i of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))t+=i.getBoundingClientRect().width;t>0&&(ee.tickerWidth=Math.min(t/2,document.body.querySelector(".container>.wrap>.frame .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=t+"px")}})}),window.addEventListener("click",e=>{const t=ee.$refs.three,i=e.clientX-t.offsetLeft-(window.innerWidth-t.offsetWidth),s=e.clientY-t.offsetTop-(window.innerHeight-t.offsetHeight),n=t.offsetWidth,a=t.offsetHeight;Q.x=i/n*2-1,Q.y=-s/a*2+1,$.setFromCamera(Q,T);const o=$.intersectObjects(D.children,!0);for(let e of o){if("face"===e.object.name)break;if(e.object.name.indexOf("breast")>=0)break}}),window.addEventListener("dblclick",e=>{const t=ee.$refs.three,i=e.clientX-t.offsetLeft-(window.innerWidth-t.offsetWidth),s=e.clientY-t.offsetTop-(window.innerHeight-t.offsetHeight),n=t.offsetWidth,a=t.offsetHeight;Q.x=i/n*2-1,Q.y=-s/a*2+1,$.setFromCamera(Q,T),$.intersectObjects(D.children,!0).length>0&&ee.activate()}),window.addEventListener("keydown",e=>{e.ctrlKey&&(M.enabled=!0)}),window.addEventListener("keyup",e=>{M.enabled=!1}),window.addEventListener("mousedown",e=>{if(!M.enabled&&0===e.button){let t=Number.MAX_SAFE_INTEGER,i=null;const n=ee.$refs.three,a=e.clientX-n.offsetLeft-(window.innerWidth-n.offsetWidth),o=e.clientY-n.offsetTop-(window.innerHeight-n.offsetHeight),r=n.offsetWidth,c=n.offsetHeight;Q.x=a/r*2-1,Q.y=-o/c*2+1,$.setFromCamera(Q,T);for(let e of $.intersectObjects(D.children,!0))e.distance<t&&(i=e,t=e.distance);if(null!==i){let e=0;Y={point:{x:a,y:o},direction:{x:0,y:0},distance:0,index:-1},t=Number.MAX_SAFE_INTEGER;for(const n of N.springBoneManager.springBoneGroupList)for(const a of n){const n=a.bone.getWorldPosition(new s.Lb).distanceTo(i.point);n<t&&(Y.index=e,t=n),e++}null!==ee.character&&ee.sequenceQueue.push(ee.prepare(ee.character.sequences.filter(e=>"TouchStart"===e.name),i.object.name))}}}),window.addEventListener("mousemove",e=>{const t=ee.$refs.three,i=e.clientX-t.offsetLeft-(window.innerWidth-t.offsetWidth),n=e.clientY-t.offsetTop-(window.innerHeight-t.offsetHeight),a=t.offsetWidth,o=t.offsetHeight;if(Q.x=i/a*2-1,Q.y=-n/o*2+1,!M.enabled&&0===e.button&&(J={time:0,duration:.5,source:{x:R.position.x,y:R.position.y},target:{x:(i-.5*a)/a*10,y:(n-.5*o)/o*-10}},null!==Y)){const e=new s.Kb(Y.point.x-i,n-Y.point.y);Y.direction=e.normalize(),Y.distance=Math.sqrt((Y.point.x-i)*(Y.point.x-i)+(Y.point.y-n)*(Y.point.y-n))}}),window.addEventListener("mouseup",e=>{M.enabled||0!==e.button||(Y=null,null!==ee.character&&ee.sequenceQueue.push(ee.prepare(ee.character.sequences.filter(e=>"TouchEnd"===e.name))))}),window.addEventListener("touchstart",e=>{e.stopPropagation();const t=ee.$refs.three,i=e.changedTouches[0].clientX-t.offsetLeft-(window.innerWidth-t.offsetWidth),n=e.changedTouches[0].clientY-t.offsetTop-(window.innerHeight-t.offsetHeight),a=t.offsetWidth,o=t.offsetHeight;if(Q.x=i/a*2-1,Q.y=-n/o*2+1,$.setFromCamera(Q,T),0==Z){Z++,setTimeout(()=>{Z=0},500);let e=Number.MAX_SAFE_INTEGER,t=null;for(let i of $.intersectObjects(D.children,!0))i.distance<e&&(t=i,e=i.distance);if(null!==t){let a=0;Y={point:{x:i,y:n},direction:{x:0,y:0},distance:0,index:-1},e=Number.MAX_SAFE_INTEGER;for(const i of N.springBoneManager.springBoneGroupList)for(const n of i){const i=n.bone.getWorldPosition(new s.Lb).distanceTo(t.point);i<e&&(Y.index=a,e=i),a++}null!==ee.character&&ee.sequenceQueue.push(ee.prepare(ee.character.sequences.filter(e=>"TouchStart"===e.name),t.object.name))}J={time:0,duration:.5,source:{x:R.position.x,y:R.position.y},target:{x:(i-.5*a)/a*10,y:(n-.5*o)/o*-10}}}else $.intersectObjects(D.children,!0).length>0&&ee.activate(),Z=0}),window.addEventListener("touchmove",e=>{e.stopPropagation();const t=ee.$refs.three,i=e.changedTouches[0].clientX-t.offsetLeft-(window.innerWidth-t.offsetWidth),s=e.changedTouches[0].clientY-t.offsetTop-(window.innerHeight-t.offsetHeight),n=t.offsetWidth,a=t.offsetHeight;J={time:0,duration:.5,source:{x:R.position.x,y:R.position.y},target:{x:(i-.5*n)/n*10,y:(s-.5*a)/a*-10}}}),window.addEventListener("touchend",e=>{e.stopPropagation();const t=ee.$refs.three,i=e.changedTouches[0].clientX-t.offsetLeft-(window.innerWidth-t.offsetWidth),s=e.changedTouches[0].clientY-t.offsetTop-(window.innerHeight-t.offsetHeight),n=t.offsetWidth,a=t.offsetHeight;J={time:0,duration:.5,source:{x:R.position.x,y:R.position.y},target:{x:(i-.5*n)/n*10,y:(s-.5*a)/a*-10}},null!==ee.character&&ee.sequenceQueue.push(ee.prepare(ee.character.sequences.filter(e=>"TouchEnd"===e.name)))}),window.addEventListener("touchcancel",e=>{e.stopPropagation()}),window.addEventListener("dragover",e=>{e.preventDefault(),e.dataTransfer.dropEffect="copy"},!1),window.addEventListener("drop",e=>{e.stopPropagation(),e.preventDefault();for(let t of e.dataTransfer.files){const e=t.name.toLowerCase();if(e.endsWith(".vrm")){let e=new FileReader;e.addEventListener("load",e=>{const t=new n.a;t.crossOrigin="anonymous",t.load(e.target.result,e=>{y.a.from(e).then(e=>{null!==N&&D.remove(N.scene),N=e,D.add(e.scene),e.scene.rotation.y=Math.PI,e.lookAt.target=R,G.splice(0);for(const e of N.springBoneManager.springBoneGroupList)for(const t of e)G.push({gravityDir:t.gravityDir.clone(),gravityPower:t.gravityPower});ee.progress=null})},e=>ee.progress=e.loaded/e.total,e=>console.error(e))}),e.readAsDataURL(t)}else if(e.endsWith(".json")){let e=new FileReader;e.addEventListener("load",e=>{try{ee.character=JSON.parse(e.target.result)}catch(e){return ee.notify({text:error.message,accent:ee.character.accent,image:ee.character.image}),void console.error(e)}ee.sequenceQueue.splice(0),ee.sequenceQueue.push(ee.prepare(ee.character.sequences.filter(e=>"Start"===e.name)))}),e.readAsText(t)}}},!1),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?ee.isDarkMode=!0:ee.isDarkMode=!1})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,