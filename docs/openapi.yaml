openapi: 3.1.0
info:
  title: milchchan.com API
  description: milchchan.com API specification
  version: 1.0.0
servers:
  - url: https://milchchan.com/api
paths:
  /like:
    post:
      summary: Create like
      tags:
      - Social
      requestBody:
        description: Data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Like'
                - type: object
                  properties:
                    image:
                      type: string
                      readOnly: false
                      writeOnly: true
      responses:
        201:
          description: Successful insert operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
  /like/{id}:
    get:
      summary: Read like by identifier
      tags:
      - Social
      parameters:
      - name: id
        in: path
        description: Identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful update operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
    put:
      summary: Update like by identifier
      tags:
      - Social
      parameters:
      - name: id
        in: path
        description: Identifier
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Like'
                - type: object
                  properties:
                    image:
                      type: string
                      readOnly: false
                      writeOnly: true
      responses:
        200:
          description: Successful update operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
    delete:
      summary: Delete like by identifier
      tags:
      - Social
      parameters:
      - name: id
        in: path
        description: Identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful delete operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  timestamp:
                    type: integer
                    format: int64
  /likes:
    get:
      summary: Returns a list of likes
      tags:
      - Social
      parameters:
      - name: offset
        in: query
        description: Offset
        required: false
        schema:
          type: integer
          examples: [0]
      - name: limit
        in: query
        description: Limit
        required: false
        schema:
          type: integer
          examples: [10]
      responses:
        200:
          description: Successful read operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Like'
  /upload:
    post:
      tags:
        - Media
      summary: Upload media
      requestBody:
        description: Media file
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri
                  type:
                    type: string
                    examples: ["image/png"]
                  timestamp:
                    type: integer
                    format: int64
                    examples: [1704034800]
    get:
      tags:
        - Media
      summary: Get a random uploaded medium
      parameters:
      - name: type
        in: query
        description: Type
        required: false
        schema:
          type: string
          examples: ["image/png"]
      responses:
        200:
          description: Successful operation
          content:
            application/zip:
              schema:
                type: string
                format: binary
            image/*:
              schema:
                type: string
                format: binary
  /upload/{id}:
    get:
      tags:
        - Media
      summary: Get a uploaded medium by identifier
      parameters:
      - name: id
        in: path
        description: Identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/zip:
              schema:
                type: string
                format: binary
            image/*:
              schema:
                type: string
                format: binary
    put:
      tags:
        - Media
      summary: Update a uploaded medium by identifier
      parameters:
      - name: id
        in: path
        description: Identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri
                  type:
                    type: string
                    examples: ["image/png"]
                  timestamp:
                    type: integer
                    format: int64
    delete:
      tags:
        - Media
      summary: Delete a uploaded medium by identifier
      parameters:
      - name: id
        in: path
        description: Identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri
                  type:
                    type: string
                    examples: ["image/png"]
                  timestamp:
                    type: integer
                    format: int64
  /uploads:
    get:
      tags:
        - Media
      summary: Get uploaded media
      parameters:
      - name: order
        in: query
        description: Order
        required: false
        schema:
          type: string
          enum: [asc, desc]
      - name: offset
        in: query
        description: Offset
        required: false
        schema:
          type: integer
          examples: [0]
      - name: limit
        in: query
        description: Limit
        required: false
        schema:
          type: integer
          examples: [10]
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    url:
                      type: string
                      format: uri
                    type:
                      type: string
                      examples: ["image/png"]
                    timestamp:
                      type: integer
                      format: int64
  /generate:
    post:
      tags:
        - AI
      summary: Generate a content by AI
      requestBody:
        description: Media data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        examples: ["user"]
                      content:
                        type: string
                        examples: ["Hello, world!"]
                input:
                  type: string
                  examples: ["Hello, world!"]
                language:
                  type: string
                  examples: ["en"]  
                temperature:
                  type: number
                  examples: [1.0]
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
            audio/wav:
              schema:
                type: string
                format: binary
components:
  schemas:
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        content:
          type: string
        language:
          type: ["string", "null"]
        attributes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              start:
                type: integer
                format: int32
                minimum: 0
                examples: [0]
              end:
                type: integer
                format: int32
                minimum: 0
                examples: [6]
        timestamp:
          type: integer
          format: int64
          readOnly: true
          examples: [1704034800]
      required:
        - id
        - name
        - content
        - language
        - attributes
        - timestamp
tags:
  - name: Social
  - name: Media
  - name: AI