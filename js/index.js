!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js",n(n.s=1)}([function(e,t,n){var r;e.exports=((r=function(){function e(e){return i.appendChild(e.dom),e}function t(e){for(var t=0;t<i.children.length;t++)i.children[t].style.display=t===e?"block":"none";n=e}var n=0,i=document.createElement("div");i.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",i.addEventListener("click",(function(e){e.preventDefault(),t(++n%i.children.length)}),!1);var s=(performance||Date).now(),a=s,o=0,c=e(new r.Panel("FPS","#0ff","#002")),u=e(new r.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var l=e(new r.Panel("MB","#f08","#201"));return t(0),{REVISION:16,dom:i,addPanel:e,showPanel:t,begin:function(){s=(performance||Date).now()},end:function(){o++;var e=(performance||Date).now();if(u.update(e-s,200),e>a+1e3&&(c.update(1e3*o/(e-a),100),a=e,o=0,l)){var t=performance.memory;l.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){s=this.end()},domElement:i,setMode:t}}).Panel=function(e,t,n){var r=1/0,i=0,s=Math.round,a=s(window.devicePixelRatio||1),o=80*a,c=48*a,u=3*a,l=2*a,h=3*a,d=15*a,f=74*a,p=30*a,m=document.createElement("canvas");m.width=o,m.height=c,m.style.cssText="width:80px;height:48px";var g=m.getContext("2d");return g.font="bold "+9*a+"px Helvetica,Arial,sans-serif",g.textBaseline="top",g.fillStyle=n,g.fillRect(0,0,o,c),g.fillStyle=t,g.fillText(e,u,l),g.fillRect(h,d,f,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(h,d,f,p),{dom:m,update:function(c,y){r=Math.min(r,c),i=Math.max(i,c),g.fillStyle=n,g.globalAlpha=1,g.fillRect(0,0,o,d),g.fillStyle=t,g.fillText(s(c)+" "+e+" ("+s(r)+"-"+s(i)+")",u,l),g.drawImage(m,h+a,d,f-a,p,h,d,f-a,p),g.fillRect(h+f-a,d,a,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(h+f-a,d,a,s((1-c/y)*p))}}},r)},function(e,t,n){"use strict";n.r(t);var r=n(0),i={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},s={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},a=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],o={CSS:{},springs:{}};function c(e,t,n){return Math.min(Math.max(e,t),n)}function u(e,t){return e.indexOf(t)>-1}function l(e,t){return e.apply(null,t)}var h={arr:function(e){return Array.isArray(e)},obj:function(e){return u(Object.prototype.toString.call(e),"Object")},pth:function(e){return h.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||h.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return h.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return h.hex(e)||h.rgb(e)||h.hsl(e)},key:function(e){return!i.hasOwnProperty(e)&&!s.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function d(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function f(e,t){var n=d(e),r=c(h.und(n[0])?1:n[0],.1,100),i=c(h.und(n[1])?100:n[1],.1,100),s=c(h.und(n[2])?10:n[2],.1,100),a=c(h.und(n[3])?0:n[3],.1,100),u=Math.sqrt(i/r),l=s/(2*Math.sqrt(i*r)),f=l<1?u*Math.sqrt(1-l*l):0,p=l<1?(l*u-a)/f:-a+u;function m(e){var n=t?t*e/1e3:e;return n=l<1?Math.exp(-n*l*u)*(1*Math.cos(f*n)+p*Math.sin(f*n)):(1+p*n)*Math.exp(-n*u),0===e||1===e?e:1-n}return t?m:function(){var t=o.springs[e];if(t)return t;for(var n=0,r=0;;)if(1===m(n+=1/6)){if(++r>=16)break}else r=0;var i=n*(1/6)*1e3;return o.springs[e]=i,i}}function p(e){return void 0===e&&(e=10),function(t){return Math.ceil(c(t,1e-6,1)*e)*(1/e)}}var m,g,y=function(){function e(e,t){return 1-3*t+3*e}function t(e,t){return 3*t-6*e}function n(e){return 3*e}function r(r,i,s){return((e(i,s)*r+t(i,s))*r+n(i))*r}function i(r,i,s){return 3*e(i,s)*r*r+2*t(i,s)*r+n(i)}return function(e,t,n,s){if(0<=e&&e<=1&&0<=n&&n<=1){var a=new Float32Array(11);if(e!==t||n!==s)for(var o=0;o<11;++o)a[o]=r(.1*o,e,n);return function(i){return e===t&&n===s||0===i||1===i?i:r(c(i),t,s)}}function c(t){for(var s=0,o=1;10!==o&&a[o]<=t;++o)s+=.1;--o;var c=s+.1*((t-a[o])/(a[o+1]-a[o])),u=i(c,e,n);return u>=.001?function(e,t,n,s){for(var a=0;a<4;++a){var o=i(t,n,s);if(0===o)return t;t-=(r(t,n,s)-e)/o}return t}(t,c,e,n):0===u?c:function(e,t,n,i,s){var a,o,c=0;do{(a=r(o=t+(n-t)/2,i,s)-e)>0?n=o:t=o}while(Math.abs(a)>1e-7&&++c<10);return o}(t,s,s+.1,e,n)}}}(),v=(m={linear:function(){return function(e){return e}}},g={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var n=c(e,1,10),r=c(t,.1,2);return function(e){return 0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-r/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/r)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){g[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(g).forEach((function(e){var t=g[e];m["easeIn"+e]=t,m["easeOut"+e]=function(e,n){return function(r){return 1-t(e,n)(1-r)}},m["easeInOut"+e]=function(e,n){return function(r){return r<.5?t(e,n)(2*r)/2:1-t(e,n)(-2*r+2)/2}},m["easeOutIn"+e]=function(e,n){return function(r){return r<.5?(1-t(e,n)(1-2*r))/2:(t(e,n)(2*r-1)+1)/2}}})),m);function w(e,t){if(h.fnc(e))return e;var n=e.split("(")[0],r=v[n],i=d(e);switch(n){case"spring":return f(e,t);case"cubicBezier":return l(y,i);case"steps":return l(p,i);default:return l(r,i)}}function b(e){try{return document.querySelectorAll(e)}catch(e){return}}function x(e,t){for(var n=e.length,r=arguments.length>=2?arguments[1]:void 0,i=[],s=0;s<n;s++)if(s in e){var a=e[s];t.call(r,a,s,e)&&i.push(a)}return i}function k(e){return e.reduce((function(e,t){return e.concat(h.arr(t)?k(t):t)}),[])}function M(e){return h.arr(e)?e:(h.str(e)&&(e=b(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function D(e,t){return e.some((function(e){return e===t}))}function T(e){var t={};for(var n in e)t[n]=e[n];return t}function I(e,t){var n=T(e);for(var r in e)n[r]=t.hasOwnProperty(r)?t[r]:e[r];return n}function L(e,t){var n=T(e);for(var r in t)n[r]=h.und(e[r])?t[r]:e[r];return n}function S(e){return h.rgb(e)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+n[1]+",1)":t:h.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,r){return t+t+n+n+r+r})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(e):h.hsl(e)?function(e){var t,n,r,i=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),s=parseInt(i[1],10)/360,a=parseInt(i[2],10)/100,o=parseInt(i[3],10)/100,c=i[4]||1;function u(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(0==a)t=n=r=o;else{var l=o<.5?o*(1+a):o+a-o*a,h=2*o-l;t=u(h,l,s+1/3),n=u(h,l,s),r=u(h,l,s-1/3)}return"rgba("+255*t+","+255*n+","+255*r+","+c+")"}(e):void 0;var t,n}function A(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function P(e,t){return h.fnc(e)?e(t.target,t.id,t.total):e}function q(e,t){return e.getAttribute(t)}function C(e,t,n){if(D([n,"deg","rad","turn"],A(t)))return t;var r=o.CSS[t+n];if(!h.und(r))return r;var i=document.createElement(e.tagName),s=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;s.appendChild(i),i.style.position="absolute",i.style.width=100+n;var a=100/i.offsetWidth;s.removeChild(i);var c=a*parseFloat(t);return o.CSS[t+n]=c,c}function E(e,t,n){if(t in e.style){var r=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),i=e.style[t]||getComputedStyle(e).getPropertyValue(r)||"0";return n?C(e,i,n):i}}function O(e,t){return h.dom(e)&&!h.inp(e)&&(!h.nil(q(e,t))||h.svg(e)&&e[t])?"attribute":h.dom(e)&&D(a,t)?"transform":h.dom(e)&&"transform"!==t&&E(e,t)?"css":null!=e[t]?"object":void 0}function W(e){if(h.dom(e)){for(var t,n=e.style.transform||"",r=/(\w+)\(([^)]*)\)/g,i=new Map;t=r.exec(n);)i.set(t[1],t[2]);return i}}function j(e,t,n,r){var i=u(t,"scale")?1:0+function(e){return u(e,"translate")||"perspective"===e?"px":u(e,"rotate")||u(e,"skew")?"deg":void 0}(t),s=W(e).get(t)||i;return n&&(n.transforms.list.set(t,s),n.transforms.last=t),r?C(e,s,r):s}function B(e,t,n,r){switch(O(e,t)){case"transform":return j(e,t,r,n);case"css":return E(e,t,n);case"attribute":return q(e,t);default:return e[t]||0}}function R(e,t){var n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;var r=A(e)||0,i=parseFloat(t),s=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return i+s+r;case"-":return i-s+r;case"*":return i*s+r}}function N(e,t){if(h.col(e))return S(e);if(/\s/g.test(e))return e;var n=A(e),r=n?e.substr(0,e.length-n.length):e;return t?r+t:r}function $(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function H(e){for(var t,n=e.points,r=0,i=0;i<n.numberOfItems;i++){var s=n.getItem(i);i>0&&(r+=$(t,s)),t=s}return r}function Q(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*q(e,"r")}(e);case"rect":return function(e){return 2*q(e,"width")+2*q(e,"height")}(e);case"line":return function(e){return $({x:q(e,"x1"),y:q(e,"y1")},{x:q(e,"x2"),y:q(e,"y2")})}(e);case"polyline":return H(e);case"polygon":return function(e){var t=e.points;return H(e)+$(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function U(e,t){var n=t||{},r=n.el||function(e){for(var t=e.parentNode;h.svg(t)&&h.svg(t.parentNode);)t=t.parentNode;return t}(e),i=r.getBoundingClientRect(),s=q(r,"viewBox"),a=i.width,o=i.height,c=n.viewBox||(s?s.split(" "):[0,0,a,o]);return{el:r,viewBox:c,x:c[0]/1,y:c[1]/1,w:a,h:o,vW:c[2],vH:c[3]}}function F(e,t,n){function r(n){void 0===n&&(n=0);var r=t+n>=1?t+n:0;return e.el.getPointAtLength(r)}var i=U(e.el,e.svg),s=r(),a=r(-1),o=r(1),c=n?1:i.w/i.vW,u=n?1:i.h/i.vH;switch(e.property){case"x":return(s.x-i.x)*c;case"y":return(s.y-i.y)*u;case"angle":return 180*Math.atan2(o.y-a.y,o.x-a.x)/Math.PI}}function V(e,t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,r=N(h.pth(e)?e.totalLength:e,t)+"";return{original:r,numbers:r.match(n)?r.match(n).map(Number):[0],strings:h.str(e)||t?r.split(n):[]}}function _(e){return x(e?k(h.arr(e)?e.map(M):M(e)):[],(function(e,t,n){return n.indexOf(e)===t}))}function G(e){var t=_(e);return t.map((function(e,n){return{target:e,id:n,total:t.length,transforms:{list:W(e)}}}))}function z(e,t){var n=T(t);if(/^spring/.test(n.easing)&&(n.duration=f(n.easing)),h.arr(e)){var r=e.length;2===r&&!h.obj(e[0])?e={value:e}:h.fnc(t.duration)||(n.duration=t.duration/r)}var i=h.arr(e)?e:[e];return i.map((function(e,n){var r=h.obj(e)&&!h.pth(e)?e:{value:e};return h.und(r.delay)&&(r.delay=n?0:t.delay),h.und(r.endDelay)&&(r.endDelay=n===i.length-1?t.endDelay:0),r})).map((function(e){return L(e,n)}))}function Z(e,t){var n=[],r=t.keyframes;for(var i in r&&(t=L(function(e){for(var t=x(k(e.map((function(e){return Object.keys(e)}))),(function(e){return h.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),n={},r=function(r){var i=t[r];n[i]=e.map((function(e){var t={};for(var n in e)h.key(n)?n==i&&(t.value=e[n]):t[n]=e[n];return t}))},i=0;i<t.length;i++)r(i);return n}(r),t)),t)h.key(i)&&n.push({name:i,tweens:z(t[i],e)});return n}function J(e,t){var n;return e.tweens.map((function(r){var i=function(e,t){var n={};for(var r in e){var i=P(e[r],t);h.arr(i)&&1===(i=i.map((function(e){return P(e,t)}))).length&&(i=i[0]),n[r]=i}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(r,t),s=i.value,a=h.arr(s)?s[1]:s,o=A(a),c=B(t.target,e.name,o,t),u=n?n.to.original:c,l=h.arr(s)?s[0]:u,d=A(l)||A(c),f=o||d;return h.und(a)&&(a=u),i.from=V(l,f),i.to=V(R(a,l),f),i.start=n?n.end:0,i.end=i.start+i.delay+i.duration+i.endDelay,i.easing=w(i.easing,i.duration),i.isPath=h.pth(s),i.isPathTargetInsideSVG=i.isPath&&h.svg(t.target),i.isColor=h.col(i.from.original),i.isColor&&(i.round=1),n=i,i}))}var Y={css:function(e,t,n){return e.style[t]=n},attribute:function(e,t,n){return e.setAttribute(t,n)},object:function(e,t,n){return e[t]=n},transform:function(e,t,n,r,i){if(r.list.set(t,n),t===r.last||i){var s="";r.list.forEach((function(e,t){s+=t+"("+e+") "})),e.style.transform=s}}};function X(e,t){G(e).forEach((function(e){for(var n in t){var r=P(t[n],e),i=e.target,s=A(r),a=B(i,n,s,e),o=R(N(r,s||A(a)),a),c=O(i,n);Y[c](i,n,o,e.transforms,!0)}}))}function K(e,t){return x(k(e.map((function(e){return t.map((function(t){return function(e,t){var n=O(e.target,t.name);if(n){var r=J(t,e),i=r[r.length-1];return{type:n,property:t.name,animatable:e,tweens:r,duration:i.end,delay:r[0].delay,endDelay:i.endDelay}}}(e,t)}))}))),(function(e){return!h.und(e)}))}function ee(e,t){var n=e.length,r=function(e){return e.timelineOffset?e.timelineOffset:0},i={};return i.duration=n?Math.max.apply(Math,e.map((function(e){return r(e)+e.duration}))):t.duration,i.delay=n?Math.min.apply(Math,e.map((function(e){return r(e)+e.delay}))):t.delay,i.endDelay=n?i.duration-Math.max.apply(Math,e.map((function(e){return r(e)+e.duration-e.endDelay}))):t.endDelay,i}var te=0;var ne=[],re=function(){var e;function t(n){for(var r=ne.length,i=0;i<r;){var s=ne[i];s.paused?(ne.splice(i,1),r--):(s.tick(n),i++)}e=i>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){se.suspendWhenDocumentHidden&&(ie()?e=cancelAnimationFrame(e):(ne.forEach((function(e){return e._onDocumentVisibility()})),re()))})),function(){e||ie()&&se.suspendWhenDocumentHidden||!(ne.length>0)||(e=requestAnimationFrame(t))}}();function ie(){return!!document&&document.hidden}function se(e){void 0===e&&(e={});var t,n=0,r=0,a=0,o=0,u=null;function l(e){var t=window.Promise&&new Promise((function(e){return u=e}));return e.finished=t,t}var h=function(e){var t=I(i,e),n=I(s,e),r=Z(n,e),a=G(e.targets),o=K(a,r),c=ee(o,n),u=te;return te++,L(t,{id:u,children:[],animatables:a,animations:o,duration:c.duration,delay:c.delay,endDelay:c.endDelay})}(e);l(h);function d(){var e=h.direction;"alternate"!==e&&(h.direction="normal"!==e?"normal":"reverse"),h.reversed=!h.reversed,t.forEach((function(e){return e.reversed=h.reversed}))}function f(e){return h.reversed?h.duration-e:e}function p(){n=0,r=f(h.currentTime)*(1/se.speed)}function m(e,t){t&&t.seek(e-t.timelineOffset)}function g(e){for(var t=0,n=h.animations,r=n.length;t<r;){var i=n[t],s=i.animatable,a=i.tweens,o=a.length-1,u=a[o];o&&(u=x(a,(function(t){return e<t.end}))[0]||u);for(var l=c(e-u.start-u.delay,0,u.duration)/u.duration,d=isNaN(l)?1:u.easing(l),f=u.to.strings,p=u.round,m=[],g=u.to.numbers.length,y=void 0,v=0;v<g;v++){var w=void 0,b=u.to.numbers[v],k=u.from.numbers[v]||0;w=u.isPath?F(u.value,d*b,u.isPathTargetInsideSVG):k+d*(b-k),p&&(u.isColor&&v>2||(w=Math.round(w*p)/p)),m.push(w)}var M=f.length;if(M){y=f[0];for(var D=0;D<M;D++){f[D];var T=f[D+1],I=m[D];isNaN(I)||(y+=T?I+T:I+" ")}}else y=m[0];Y[i.type](s.target,i.property,y,s.transforms),i.currentValue=y,t++}}function y(e){h[e]&&!h.passThrough&&h[e](h)}function v(e){var i=h.duration,s=h.delay,p=i-h.endDelay,v=f(e);h.progress=c(v/i*100,0,100),h.reversePlayback=v<h.currentTime,t&&function(e){if(h.reversePlayback)for(var n=o;n--;)m(e,t[n]);else for(var r=0;r<o;r++)m(e,t[r])}(v),!h.began&&h.currentTime>0&&(h.began=!0,y("begin")),!h.loopBegan&&h.currentTime>0&&(h.loopBegan=!0,y("loopBegin")),v<=s&&0!==h.currentTime&&g(0),(v>=p&&h.currentTime!==i||!i)&&g(i),v>s&&v<p?(h.changeBegan||(h.changeBegan=!0,h.changeCompleted=!1,y("changeBegin")),y("change"),g(v)):h.changeBegan&&(h.changeCompleted=!0,h.changeBegan=!1,y("changeComplete")),h.currentTime=c(v,0,i),h.began&&y("update"),e>=i&&(r=0,h.remaining&&!0!==h.remaining&&h.remaining--,h.remaining?(n=a,y("loopComplete"),h.loopBegan=!1,"alternate"===h.direction&&d()):(h.paused=!0,h.completed||(h.completed=!0,y("loopComplete"),y("complete"),!h.passThrough&&"Promise"in window&&(u(),l(h)))))}return h.reset=function(){var e=h.direction;h.passThrough=!1,h.currentTime=0,h.progress=0,h.paused=!0,h.began=!1,h.loopBegan=!1,h.changeBegan=!1,h.completed=!1,h.changeCompleted=!1,h.reversePlayback=!1,h.reversed="reverse"===e,h.remaining=h.loop,t=h.children;for(var n=o=t.length;n--;)h.children[n].reset();(h.reversed&&!0!==h.loop||"alternate"===e&&1===h.loop)&&h.remaining++,g(h.reversed?h.duration:0)},h._onDocumentVisibility=p,h.set=function(e,t){return X(e,t),h},h.tick=function(e){a=e,n||(n=a),v((a+(r-n))*se.speed)},h.seek=function(e){v(f(e))},h.pause=function(){h.paused=!0,p()},h.play=function(){h.paused&&(h.completed&&h.reset(),h.paused=!1,ne.push(h),p(),re())},h.reverse=function(){d(),h.completed=!h.reversed,p()},h.restart=function(){h.reset(),h.play()},h.remove=function(e){oe(_(e),h)},h.reset(),h.autoplay&&h.play(),h}function ae(e,t){for(var n=t.length;n--;)D(e,t[n].animatable.target)&&t.splice(n,1)}function oe(e,t){var n=t.animations,r=t.children;ae(e,n);for(var i=r.length;i--;){var s=r[i],a=s.animations;ae(e,a),a.length||s.children.length||r.splice(i,1)}n.length||r.length||t.pause()}se.version="3.2.1",se.speed=1,se.suspendWhenDocumentHidden=!0,se.running=ne,se.remove=function(e){for(var t=_(e),n=ne.length;n--;){oe(t,ne[n])}},se.get=B,se.set=X,se.convertPx=C,se.path=function(e,t){var n=h.str(e)?b(e)[0]:e,r=t||100;return function(e){return{property:e,el:n,svg:U(n),totalLength:Q(n)*(r/100)}}},se.setDashoffset=function(e){var t=Q(e);return e.setAttribute("stroke-dasharray",t),t},se.stagger=function(e,t){void 0===t&&(t={});var n=t.direction||"normal",r=t.easing?w(t.easing):null,i=t.grid,s=t.axis,a=t.from||0,o="first"===a,c="center"===a,u="last"===a,l=h.arr(e),d=l?parseFloat(e[0]):parseFloat(e),f=l?parseFloat(e[1]):0,p=A(l?e[1]:e)||0,m=t.start||0+(l?d:0),g=[],y=0;return function(e,t,h){if(o&&(a=0),c&&(a=(h-1)/2),u&&(a=h-1),!g.length){for(var v=0;v<h;v++){if(i){var w=c?(i[0]-1)/2:a%i[0],b=c?(i[1]-1)/2:Math.floor(a/i[0]),x=w-v%i[0],k=b-Math.floor(v/i[0]),M=Math.sqrt(x*x+k*k);"x"===s&&(M=-x),"y"===s&&(M=-k),g.push(M)}else g.push(Math.abs(a-v));y=Math.max.apply(Math,g)}r&&(g=g.map((function(e){return r(e/y)*y}))),"reverse"===n&&(g=g.map((function(e){return s?e<0?-1*e:-e:Math.abs(y-e)})))}return m+(l?(f-d)/y:d)*(Math.round(100*g[t])/100)+p}},se.timeline=function(e){void 0===e&&(e={});var t=se(e);return t.duration=0,t.add=function(n,r){var i=ne.indexOf(t),a=t.children;function o(e){e.passThrough=!0}i>-1&&ne.splice(i,1);for(var c=0;c<a.length;c++)o(a[c]);var u=L(n,I(s,e));u.targets=u.targets||e.targets;var l=t.duration;u.autoplay=!1,u.direction=t.direction,u.timelineOffset=h.und(r)?l:R(r,l),o(t),t.seek(u.timelineOffset);var d=se(u);o(d),a.push(d);var f=ee(a,e);return t.delay=f.delay,t.endDelay=f.endDelay,t.duration=f.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},se.easing=w,se.penner=v,se.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};var ce=se;firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();const ue="debug"===decodeURIComponent(window.location.hash.substring(1));let le=firebase.database(),he=firebase.storage();const de=new r;de.domElement.style.position="fixed",de.domElement.style.top="auto",de.domElement.style.bottom="0",de.domElement.style.left="auto",de.domElement.style.right="0",ue||de.domElement.classList.add("is-hidden");let fe=0;let pe=0;let me=0;window.addEventListener("load",e=>{"serviceWorker"in navigator&&(navigator.serviceWorker.register("sw.js").then(e=>{e.onupdatefound=function(){e.update()}}).catch(e=>{console.error(e.code,e.message)}),navigator.serviceWorker.addEventListener("message",e=>{null!==navigator.serviceWorker.controller&&"command"in e.data&&"caches"===e.data.command&&navigator.serviceWorker.controller.postMessage({command:"clear",caches:e.data.caches})}));var t=Vue.createApp({data:()=>({isDebug:ue,isDarkMode:!1,isMuted:!0,isLoading:!1,isLocating:!1,isRevealed:!1,isOverlayed:!1,isBlinded:!1,isPopup:!1,isExpanded:!1,isLearning:!1,isAnimating:!1,isHangingOn:!1,isSubmitting:!1,isStared:!1,elapsed:0,map:null,layer:null,mode:null,queryQueue:[],queryCache:{},cachedTracks:{},cachedDocuments:[],documentQueue:[],sequenceQueue:[],progress:null,user:null,input:"",animatedInputLength:0,maxInputLength:100,inputHasError:!1,messages:[],maxMessages:10,word:null,recentWords:[],tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,stars:-1,animatedStars:0,screenshot:null,notifications:[],recentImages:[],backgroundImagesQueue:[],backgroundImages:[],preloadImages:[],isUploading:!1,animations:null,currentAnimations:[],blendShapeAnimations:[],insetTop:0,insetBottom:0,text:[],popupTextHeight:0,animatedPopupTextHeight:0,tickerWidth:0,animatedTickerWidth:0,message:null,states:{},character:null,wordDictionary:{},reverseWordDictionary:{},attributes:["名前","所属","時間","場所","する事","生き物","食べ物","飲み物","聞くもの","見るもの","読むもの","使う物","身につけるもの","乗り物","部位","病気"]}),watch:{isMuted(e){try{localStorage.setItem("bot",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("bot")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},deep:!0},tickerWidth(e){const t=this,n={width:this.animatedTickerWidth};ce({targets:n,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=n.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll("#app>.background>div");if(e.length>1){const t=e.length-1,n=15;let r=0,i=null;for(const s of e){const a=[];for(let t=0;t<e.length;t++)t===r?a.push({visibility:"visible"}):a.push({visibility:"hidden"});const o=s.animate(a,{fill:"forwards",easing:"steps("+t+")",duration:1e3/n*e.length,iterations:1/0});null===i?i=o.startTime:o.startTime=i,r++}}})},deep:!0},text:{handler:()=>{t.$nextTick(()=>{t.popupTextHeight=t.$refs.popupText.getBoundingClientRect().height})},deep:!0},popupTextHeight(e){const t={height:this.animatedPopupTextHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedPopupTextHeight=t.height}})},stars(e){const t={count:this.animatedStars};ce({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};ce({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0}},methods:{signIn:function(e){if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,idToken:t.idToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){const e=t.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:e}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),"serviceWorker"in navigator&&null!==navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({command:"caches"})}).catch(e=>{console.error(e.code,e.message)})},refresh:function(e){this.update(!0)},share3:async function(e){const t=await navigator.permissions.query({name:"geolocation"});if("granted"==t.state||"prompt"==t.state)try{const t=await new Promise((e,t)=>{navigator.geolocation.getCurrentPosition(t=>{e(t)},e=>{t(e)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}),n=this,r=this.encodeGeohash(t.coords.latitude,t.coords.longitude),i=Math.floor(new Date/1e3);if(null===e){const e=await le.ref(`wonderland/users/${n.user.uid}/dictionary/words`).orderByValue().limitToLast(100).once("value"),s=e.exists()?e.val():null;await new Promise((e,a)=>{le.ref("wonderland/tracks").push().set({key:r+i,location:{latitude:t.coords.latitude,longitude:t.coords.longitude},geohash:r,tags:s,timestamp:i,user:{id:n.user.uid,name:n.user.displayName,image:n.user.photoURL}},async t=>{t?a(t):e()})})}else await new Promise((s,a)=>{le.ref("wonderland/tracks").push().set({key:r+i,name:e.name,attributes:e.attributes,location:{latitude:t.coords.latitude,longitude:t.coords.longitude},geohash:r,timestamp:i,user:{id:n.user.uid,name:n.user.displayName,image:n.user.photoURL}},async e=>{e?a(e):s()})});this.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:this.map.getZoom()<16?16:this.map.getZoom()})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}},update:async function(e=!1){this.isLoading=!0;const t=this,n=this.map.getCenter(),r=await this.fetch(e,n.latitude,n.longitude);if(e&&Object.keys(this.cachedTracks).forEach((function(e){for(const n of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(n);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e]})),null!==r){const e=Math.floor(new Date/1e3);let n=!1;for(const i in r)for(const s of r[i]){let r=null;for(const e in this.cachedTracks)if(s.id===this.cachedTracks[e].id){r=e;break}if(null===r){const r=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(s.location.latitude,s.location.longitude),{title:s.name,subTitle:this.formatTime(e-s.timestamp),icon:"/images/Marker-Star.svg"});this.setImage(r,s.user),this.cachedTracks[r.id]=s,this.cachedTracks[r.id].pushpin=r,this.cachedTracks[r.id].handlers=[Microsoft.Maps.Events.addHandler(r,"click",async e=>{t.mode=this.cachedTracks[e.target.id],t.isRevealed=!0}),Microsoft.Maps.Events.addHandler(r,"dblclick",e=>{window.location.hash=t.cachedTracks[e.target.id].id})],this.map.entities.push(r),n=!0}else if(s.timestamp>this.cachedTracks[r].timestamp){const t=this.cachedTracks[r].pushpin,i=this.cachedTracks[r].handlers;t.setLocation(new Microsoft.Maps.Location(s.location.latitude,s.location.longitude)),t.setOptions({title:s.name,subTitle:this.formatTime(e-s.timestamp)}),this.setImage(t,s.user),this.cachedTracks[r]=s,this.cachedTracks[r].pushpin=t,this.cachedTracks[r].handlers=i,n=!0}}const i=[];for(const e in r)for(const t of r[e])i.push(t.id);if(Object.keys(this.cachedTracks).forEach((function(e){if(!i.some(n=>n===t.cachedTracks[e].id)){for(const n of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(n);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e],n=!0}})),n){const e=10;try{const t=await new Promise(t=>{const n=Math.pow(10,-6);let i=[],s=[],a={};(new Date).getTime();let o={},c=[],u=n;for(const e in r){let t=[],n=[];for(const i of r[e])t.push(i.name),n.includes(i.name)||(i.name in a?a[i.name]+=1:a[i.name]=1,n.push(i.name));i.push(t)}for(const e in a)a[e]=Math.log(i.length/(a[e]+n));for(const e of i){let t={};for(const n of e)n in t?t[n]+=1:t[n]=1;for(const n in t)t[n]/=e.length,n in o||(o[n]=0);s.push(t)}for(const e in o)for(const t of s)if(e in t){const n=t[e]*a[e];n>o[e]&&(o[e]=n)}for(const e in o)e.length>1&&"..."!=e&&c.push({term:e,value:o[e]});c.sort((e,t)=>t.value-e.value),c.length>e&&c.splice(e);for(const e of c)e.value>u&&(u=e.value);for(const e of c)e.value/=u;c.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),t([i,c])});this.cachedDocuments.splice(0),this.tags.splice(0);for(const e of t[0])this.cachedDocuments.push(e);for(let e=0;e<t[1].length;e++)this.tags.push({index:e,name:t[1][e].term,score:t[1][e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}}}this.isLoading=!1},fetch:async function(e,t,n){const r=this,i=this.encodeGeohash(t,n,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]);let s=[i];const a=[],o={};let c=[],u=this.decodeGeohash(i);const l=Math.floor(new Date/1e3),h={};if(c.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude),new Microsoft.Maps.Location(u.topright.latitude,u.topright.longitude),new Microsoft.Maps.Location(u.bottomright.latitude,u.bottomright.longitude),new Microsoft.Maps.Location(u.bottomleft.latitude,u.bottomleft.longitude),new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1})),i.length>2){const e=this.getNeighbors(i);for(const t in e)s.push(e[t]),u=this.decodeGeohash(e[t]),c.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude),new Microsoft.Maps.Location(u.topright.latitude,u.topright.longitude),new Microsoft.Maps.Location(u.bottomright.latitude,u.bottomright.longitude),new Microsoft.Maps.Location(u.bottomleft.latitude,u.bottomleft.longitude),new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}))}this.layer.setPrimitives(c),this.queryQueue.push(i);for(const t of s){if(!e&&t in this.queryCache&&l-this.queryCache[t].timestamp<60){for(const e of this.queryCache[t].data)a.push(e),t in o?o[t].push(e):o[t]=[e];continue}const n=await le.ref("wonderland/tracks").orderByChild("key").limitToLast(50).startAt(t).endAt(t.padEnd(12,"z")+"").once("value");if(h[t]={timestamp:l,data:[]},n.exists()){const e=n.val();for(const n in e)e[n].id=n,a.push(e[n]),h[t].data.push(e[n]),t in o?o[t].push(e[n]):o[t]=[e[n]]}}if(this.queryQueue.shift(),this.queryQueue.length>0)return null;for(const e in h)this.queryCache[e]=h[e];Object.keys(this.queryCache).forEach((function(e){l-r.queryCache[e].timestamp>=60&&delete r.queryCache[e]}));const d=this.take(a.sort((e,t)=>t.timestamp-e.timestamp),100);return Object.keys(o).forEach((function(e){for(let t=o[e].length-1;t>0;t--)d.includes(o[e][t])||o[e].splice(t,1);0===o[e].length&&delete o[e]})),o},locate:async function(e){if("permissions"in navigator){const e=await navigator.permissions.query({name:"geolocation"});if("granted"==e.state||"prompt"==e.state){const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}}else{const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}},move:function(e){this.notify({text:"hogehoge",accent:this.character.accent,image:this.character.image},1e5)},send:async function(e){if(this.isDebug)if(this.input.length>0){let e=[],t=[];for(const n of this.input.split(/\s/))this.backgroundImages.some(e=>e.id===n)?e.push(n):t.push(n);if(e.length>0&&t.length>0){for(const n of e)le.ref("wonderland/images/"+n).transaction((function(e){return e.tags=t,e}));this.isLearning=!1}else this.input.length<=this.maxInputLength&&(this.learn({name:this.input}),this.input="",this.isLearning=!1)}else for(const e of this.backgroundImages){this.input=e.id;break}else this.input.length>0&&this.input.length<=this.maxInputLength&&(this.learn({name:this.input}),this.input="",this.isLearning=!1)},setImage:async function(e,t,n=!1){if("image"in t){let n;try{n=await new Promise(async(e,n)=>{const r=new Image;r.onload=()=>{e(r)},r.onerror=e=>{n(e)},t.image.startsWith("gs://")?r.src=await he.refFromURL(t.image).getDownloadURL():(r.crossOrigin="Anonymous",r.src=t.image)})}catch(t){return e.setOptions({icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                            <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                                <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                    <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                                </g>\n                                <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                    <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                    <g transform="matrix(0.410574,0,0,0.410574,34.0498,26.7694)">\n                                        <path d="M0,-7.29C-0.311,-8.247 -1.138,-8.944 -2.133,-9.089L-9.21,-10.117L-12.375,-16.529C-12.819,-17.432 -13.738,-18.003 -14.744,-18.003C-15.75,-18.003 -16.67,-17.432 -17.114,-16.53L-20.279,-10.117L-27.355,-9.089C-28.352,-8.944 -29.179,-8.247 -29.49,-7.29C-29.801,-6.333 -29.541,-5.283 -28.82,-4.581L-23.7,0.41L-24.908,7.459C-25.078,8.45 -24.672,9.452 -23.857,10.043C-23.043,10.635 -21.965,10.713 -21.074,10.244L-14.744,6.917L-8.415,10.244C-8.028,10.447 -7.606,10.548 -7.186,10.548C-6.638,10.548 -6.092,10.377 -5.632,10.043C-4.818,9.452 -4.41,8.45 -4.58,7.458L-5.789,0.41L-0.668,-4.581C0.052,-5.283 0.312,-6.333 0,-7.29" style="fill:white;fill-rule:nonzero;"/>\n                                    </g>\n                                </g>\n                            </svg>'}),void console.error(t)}const r=document.createElement("canvas"),i=r.getContext("2d");r.width=n.width,r.height=n.height,i.drawImage(n,0,0,n.width,n.height);const s='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                        <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                        <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                            <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                            </g>\n                            <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                <clipPath id="_clip1">\n                                    <circle cx="27.996" cy="25.239" r="12.214"/>\n                                </clipPath>\n                                <g clip-path="url(#_clip1)">\n                                    <g transform="matrix(0.791667,0,0,0.791667,5.83249,5.2582)">\n                                        <circle cx="27.996" cy="25.239" r="12.214" style="fill:white;"/>\n                                        <clipPath id="_clip2">\n                                            <circle cx="27.996" cy="25.239" r="12.214"/>\n                                        </clipPath>\n                                        <g clip-path="url(#_clip2)">\n                                            <g id="Background" transform="matrix(0.023856,0,0,0.023856,-2.53964,-5.29658)">\n                                                <use xlink:href="#_Image3" x="767" y="767" width="1026px" height="1026px"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <defs>\n                                <image id="_Image3" width="1026px" height="1026px" xlink:href="'+r.toDataURL()+'"/>\n                            </defs>\n                        </svg>';e.setOptions({icon:s})}},change:function(e){this.input.length<=this.maxInputLength?this.inputHasError=!1:this.inputHasError=!0},upload:async function(e){function t(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,n=e.length;t<n;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")}const n=this,r=he.ref(),i=[],s=[];for(const t of e.target.files)i.push(t);this.isUploading=!0;for(const e of i.sort((e,t)=>e.name>t.name?1:e.name<t.name?-1:0)){const a=r.child("images/"+t()).put(e);try{await new Promise((function(e,t){a.on("state_changed",(function(e){n.progress=e.bytesTransferred/e.totalBytes/i.length+s.length/i.length}),(function(e){t(e)}),(function(){e()}))}))}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}s.push(a.snapshot.ref.fullPath)}le.ref("wonderland/images").push({paths:s,timestamp:Math.floor(new Date/1e3)}),this.progress=null,this.isUploading=!1},learn:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}const n=[],r=[];if("attributes"in e)for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?r.push({name:t,value:!0}):r.push({name:t,value:!1}));else{const t=await le.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).once("value");if(t.exists()){const e=t.val();for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?r.push({name:t,value:!0}):r.push({name:t,value:!1}))}else for(const e of this.attributes)r.push({name:e,value:!1})}this.word={name:e.name,attributes:r},"user"in e&&(this.word.user=e.user);for(const r of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===r.type?n.push({type:r.type,speed:r.speed,duration:r.duration,text:t(r.text,e.name)}):n.push(r);n.length>0&&this.sequenceQueue.push(n)},check:function(e){for(const t of this.word.attributes)t===e.target.dataset.attribute&&(t.value=e.target.checked)},share:async function(e){const t=this,n=this.map.getCenter(),r=this.encodeGeohash(n.latitude,n.longitude),i={id:this.user.uid,name:this.user.displayName,image:this.user.photoURL},s=Math.floor(new Date/1e3);e.name in this.wordDictionary&&delete this.wordDictionary[e.name],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.name)&&delete this.reverseWordDictionary[t]}),this.isSubmitting=!0,le.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).transaction((function(t){if(!t){t={attributes:{},timestamp:s};for(const n of e.attributes)n.value?t.attributes[n.name]=s:t.attributes[n.name]=0;return"user"in e&&(t.user={id:e.user.id,name:e.user.name,image:e.user.image}),t}{let n=!1;for(const r of e.attributes){if(!(r.name in t.attributes)){n=!0;break}if(t.attributes[r.name]>0){if(!r.value){n=!0;break}}else if(r.value){n=!0;break}}if(n){let n=!0;const r={attributes:{}};for(const i of e.attributes)i.value?(i.name in t.attributes&&t.attributes[i.name]>0?r.attributes[i.name]=t.attributes[i.name]:r.attributes[i.name]=s,n=!1):r.attributes[i.name]=0;return n?null:(r.timestamp=s,r)}}}),(async function(a,o,c){if(o)if(c.exists()){const a=c.val(),o=[];for(const e in a.attributes)"number"==typeof a.attributes[e]&&a.attributes[e]>0&&t.attributes.includes(e)&&o.push(a.attributes[e]);if(1===o.length&&o[0]===s){function u(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}le.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return(e||0)+1}));for(const n of t.prepare(t.character.sequences.filter(e=>"Learned"===e.name)))"Message"===n.type&&t.notify({text:u(n.text,e.name),accent:t.character.accent,image:t.character.image});t.isStared=!0,window.setTimeout(()=>{t.isStared=!1},3e3),t.isMuted||t.$refs.twinkle.play()}"user"in e==!1||e.user.id===t.user.uid?le.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(o){const c={};o?(o.key=`${r}${s}`,o.location={latitude:n.latitude,longitude:n.longitude},o.geohash=r,o.timestamp=s):o={key:`${r}${s}`,name:e.name,location:{latitude:n.latitude,longitude:n.longitude},geohash:r,user:i,timestamp:s};for(const e in a.attributes)t.attributes.includes(e)&&(c[e]=a.attributes[e]);return o.attributes=c,o}),(function(e,n,r){n?r.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}else le.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return e&&e>1?e-1:null})),le.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(e){return null}),(function(e,n,r){n?r.exists()||t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1}));else a?(t.notify({text:a.message,accent:t.character.accent,image:t.character.image}),console.error(a),t.isSubmitting=!1):"user"in e==!1||e.user.id===t.user.uid?le.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(t){t={key:`${r}${s}`,name:e.name,location:{latitude:n.latitude,longitude:n.longitude},geohash:r,attributes:{},user:i,timestamp:s};for(const n of e.attributes)n.value?t.attributes[n.name]=s:t.attributes[n.name]=0;return t}),(function(e,n,r){n?r.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}))},next:async function(e,t=50){let n;if(n=null===e?await le.ref("wonderland/users/"+this.user.uid+"/dictionary/words").orderByKey().limitToFirst(t+1).once("value"):await le.ref("wonderland/users/"+this.user.uid+"/dictionary/words").orderByKey().startAt(e).limitToFirst(t+1).once("value"),"words"in this.mode&&n.exists()){const e=n.val();null!==this.mode.words&&this.mode.words.length>0&&this.mode.indexes.push(this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes});this.mode.words.length===t+1?this.mode.next=this.mode.words.pop():this.mode.next=null}},previous:async function(e,t=50){let n=await le.ref("wonderland/users/"+this.user.uid+"/dictionary/words").orderByKey().startAt(e).limitToFirst(t).once("value");if("words"in this.mode&&n.exists()){const e=n.val();null!==this.mode.words&&this.mode.words.length>0&&(this.mode.next=this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes})}},digestMessage:async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")},check2:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}const n=this,r=Math.floor(new Date/1e3),i=e.target.checked,s=e.target.dataset.attribute,a=e.target.dataset.word,o={id:this.user.uid,name:this.user.displayName,image:this.user.photoURL};e.target.dataset.word in this.wordDictionary&&delete this.wordDictionary[e.target.dataset.word],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.target.dataset.word)&&delete this.reverseWordDictionary[t]}),le.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+a).transaction((function(e){if(e){if(!i){let t=!0;for(const r in e)if(r!=s&&"number"==typeof e[r]&&e[r]>0&&n.attributes.includes(r)){t=!1;break}return t?null:(e[s]=0,e.timestamp=r,e)}}else{e={};for(const t of n.attributes)t!=s&&(e[t]=0)}return e.name=a,e[s]=e.timestamp=r,"user"in e!=!1&&e.user.id!==o.id||(e.user=o),e}),(function(e,i,s){if(i){if(s.exists()){const e=s.val();let i=[];for(const t in e)"number"==typeof e[t]&&e[t]>0&&n.attributes.includes(t)&&i.push(e[t]);if(1===i.length&&i[0]===r){le.ref("wonderland/users/"+n.user.uid+"/dictionary/count").transaction((function(e){return(e||0)+1}));for(const r of n.prepare(n.character.sequences.filter(e=>"Learned"===e.name)))"Message"===r.type&&n.notify({text:t(r.text,e.name),accent:n.character.accent,image:n.character.image});n.isMuted||n.$refs.twinkle.play()}}else le.ref("wonderland/users/"+n.user.uid+"/dictionary/count").transaction((function(e){if(e)return e-1}));n.word=null}else e&&(n.notify({text:e.message,accent:n.character.accent,image:n.character.image}),console.error(e))}))},learn2:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}let n=[];for(const e of this.attributes)n.push({name:e,value:!1});if("object"==typeof e){const r=this,i={user:e.user,timestamp:Math.floor(new Date/1e3)};for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i[t]=e.attributes[t]:i[t]=0);try{const[s,a]=await new Promise((t,n)=>{le.ref("wonderland/users/"+r.user.uid+"/dictionary/words/"+e.name).transaction((function(e){if(null===e)return i}),(function(e,r,i){e?n(e):t([r,i])}))});if(s){if(a.exists()){const e=a.val();for(let t of n)t.name in e&&(e[t.name]>0?t.value=!0:t.value=!1)}le.ref("wonderland/users/"+e.user.id+"/stars").transaction((function(e){return(e||0)+1}));for(const e of this.prepare(this.character.sequences.filter(e=>"Learned"===e.name)))"Message"===e.type&&this.notify({text:t(e.text,word.name),accent:this.character.accent,image:this.character.image})}else if(a.exists()){const e=a.val();for(let t of n)t.name in e&&(e[t.name]>0?t.value=!0:t.value=!1)}}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}e=e.name}else{const t=await le.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e).once("value");if(t.exists()){const e=t.val();for(let t of n)t.name in e&&(e[t.name]>0?t.value=!0:t.value=!1)}}let r=[];this.word={name:e,attributes:n};for(const n of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===n.type?r.push({type:n.type,speed:n.speed,duration:n.duration,text:t(n.text,e)}):r.push(n);r.length>0&&this.sequenceQueue.push(r)},activate:async function(){if(fe=pe=0,this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(r=0,i=n,r=Math.ceil(r),i=Math.floor(i),Math.floor(Math.random()*(i-r))+r);n--;const s=t[n];t[n]=t[e],t[e]=s}var r,i;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();await this.talk(this.user.uid,e.filter(e=>e!==this.character.name))||this.talk(this.user.uid)}else this.talk(this.user.uid)},talk:async function(e,t=[]){let n=this.character.sequences.filter(e=>"Activate"===e.name),r=[];if(this.isLoading=!0,t.length>0){const i=Math.floor(new Date/1e3),s=3600,a=Object.assign({},this.states),o=new TinySegmenter,c=[],u=[];for(const n of t){if(n in this.wordDictionary==!1||i-this.wordDictionary[n].timestamp>=s){const t=await le.ref("wonderland/users/"+e+"/dictionary/words/"+n).once("value");if(this.wordDictionary[n]={attributes:[],timestamp:i},t.exists()){const e=t.val();for(let t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[n].attributes.push(t)}}for(const e of this.wordDictionary[n].attributes)c.includes(e)||c.push(e)}for(const l of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(r=0,i=n,r=Math.ceil(r),i=Math.floor(i),Math.floor(Math.random()*(i-r))+r);n--;const s=t[n];t[n]=t[e],t[e]=s}var r,i;return t}(n)){const n=this.prepare([l]);let h=!1;for(const a of n){if("Message"==a.type)for(const l of Array.isArray(a.text)?a.text:o.segment(a.text)){if(Array.isArray(l)){for(const i of n)if("Message"==i.type){const n=await this.generate(e,i.text,t);if(null===n){h=!0;break}{let e,t;[e,t]=n,r.push({type:i.type,speed:i.speed,duration:i.duration,text:e})}}else r.push(i);if(h)break;return r.length>0&&this.sequenceQueue.push(r),this.isLoading=!1,!0}if(l.length>1&&!u.includes(l)){if(l in this.wordDictionary==!1||i-this.wordDictionary[l].timestamp>=s){const t=await le.ref("wonderland/users/"+e+"/dictionary/words/"+l).once("value");if(this.wordDictionary[l]={attributes:[],timestamp:i},t.exists()){const e=t.val();for(const t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[l].attributes.push(t)}}for(const i of this.wordDictionary[l].attributes)if(c.includes(i)){for(const i of n)if("Message"==i.type){const n=await this.generate(e,i.text,t);if(null===n){h=!0;break}{let e,t;[e,t]=n,r.push({type:i.type,speed:i.speed,duration:i.duration,text:e})}}else r.push(i);if(h)break;return r.length>0&&this.sequenceQueue.push(r),this.isLoading=!1,!0}u.push(l)}}if(h){r.splice(0);break}}this.states=a}return this.isLoading=!1,!1}for(const t of this.prepare(n))if("Message"===t.type){const n=await this.generate(e,t.text);if(null===n)return this.isLoading=!1,!1;{let e,i;[e,i]=n,r.push({type:t.type,speed:t.speed,duration:t.duration,text:e})}}else r.push(t);return r.length>0?(this.sequenceQueue.push(r),this.isLoading=!1,!0):(this.isLoading=!1,!1)},generate:async function(e,t,n=[]){function r(e){let t=[],n=Number.MIN_VALUE,r=0;for(let t=0;t<e.length;t++)e[t]>n&&(n=e[t]);for(let t=0;t<e.length;t++)r+=Math.exp(e[t]-n);for(let i=0;i<e.length;i++)t.push(Math.exp(e[i]-n)/r);return t}const i=Math.floor(new Date/1e3);let s=new TinySegmenter,a=Array.isArray(t)?t:s.segment(t),o={},c=[],u=new RegExp("[.#$\\[\\]]"),l={},h="",d=0;const f=Math.pow(10,-6);let p=[{sequence:[],score:1}];for(const t of n){if(t in this.wordDictionary==!1||i-this.wordDictionary[t].timestamp>=3600){const n=await le.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:i},n.exists()){const e=n.val();for(const n in e.attributes)"number"==typeof e.attributes[n]&&e.attributes[n]>0&&this.attributes.includes(n)&&this.wordDictionary[t].attributes.push(n)}}for(const e of this.wordDictionary[t].attributes)e in o?o[e].push(t):o[e]=[t]}for(const t of a){if(!c.includes(t)){if(Array.isArray(t)){let n=[],s=[];for(const r of t)if(r in o){for(const e of o[r])if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e===n.name){s.push(n.score),t=!1;break}t&&s.push(f)}}else{if(r in this.reverseWordDictionary==!1||i-this.reverseWordDictionary[r].timestamp>=3600){const t=await le.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+r).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[r]={words:[],timestamp:i},t.exists()){const e=t.val();for(const t in e)this.reverseWordDictionary[r].words.push(t)}}for(const e of this.reverseWordDictionary[r].words)if(a.includes(e)&&!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e==n.name){s.push(n.score),t=!1;break}t&&s.push(f)}}if(n.length>0&&s.length>0){const e=r(s);let t=[];for(let r=0;r<p.length;r++)for(let i=0;i<e.length;i++){let s=[].concat(p[r].sequence);s.push({index:d,term:n[i]}),t.push({sequence:s,score:p[r].score*e[i]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}else if(!u.test(t)){let n=[],s=[];if(t in this.wordDictionary==!1||i-this.wordDictionary[t].timestamp>=3600){const n=await le.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:i},n.exists()){const e=n.val();for(const n in e.attributes)"number"==typeof e.attributes[n]&&e.attributes[n]>0&&this.attributes.includes(n)&&this.wordDictionary[t].attributes.push(n)}}for(const r of this.wordDictionary[t].attributes)if(r in o){for(const e of o[r])if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e===n.name){s.push(n.score),t=!1;break}t&&s.push(f)}}else{if(r in this.reverseWordDictionary==!1||i-this.reverseWordDictionary[r].timestamp>=3600){const t=await le.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+r).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[r]={words:[],timestamp:i},t.exists()){const e=t.val();for(let t in e)this.reverseWordDictionary[r].words.push(t)}}for(const e of this.reverseWordDictionary[r].words)if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e==n.name){s.push(n.score),t=!1;break}t&&s.push(f)}}if(n.length>0&&s.length>0){const e=r(s);let t=[];for(let r=0;r<p.length;r++)for(let i=0;i<e.length;i++){let s=[].concat(p[r].sequence);s.push({index:d,term:n[i]}),t.push({sequence:s,score:p[r].score*e[i]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}c.push(t)}d++}const m=p[function(e){const t=Math.random();let n=0,r=0;for(let i of e){if(n<=t&&t<n+i)break;n+=i,r++}return r}(r(p.map(e=>e.score)))];for(let e=0;e<a.length;e++)if(a[e]in l)void 0===l[a[e]]?h+=a[e]:h+=l[a[e]];else{let t=!0;for(let n=0;n<m.sequence.length;n++)if(m.sequence[n].index==e){a[e]==m.sequence[n].term?l[a[e]]=void 0:(l[a[e]]=m.sequence[n].term,h+=m.sequence[n].term,t=!1);break}if(t){if(Array.isArray(a[e]))return null;h+=a[e]}}return[h,l]},notify:function(e,t=3e3){const n=this;e.id=window.setTimeout(e=>{for(let t=0;t<n.notifications.length;t++)if(n.notifications[t].id===e.id){n.notifications.splice(t,1);break}},t,e),this.notifications.unshift(e)},blinded:async function(){if(0==this.backgroundImagesQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(r=0,i=n,r=Math.ceil(r),i=Math.floor(i),Math.floor(Math.random()*(i-r))+r);n--;const s=t[n];t[n]=t[e],t[e]=s}var r,i;return t}(this.recentImages))this.backgroundImagesQueue.push(e)}const e=this.backgroundImagesQueue.shift();this.preloadImages.splice(0),this.backgroundImages.splice(0);for(const t of e.paths)try{this.preloadImages.push({id:e.id,url:await he.ref().child(t).getDownloadURL(),timestamp:e.timestamp})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}"tags"in e&&this.talk(this.user.uid,e.tags.filter(e=>e!==this.character.name))},load:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},error:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},update2:async function(e,t){this.isUpdating=!0;try{const n=await new Promise(n=>{const r=Math.pow(10,-6);let i=[],s=[],a=[],o={};const c=(new Date).getTime()-432e5;let u={},l=[],h=r;for(const t in e)if("tags"in e[t]&&e[t].tags.length>0){let n=[];i.push({tokens:e[t].tags,timestamp:e[t].timestamp});for(const r of e[t].tags)n.includes(r)||(r in o?o[r]+=1:o[r]=1,n.push(r))}for(const e in o)o[e]=Math.log(i.length/(o[e]+r));for(const e of i)1e3*e.timestamp>c&&s.push(e);if(s.length<10){const e=Math.max(i.length-10,0);s.splice(0);for(let t=i.length-1;t>=e;t--)s.unshift(i[t])}for(const e of s){let t={};for(const n of e.tokens)n in t?t[n]+=1:t[n]=1;for(const n in t)t[n]/=e.tokens.length,n in u||(u[n]=0);a.push(t)}for(const e in u)for(const t of a)if(e in t){const n=t[e]*o[e];n>u[e]&&(u[e]=n)}for(const e in u)e.length>1&&"..."!=e&&l.push({term:e,value:u[e]});l.sort((e,t)=>t.value-e.value),l.length>t&&l.splice(t);for(const e of l)e.value>h&&(h=e.value);for(const e of l)e.value/=h;l.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),n(l)});this.tags.splice(0);for(let e=0;e<n.length;e++)this.tags.push({index:e,name:n[e].term,score:n[e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isUpdating=!1},scrollToTop(){this.$nextTick(()=>{window.scroll(0,0)})},scrollToEnd:function(){"number"==typeof this.scrollTimeoutID&&clearTimeout(this.scrollTimeoutID),this.scrollTimeoutID=setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),500)},formatDate:function(e){return moment.locale(window.navigator.language),moment(e).format("LT")},animationStart:function(e){this.isAnimating=!0},animationEnd:function(e){this.isPopup||(this.message=null),this.isAnimating=!1},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},arrange:function(e,t){let n=[],r=[];for(const i of e)r.length<t?r.push(i):(n.push(r),r=[i]);return n.push(r),n},take:function(e,t){if(e.length>t){let n=[].concat(e);return n.splice(t),n}return e},reverse:function(e){return[].concat(e).reverse()},formatTime:function(e){const t=Math.floor(e),n=Math.floor(t/86400),r=Math.floor(t/3600),i=Math.floor(t/60);return n>0?n+"d":i>0?r>0?r+"h":i+"m":t%60+"s"},digestMessage:async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")},getDistance:function(e,t,n,r){var i=this.deg2rad(n-e),s=this.deg2rad(r-t),a=Math.sin(i/2)*Math.sin(i/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2);return 6371*(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,n=12){const r=[16,8,4,2,1];var i=1,s=[],a=[],o=0,c=0;let u="";for(s[0]=-90,s[1]=90,a[0]=-180,a[1]=180;u.length<n;){if(i){const e=(a[0]+a[1])/2;t>e?(c|=r[o],a[0]=e):a[1]=e}else{const t=(s[0]+s[1])/2;e>t?(c|=r[o],s[0]=t):s[1]=t}i=!i,o<4?o++:(u+="0123456789bcdefghjkmnpqrstuvwxyz"[c],o=0,c=0)}return u},decodeGeohash:function(e){const t=[16,8,4,2,1];var n=1,r=[],i=[];r[0]=-90,r[1]=90,i[0]=-180,i[1]=180;for(var s=0;s<e.length;s++)for(var a=e[s],o="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(a),c=0;c<5;c++){const e=t[c];n?(2,o&e?i[0]=(i[0]+i[1])/2:i[1]=(i[0]+i[1])/2):(2,o&e?r[0]=(r[0]+r[1])/2:r[1]=(r[0]+r[1])/2),n=!n}return r[2]=(r[0]+r[1])/2,i[2]=(i[0]+i[1])/2,{latitude:r[2],longitude:i[2],topleft:{latitude:r[0],longitude:i[0]},topright:{latitude:r[1],longitude:i[0]},bottomright:{latitude:r[1],longitude:i[1]},bottomleft:{latitude:r[0],longitude:i[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),n=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:n,topleft:this.calculateAdjacent(n,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(n,"bottom")}},calculateAdjacent:function(e,t){const n={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},r={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};n.bottom.odd=n.left.even,n.top.odd=n.right.even,n.left.odd=n.bottom.even,n.right.odd=n.top.even,r.bottom.odd=r.left.even,r.top.odd=r.right.even,r.left.odd=r.bottom.even,r.right.odd=r.top.even;var i=(e=e.toLowerCase()).charAt(e.length-1),s=e.length%2?"odd":"even",a=e.substring(0,e.length-1);return-1!=r[t][s].indexOf(i)&&(a=this.calculateAdjacent(a,t)),a+"0123456789bcdefghjkmnpqrstuvwxyz"[n[t][s].indexOf(i)]},prepare:function(e,t=null){function n(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let r=[],i=[];for(const n of e){const e=t;if(null===t&&n.name in this.states&&(e=this.states[n.name]),null!==e&&"state"in n){if(!new RegExp(n.state).test(e))continue}r.push(n)}if(r.length>0){let e=[];for(const i of r[n(0,r.length)].sequence)null!==t&&(this.states[i.name]=t),e.push(i);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let r=[],i=[];for(const e of this.character.sequences){let n=this.getSequenceStack(e,t);if(n.length>0){let e=[];do{let t=n.pop();if(n.length>0){let r=[];for(const i of n[n.length-1].sequence)if("Sequence"==i.type){if("sequence"in i){let t=!0;for(const n of e)if(n===i){t=!1;break}t&&r.push(i)}if(i===t)break}for(;r.length>0;)e.push(r.pop())}if("sequence"in t){let n=!0;for(const r of e)if(r===t){n=!1;break}n&&e.push(t)}}while(n.length>0);for(;e.length>0;)r.push(e.pop())}else r.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of r)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;i.push(e)}}else for(const e of r)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}i.push(e)}if(i.length>0){let t=0;for(const r of i[n(0,i.length)].sequence)e.splice(t,0,r),t++}}}else i.push(t)}}return i},getSequenceStack:function(e,t){let n=[];if(n.push(e),n[n.length-1]!==t){if("sequence"in e)for(const r of e.sequence)if("Sequence"==r.type){let e=this.getSequenceStack(r,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{n.push(t.pop())}while(t.length>0);return n}}n.pop()}return n},animate:function(e){if(requestAnimationFrame(this.animate),null!==this.character){const r=(e-this.elapsed)/1e3;let i=!1,s=!1,a=null;if(this.sequenceQueue.length>0&&this.sequenceQueue[0].length>0)fe=0;else if(fe+=r,this.isLoading||(pe+=r),0==this.sequenceQueue.length)if(pe>=10){if(this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(r=0,i=n,r=Math.ceil(r),i=Math.floor(i),Math.floor(Math.random()*(i-r))+r);n--;const s=t[n];t[n]=t[e],t[e]=s}var r,i;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();this.talk(this.user.uid,e.filter(e=>e!==this.character.name))}fe=pe=0}else(fe>=5||null===a)&&(this.sequenceQueue.push(this.prepare(this.character.sequences.filter(e=>"Idle"===e.name))),fe=0);if(this.sequenceQueue.length>0){const e=this.sequenceQueue[0];e.length>0?"Animation"==e[0].type?e.shift():"Message"!=e[0].type||null!==this.message||i||s||(this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},text:e[0].text},e.shift()):null!==this.message||i||s||this.sequenceQueue.shift()}if(null!==this.message){if(this.message.type.reverse)if(this.message.type.count>0){if(this.message.type.elapsed+=2*r,this.message.type.elapsed>=1/this.message.type.speed){if(this.message.type.count-1<this.message.text.length){let e=Math.floor(this.message.text.length/2);this.message.type.buffer.length<=e&&this.message.type.count>0&&(this.message.type.count-=1),this.message.type.buffer.length>0&&(this.message.type.buffer=this.message.type.buffer.substring(0,this.message.type.buffer.length-1))}this.message.type.elapsed=0}}else this.isPopup=!1;else if(this.message.type.buffer.length<this.message.text.length){if(this.message.type.elapsed>=0?this.message.type.elapsed+=r:this.isAnimating||(this.isPopup?this.message.type.elapsed=r:this.isPopup=!0),this.message.type.elapsed>=1/this.message.type.speed){let e=this.message.type.buffer.length,t=Math.floor(this.message.text.length/2),n=this.message.text.length;this.message.type.count>=t&&(this.message.type.buffer+=this.message.text.charAt(e)),this.message.type.count<n&&(this.message.type.count+=1),this.message.type.elapsed=0}}else this.message.time+=r,this.message.time>=this.message.duration&&(this.message.type.reverse=!0);if(this.message.text.length===this.message.type.buffer.length){const e=this.message.text.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else{let e=new Array,r="";for(let t=0;t<this.message.text.length;t++)-1==e.indexOf(this.message.text.charAt(t))&&"\n"!=this.message.text.charAt(t)&&null==this.message.text.charAt(t).match(/\s/)&&e.push(this.message.text.charAt(t));if(e.length>0)for(let i=0;i<this.message.type.count;i++)"\n"==this.message.text.charAt(i)?r+="\n":r+=e[(t=0,n=e.length,t=Math.ceil(t),n=Math.floor(n),~~(Math.floor(Math.random()*(n-t))+t))];if(r.length>this.message.type.buffer.length){const e=(this.message.type.buffer+r.substring(this.message.type.buffer.length,r.length)).split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else if(this.text.length!==this.message.type.buffer.length){const e=this.message.type.buffer.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}}}}var t,n;this.elapsed=e}},updated:function(){this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height;for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let t=0;for(const n of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))t+=n.getBoundingClientRect().width;t>0&&(this.tickerWidth=Math.min(t/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=t+"px")}},mounted:async function(){const e=this,t=localStorage.getItem("bot"),n=localStorage.getItem("credential");let r=null,i=[{path:"/assets/milch.json",probability:1}];if(t)try{const e=JSON.parse(t);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("bot")}if(n)try{r=JSON.parse(n)}catch(e){localStorage.removeItem("credential")}this.animate(),this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height,this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.canvasLight}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1,supportedMapTypes:[Microsoft.Maps.MapTypeId.grayscale,Microsoft.Maps.MapTypeId.canvasLight,Microsoft.Maps.MapTypeId.canvasDark]}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==e.user&&e.update()});try{this.progress=1;const e=await fetch(function(e,t){const n=Math.random();let r=0,i=0;for(let s of e){const e=t(s);if(r<=n&&n<r+e)break;r+=e,i++}return e[i]}(i,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!e.ok)throw new Error(e.statusText);this.character=await e.json(),this.progress=null}catch(e){this.progress=null,this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.sequenceQueue.push(this.prepare(this.character.sequences.filter(e=>"Start"===e.name))),null===r?(this.mode="sign-in",this.isRevealed=!0):r.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(r.idToken)).catch(e=>{console.error(e.code,e.message)}):r.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(r.accessToken)).catch(e=>{console.error(e.code,e.message)}):r.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(r.accessToken,r.secret)).catch(e=>{console.error(e.code,e.message)}):(this.mode="sign-in",this.isRevealed=!0),firebase.auth().onAuthStateChanged((function(t){t?(e.user=t,e.update(),le.ref("wonderland/users/"+t.uid+"/dictionary/count").on("value",t=>{const n=t.val();e.stars=null===n?0:n}),le.ref("wonderland/users/"+t.uid).orderByChild("dictionary/words/timestamp").limitToLast(10).on("value",t=>{if(t.exists()){const n=t.val();let r=[],i=0;for(const e in n)r.push({name:e,timestamp:n[e].timestamp});for(const t of e.prepare(e.character.sequences.filter(e=>"Alert"===e.name),10))"Message"===t.type&&(e.recentWords.splice(i,0,{name:t.text,image:e.character.image}),i++);for(const t of r.sort((e,t)=>t.timestamp-e.timestamp)){let n=-1;for(let r=0;r<e.recentWords.length;r++)if(e.recentWords[r].name==t.name){n=r;break}n>=0?(e.recentWords[n].timestamp<t.timestamp&&(t.name in e.wordDictionary&&delete e.wordDictionary[t.name],Object.keys(e.reverseWordDictionary).forEach(n=>{e.reverseWordDictionary[n].words.some(e=>e===t.name)&&delete e.reverseWordDictionary[n]})),e.recentWords.splice(n,1)):(t.name in e.wordDictionary&&delete e.wordDictionary[t.name],Object.keys(e.reverseWordDictionary).forEach(n=>{e.reverseWordDictionary[n].words.some(e=>e===t.name)&&delete e.reverseWordDictionary[n]})),e.recentWords.splice(i,0,t),i++}for(let t=e.recentWords.length-1;t>=i;t--)e.recentWords.splice(t,1)}})):null!==e.user&&(le.ref("wonderland/users/"+e.user.uid+"/dictionary/count").off("value"),le.ref("wonderland/users/"+e.user.uid).off("value"),e.user=null)}))},unmounted:function(){"number"==typeof this.tickIntervalID&&clearInterval(this.tickIntervalID),null!==vrmModel&&(scene.remove(vrmModel.scene),vrmModel=null)}}).mount("#app");window.addEventListener("resize",e=>{t.insetTop=t.$refs.indicator.getBoundingClientRect().height,t.insetBottom=t.$refs.blank.getBoundingClientRect().height}),window.addEventListener("click",e=>{}),window.addEventListener("dblclick",e=>{t.talk(t.user.uid),pe=0}),window.addEventListener("mousedown",e=>{}),window.addEventListener("mousemove",e=>{}),window.addEventListener("mouseup",e=>{}),window.addEventListener("touchstart",e=>{e.stopPropagation(),0==me?(me++,setTimeout(()=>{me=0},500)):(t.talk(t.user.uid),pe=0,me=0)}),window.addEventListener("touchmove",e=>{e.stopPropagation()}),window.addEventListener("touchend",e=>{e.stopPropagation()}),window.addEventListener("touchcancel",e=>{e.stopPropagation()}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,