!function(e){function t(t){for(var i,r,o=t[0],c=t[1],h=t[2],u=0,d=[];u<o.length;u++)r=o[u],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&d.push(a[r][0]),a[r]=0;for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&(e[i]=c[i]);for(l&&l(t);d.length;)d.shift()();return n.push.apply(n,h||[]),s()}function s(){for(var e,t=0;t<n.length;t++){for(var s=n[t],i=!0,o=1;o<s.length;o++){var c=s[o];0!==a[c]&&(i=!1)}i&&(n.splice(t--,1),e=r(r.s=s[0]))}return e}var i={},a={0:0},n=[];function r(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=i,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(s,i,function(t){return e[t]}.bind(null,i));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/js";var o=window.webpackJsonp=window.webpackJsonp||[],c=o.push.bind(o);o.push=t,o=o.slice();for(var h=0;h<o.length;h++)t(o[h]);var l=c;n.push([2,1]),s()}({2:function(e,t,s){"use strict";s.r(t);var i=s(1),a=s(0);firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();const n="debug"===decodeURIComponent(window.location.hash.substring(1));let r=firebase.database(),o=firebase.storage();const c=new i;c.domElement.style.position="fixed",c.domElement.style.top="auto",c.domElement.style.bottom="0",c.domElement.style.left="auto",c.domElement.style.right="0",n||c.domElement.classList.add("is-hidden");let h=0;let l=0;let u=0;window.addEventListener("load",e=>{"serviceWorker"in navigator&&(navigator.serviceWorker.register("sw.js").then(e=>{e.onupdatefound=function(){e.update()}}).catch(e=>{console.error(e.code,e.message)}),navigator.serviceWorker.addEventListener("message",e=>{null!==navigator.serviceWorker.controller&&"command"in e.data&&"caches"===e.data.command&&navigator.serviceWorker.controller.postMessage({command:"clear",caches:e.data.caches})}));var t=Vue.createApp({data:()=>({isDebug:n,isDarkMode:!1,isMuted:!0,isLoading:!1,isUpdating:!1,isLocating:!1,isRevealed:!1,isOverlayed:!1,isBlinded:!1,isPopup:!1,isExpanded:!1,isLearning:!1,isAnimating:!1,isHangingOn:!1,isSubmitting:!1,isDiscovering:!1,isStared:!1,isLocked:!1,canvasSize:{width:0,height:0,deviceWidth:0,deviceHeight:0,alternative:{width:0,height:0,deviceWidth:0,deviceHeight:0}},cachedImages:{},cachedSprites:[],alternativeCachedSprites:[],animationQueue:[],elapsed:0,map:null,layer:null,mode:null,queryQueue:[],queryCache:{},cachedTracks:{},cachedDocuments:[],documentQueue:[],sequenceQueue:[],progress:null,user:null,input:"",animatedInputLength:0,maxInputLength:100,inputHasError:!1,messages:[],maxMessages:10,word:null,recentWords:[],tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,stars:-1,animatedStars:0,steps:0,isStepping:!1,animatedSteps:0,deviceMotion:null,stats:[],screenshot:null,notifications:[],notificationHeight:0,animatedNotificationHeight:0,inputHeight:0,animatedInputHeight:0,recentImages:[],backgroundImagesQueue:[],backgroundImages:[],preloadImages:[],isUploading:!1,animations:null,currentAnimations:[],blendShapeAnimations:[],insetTop:0,insetBottom:0,text:[],popupTextHeight:0,animatedPopupTextHeight:0,tickerWidth:0,animatedTickerWidth:0,leaderboard:[],leaderboardHeight:0,animatedLeaderboardHeight:0,message:null,states:{},character:null,alternative:null,wordDictionary:{},reverseWordDictionary:{},attributes:["名前","所属","時間","場所","する事","生き物","食べ物","飲み物","聞くもの","見るもの","読むもの","使う物","身につけるもの","乗り物","部位","病気"],chars:[]}),watch:{isMuted(e){try{localStorage.setItem("character",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("character")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let s=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))s+=t.getBoundingClientRect().width;s>0&&(t.tickerWidth=Math.min(s/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=s+"px")}})},deep:!0},tickerWidth(e){const t=this,s={width:this.animatedTickerWidth};Object(a.a)({targets:s,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=s.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll("#app>.background>div");if(e.length>1){const t=e.length-1,s=15;let i=0,a=null;for(const n of e){const r=[];for(let t=0;t<e.length;t++)t===i?r.push({visibility:"visible"}):r.push({visibility:"hidden"});const o=n.animate(r,{fill:"forwards",easing:"steps("+t+")",duration:1e3/s*e.length,iterations:1/0});null===a?a=o.startTime:o.startTime=a,i++}}})},deep:!0},text:{handler:()=>{t.$nextTick(()=>{t.isPopup&&(t.popupTextHeight=t.$refs.popupText.getBoundingClientRect().height)})},deep:!0},popupTextHeight(e){const t={height:this.animatedPopupTextHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedPopupTextHeight=t.height}})},notifications:{handler:()=>{t.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationHeight(e){const t={height:this.animatedNotificationHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationHeight=t.height}})},leaderboard:{handler:()=>{t.$nextTick(()=>{t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height})},deep:!0},leaderboardHeight(e){const t={height:this.animatedLeaderboardHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedLeaderboardHeight=t.height}})},inputHeight(e){const t={height:this.animatedInputHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedInputHeight=t.height}})},stars(e){const t={count:this.animatedStars};Object(a.a)({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},steps(e){const t={count:this.animatedSteps};Object(a.a)({targets:t,count:e,round:100,duration:500,easing:"linear",update:()=>{this.animatedSteps=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};Object(a.a)({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0},chars:{handler:()=>{const e=[];for(const s of t.chars)for(const t of s)t.count>0&&e.push({set:t.set,count:t.count,timestamp:t.timestamp,checksum:[...String(t.timestamp)].reduce((e,t)=>e+t,0)+[...String(t.count)].reduce((e,t)=>e+t,0)});try{localStorage.setItem("fragments",JSON.stringify(e))}catch(e){localStorage.removeItem("fragments")}},deep:!0}},methods:{signIn:function(e){if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}r.ref("wonderland/users/"+e.user.uid).transaction((function(e){return e?(e.name=data.displayName,e.timestamp=timestamp):e={name:data.displayName,timestamp:timestamp},e}));try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,idToken:t.idToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}r.ref("wonderland/users/"+e.user.uid).transaction((function(e){return e?(e.name=data.displayName,e.timestamp=timestamp):e={name:data.displayName,timestamp:timestamp},e}));try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;const s=Math.floor(new Date/1e3);for(const t of e.user.providerData){const i=t.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:i}).catch((function(e){console.error(e.code,e.message)})),r.ref("wonderland/users/"+e.user.uid).transaction((function(i){return i?(i.name=t.displayName,i.link="https://twitter.com/"+e.additionalUserInfo.username,i.timestamp=s):i={name:t.displayName,link:"https://twitter.com/"+e.additionalUserInfo.username,timestamp:s},i}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),"serviceWorker"in navigator&&null!==navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({command:"caches"})}).catch(e=>{console.error(e.code,e.message)})},refresh:function(e){this.update(!0)},update:async function(e=!1){this.isLoading=!0;const t=this,s=this.map.getCenter(),i=await this.fetch(e,s.latitude,s.longitude);if(e&&Object.keys(this.cachedTracks).forEach((function(e){for(const s of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(s);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e]})),null!==i){const e=Math.floor(new Date/1e3);let s=!1;for(const a in i)for(const n of i[a]){let i=null;for(const e in this.cachedTracks)if(n.id===this.cachedTracks[e].id){i=e;break}if(null===i){const i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),{title:n.name,subTitle:this.formatTime(e-n.timestamp),icon:"/images/Marker-Star.svg"});this.setImage(i,n.user),this.cachedTracks[i.id]=n,this.cachedTracks[i.id].pushpin=i,this.cachedTracks[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async e=>{t.mode=this.cachedTracks[e.target.id],t.isRevealed=!0}),Microsoft.Maps.Events.addHandler(i,"dblclick",e=>{window.location.hash=t.cachedTracks[e.target.id].id})],this.map.entities.push(i),s=!0}else if(n.timestamp>this.cachedTracks[i].timestamp){const t=this.cachedTracks[i].pushpin,a=this.cachedTracks[i].handlers;t.setLocation(new Microsoft.Maps.Location(n.location.latitude,n.location.longitude)),t.setOptions({title:n.name,subTitle:this.formatTime(e-n.timestamp)}),this.setImage(t,n.user),this.cachedTracks[i]=n,this.cachedTracks[i].pushpin=t,this.cachedTracks[i].handlers=a,s=!0}}const a=[];for(const e in i)for(const t of i[e])a.push(t.id);if(Object.keys(this.cachedTracks).forEach((function(e){if(!a.some(s=>s===t.cachedTracks[e].id)){for(const s of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(s);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e],s=!0}})),s){const e=10;this.isUpdating=!0;const t=await new Promise(e=>{const t={},s=[];for(const e in i)for(const s of i[e])if(s.user.id in t)t[s.user.id].count++;else{const e=Object.assign({},s.user);e.count=1,t[s.user.id]=e}for(const e in t)s.push(t[e]);s.sort((e,t)=>t.count-e.count),e(s)});this.leaderboard.splice(0);for(const e of t)this.leaderboard.push(e);try{const t=await new Promise(t=>{const s=Math.pow(10,-6);let a=[],n=[],r={},o={},c=[],h=s;for(const e in i){let t=[],s=[];for(const a of i[e])t.push(a.name),s.includes(a.name)||(a.name in r?r[a.name]+=1:r[a.name]=1,s.push(a.name));a.push(t)}for(const e in r)r[e]=Math.log(a.length/(r[e]+s));for(const e of a){let t={};for(const s of e)s in t?t[s]+=1:t[s]=1;for(const s in t)t[s]/=e.length,s in o||(o[s]=0);n.push(t)}for(const e in o)for(const t of n)if(e in t){const s=t[e]*r[e];s>o[e]&&(o[e]=s)}for(const e in o)e.length>1&&"..."!=e&&c.push({term:e,value:o[e]});c.sort((e,t)=>t.value-e.value),c.length>e&&c.splice(e);for(const e of c)e.value>h&&(h=e.value);for(const e of c)e.value/=h;c.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),t([a,c])});this.cachedDocuments.splice(0),this.tags.splice(0);for(const e of t[0])this.cachedDocuments.push(e);for(let e=0;e<t[1].length;e++)this.tags.push({index:e,name:t[1][e].term,score:t[1][e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isUpdating=!1}}this.isLoading=!1},fetch:async function(e,t,s){const i=this,a=this.encodeGeohash(t,s,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]);let n=[a];const o=[],c={};let h=[],l=this.decodeGeohash(a);const u=Math.floor(new Date/1e3),d={};if(h.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude),new Microsoft.Maps.Location(l.topright.latitude,l.topright.longitude),new Microsoft.Maps.Location(l.bottomright.latitude,l.bottomright.longitude),new Microsoft.Maps.Location(l.bottomleft.latitude,l.bottomleft.longitude),new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1})),a.length>2){const e=this.getNeighbors(a);for(const t in e)n.push(e[t]),l=this.decodeGeohash(e[t]),h.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude),new Microsoft.Maps.Location(l.topright.latitude,l.topright.longitude),new Microsoft.Maps.Location(l.bottomright.latitude,l.bottomright.longitude),new Microsoft.Maps.Location(l.bottomleft.latitude,l.bottomleft.longitude),new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}))}this.layer.setPrimitives(h),this.queryQueue.push(a);for(const t of n){if(!e&&t in this.queryCache&&u-this.queryCache[t].timestamp<60){for(const e of this.queryCache[t].data)o.push(e),t in c?c[t].push(e):c[t]=[e];continue}const s=await r.ref("wonderland/tracks").orderByChild("key").limitToLast(50).startAt(t).endAt(t.padEnd(12,"z")+"").once("value");if(d[t]={timestamp:u,data:[]},s.exists()){const e=s.val();for(const s in e)e[s].id=s,o.push(e[s]),d[t].data.push(e[s]),t in c?c[t].push(e[s]):c[t]=[e[s]]}}if(this.queryQueue.shift(),this.queryQueue.length>0)return null;for(const e in d)this.queryCache[e]=d[e];Object.keys(this.queryCache).forEach((function(e){u-i.queryCache[e].timestamp>=60&&delete i.queryCache[e]}));const f=this.take(o.sort((e,t)=>t.timestamp-e.timestamp),100);return Object.keys(c).forEach((function(e){for(let t=c[e].length-1;t>0;t--)f.includes(c[e][t])||c[e].splice(t,1);0===c[e].length&&delete c[e]})),c},startPedometer:async function(){const e=this;if(DeviceMotionEvent.requestPermission){if("granted"!==await DeviceMotionEvent.requestPermission())return}this.deviceMotion=t=>{if(t.accelerationIncludingGravity){const n=t.accelerationIncludingGravity,r=Math.sqrt(n.x*n.x+n.y*n.y+n.z*n.z);if(e.isStepping){if(r<9.8){const t=new Date,n=t.getTime()-6048e5,r=[];e.steps++,e.isStepping=!1;for(let s=e.stats.length-1;s>0;s--)e.stats[s].date.getTime()<=n?e.stats.splice(s,1):e.stats[s].date.getFullYear()!==t.getFullYear()&&e.stats[s].date.getMonth()!==t.getMonth()&&e.stats[s].date.getDate()!==t.getDate()&&r.push({date:e.stats[s].date.toISOString(),steps:e.stats[s].steps});r.unshift({date:new Date(t.getFullYear(),t.getMonth(),t.getDate(),0,0,0).toISOString(),steps:e.steps});try{localStorage.setItem("stats",JSON.stringify(r))}catch(e){localStorage.removeItem("stats")}if(e.steps%10==0){const t=[];let n=0,r=Number.MAX_SAFE_INTEGER;function s(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}for(const s of e.chars){let e=0;for(const i of s)t.push({path:{row:n,column:e},data:i}),e++,i.count<r&&(r=i.count);n++}for(let e=t.length-1;e>0;e--)t[e].data.count>r&&t.splice(e,1);const o=t[(i=0,a=t.length,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i)].path,c=[];e.chars[o.row][o.column].count++,e.chars[o.row][o.column].timestamp=Math.floor(new Date/1e3);for(const t of this.prepare(this.character.sequences.filter(e=>"Capture"===e.name),e.chars[o.row][o.column].set[0],this.character.sequences))"Message"===t.type?c.push({type:t.type,speed:t.speed,duration:t.duration,character:this.character,text:s(t.text,e.chars[o.row][o.column].set[0])}):(t.character=this.character,c.push(t));c.length>0&&this.sequenceQueue.push(c)}}}else r>12&&(e.isStepping=!0)}var i,a},window.addEventListener("devicemotion",this.deviceMotion,!0)},stopPedometer:function(){window.removeEventListener("devicemotion",this.deviceMotion,!0),this.deviceMotion=null},locate:async function(e){if("permissions"in navigator){const e=await navigator.permissions.query({name:"geolocation"});if("granted"==e.state||"prompt"==e.state){const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}}else{const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}},send:async function(e){if(this.isDebug)if(this.input.length>0){let e=[],t=[];for(const s of this.input.split(/\s/))this.backgroundImages.some(e=>e.id===s)?e.push(s):t.push(s);if(e.length>0&&t.length>0){for(const s of e)r.ref("wonderland/images/"+s).transaction((function(e){return e.tags=t,e}));this.isLearning=!1}else if(this.input.length<=this.maxInputLength){const e=this.map.getCenter();this.learn({name:this.input,location:{latitude:e.latitude,longitude:e.longitude}}),this.input="",this.isLearning=!1}}else for(const e of this.backgroundImages){this.input=e.id;break}else if(this.input.length>0&&this.input.length<=this.maxInputLength){const e=this.map.getCenter();this.learn({name:this.input,location:{latitude:e.latitude,longitude:e.longitude}}),this.input="",this.isLearning=!1}else this.shake(this.$refs.input)},setImage:async function(e,t,s=!1){if("image"in t){let s;try{s=await new Promise(async(e,s)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{s(e)},t.image.startsWith("gs://")?i.src=await o.refFromURL(t.image).getDownloadURL():(i.crossOrigin="Anonymous",i.src=t.image)})}catch(t){return e.setOptions({icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                            <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                                <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                    <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                                </g>\n                                <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                    <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                    <g transform="matrix(0.410574,0,0,0.410574,34.0498,26.7694)">\n                                        <path d="M0,-7.29C-0.311,-8.247 -1.138,-8.944 -2.133,-9.089L-9.21,-10.117L-12.375,-16.529C-12.819,-17.432 -13.738,-18.003 -14.744,-18.003C-15.75,-18.003 -16.67,-17.432 -17.114,-16.53L-20.279,-10.117L-27.355,-9.089C-28.352,-8.944 -29.179,-8.247 -29.49,-7.29C-29.801,-6.333 -29.541,-5.283 -28.82,-4.581L-23.7,0.41L-24.908,7.459C-25.078,8.45 -24.672,9.452 -23.857,10.043C-23.043,10.635 -21.965,10.713 -21.074,10.244L-14.744,6.917L-8.415,10.244C-8.028,10.447 -7.606,10.548 -7.186,10.548C-6.638,10.548 -6.092,10.377 -5.632,10.043C-4.818,9.452 -4.41,8.45 -4.58,7.458L-5.789,0.41L-0.668,-4.581C0.052,-5.283 0.312,-6.333 0,-7.29" style="fill:white;fill-rule:nonzero;"/>\n                                    </g>\n                                </g>\n                            </svg>'}),void console.error(t)}const i=document.createElement("canvas"),a=i.getContext("2d");i.width=s.width,i.height=s.height,a.drawImage(s,0,0,s.width,s.height);const n='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                        <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                        <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                            <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                            </g>\n                            <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                <clipPath id="_clip1">\n                                    <circle cx="27.996" cy="25.239" r="12.214"/>\n                                </clipPath>\n                                <g clip-path="url(#_clip1)">\n                                    <g transform="matrix(0.791667,0,0,0.791667,5.83249,5.2582)">\n                                        <circle cx="27.996" cy="25.239" r="12.214" style="fill:white;"/>\n                                        <clipPath id="_clip2">\n                                            <circle cx="27.996" cy="25.239" r="12.214"/>\n                                        </clipPath>\n                                        <g clip-path="url(#_clip2)">\n                                            <g id="Background" transform="matrix(0.023856,0,0,0.023856,-2.53964,-5.29658)">\n                                                <use xlink:href="#_Image3" x="767" y="767" width="1026px" height="1026px"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <defs>\n                                <image id="_Image3" width="1026px" height="1026px" xlink:href="'+i.toDataURL()+'"/>\n                            </defs>\n                        </svg>';e.setOptions({icon:n})}},change:function(e){this.input.length<=this.maxInputLength?this.inputHasError=!1:this.inputHasError=!0},upload:async function(e){function t(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,s=e.length;t<s;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")}const s=this,i=o.ref(),a=[],n=[];for(const t of e.target.files)a.push(t);this.isUploading=!0;for(const e of a.sort((e,t)=>e.name>t.name?1:e.name<t.name?-1:0)){const r=i.child("images/"+t()).put(e);try{await new Promise((function(e,t){r.on("state_changed",(function(e){s.progress=e.bytesTransferred/e.totalBytes/a.length+n.length/a.length}),(function(e){t(e)}),(function(){e()}))}))}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}n.push(r.snapshot.ref.fullPath)}r.ref("wonderland/images").push({paths:n,timestamp:Math.floor(new Date/1e3)}),this.progress=null,this.isUploading=!1},learn:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}const s=[],i=[];if("attributes"in e)for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}));else{const t=await r.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).once("value");if(t.exists()){const e=t.val();for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}))}else for(const e of this.attributes)i.push({name:e,value:!1})}this.word={name:e.name,attributes:i},"location"in e&&(this.word.location=e.location),"user"in e&&(this.word.user=e.user);for(const i of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===i.type?s.push({type:i.type,speed:i.speed,duration:i.duration,text:t(i.text,e.name)}):s.push(i);s.length>0&&this.sequenceQueue.push(s)},check:function(e){for(const t of this.word.attributes)t===e.target.dataset.attribute&&(t.value=e.target.checked)},share:async function(e){const t=this,s="location"in e?e.location:this.map.getCenter(),i=this.encodeGeohash(s.latitude,s.longitude),a={id:this.user.uid,name:this.user.displayName,image:this.user.photoURL},n=Math.floor(new Date/1e3);if(e.name in this.wordDictionary&&delete this.wordDictionary[e.name],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.name)&&delete this.reverseWordDictionary[t]}),this.isSubmitting=!0,this.user.providerData[0].providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID){const e=await r.ref(`wonderland/users/${this.user.uid}/link`).once("value");e.exists()&&(a.link=e.val())}r.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).transaction((function(t){if(!t){t={attributes:{},timestamp:n};for(const s of e.attributes)s.value?t.attributes[s.name]=n:t.attributes[s.name]=0;return"user"in e&&(t.user={id:e.user.id,name:e.user.name,image:e.user.image}),t}{let s=!1;for(const i of e.attributes){if(!(i.name in t.attributes)){s=!0;break}if(t.attributes[i.name]>0){if(!i.value){s=!0;break}}else if(i.value){s=!0;break}}if(s){let s=!0;const i={attributes:{}};for(const a of e.attributes)a.value?(a.name in t.attributes&&t.attributes[a.name]>0?i.attributes[a.name]=t.attributes[a.name]:i.attributes[a.name]=n-1,s=!1):i.attributes[a.name]=0;return s?null:(i.timestamp=n,i)}}}),(async function(o,c,h){if(c)if(h.exists()){const o=h.val(),c=[];for(const e in o.attributes)"number"==typeof o.attributes[e]&&o.attributes[e]>0&&t.attributes.includes(e)&&c.push(o.attributes[e]);if(1===c.length&&c[0]===o.timestamp){function l(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}r.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return(e||0)+1}));for(const s of t.prepare(t.character.sequences.filter(e=>"Learned"===e.name)))"Message"===s.type&&t.notify({text:l(s.text,e.name),accent:t.character.accent,image:t.character.image});t.isStared=!0,window.setTimeout(()=>{t.isStared=!1},3e3),t.isMuted||t.$refs.twinkle.play()}"user"in e==!1||e.user.id===t.user.uid?r.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(r){const c={};r?(r.key=`${i}${n}`,r.location={latitude:s.latitude,longitude:s.longitude},r.geohash=i,r.timestamp=n):r={key:`${i}${n}`,name:e.name,location:{latitude:s.latitude,longitude:s.longitude},geohash:i,user:a,timestamp:n};for(const e in o.attributes)t.attributes.includes(e)&&(c[e]=o.attributes[e]);return r.attributes=c,r}),(function(e,s,i){s?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}else r.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return e&&e>1?e-1:null})),r.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(e){return null}),(function(e,s,i){s?i.exists()||t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1}));else o?(t.notify({text:o.message,accent:t.character.accent,image:t.character.image}),console.error(o),t.isSubmitting=!1):"user"in e==!1||e.user.id===t.user.uid?r.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(t){if(t){t.key=`${i}${n}`,t.location={latitude:s.latitude,longitude:s.longitude},t.geohash=i,t.user=a,t.timestamp=n;for(const s of e.attributes)s.value?t.attributes[s.name]=n-1:t.attributes[s.name]=0}else{t={key:`${i}${n}`,name:e.name,location:{latitude:s.latitude,longitude:s.longitude},geohash:i,attributes:{},user:a,timestamp:n};for(const s of e.attributes)s.value?t.attributes[s.name]=n:t.attributes[s.name]=0}return t}),(function(e,s,i){s?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}))},next:async function(e,t,s=50){let i;if(i=null===t?await r.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().limitToFirst(s+1).once("value"):await r.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(s+1).once("value"),"words"in this.mode){const e=[];if(i.exists()){const t=i.val();null!==this.mode.words&&this.mode.words.length>0&&this.mode.indexes.push(this.mode.words[0]);for(const s in t)e.push("user"in t[s]?{name:s,attributes:t[s].attributes,user:t[s].user}:{name:s,attributes:t[s].attributes});this.mode.words.length===s+1?this.mode.next=this.mode.words.pop():this.mode.next=null}this.mode.words=e}},previous:async function(e,t,s=50){let i=await r.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(s).once("value");if("words"in this.mode&&i.exists()){const e=i.val();null!==this.mode.words&&this.mode.words.length>0&&(this.mode.next=this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes})}},discover:async function(){const e=this,t=[],s={},i=[];for(const e of this.recentWords)this.user.uid!==e.user.id&&(t.push(e),s[e.name]=e);for(const e in this.cachedTracks)this.user.uid!==this.cachedTracks[e].user.id&&this.cachedTracks[e].name in s==!1&&t.push(this.cachedTracks[e]);this.isDiscovering=!0;for(const s of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(t))try{if(null!==await new Promise((t,i)=>{r.ref("wonderland/users/"+e.user.uid+"/dictionary/words/"+s.name).transaction((function(e){if(!e)return e}),(function(e,s,a){s?t(a):e?i(e):t(null)}))})){function a(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),s.name,this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:a(e.text,s.name)}):(e.character=this.character.alternative,i.push(e));return i.length>0&&this.sequenceQueue.push(i),this.learn({name:s.name,attributes:s.attributes,location:s.location,user:s.user}),void this.map.setView({center:new Microsoft.Maps.Location(s.location.latitude,s.location.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})}}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),"",this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:e.text}):(e.character=this.character.alternative,i.push(e));i.length>0&&this.sequenceQueue.push(i)},digestMessage:async function(e){const t=(new TextEncoder).encode(e),s=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(s)).map(e=>e.toString(16).padStart(2,"0")).join("")},activate:async function(){if(h=l=0,this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();await this.talk(this.user.uid,e.filter(e=>e!==this.character.name))||this.talk(this.user.uid)}else this.talk(this.user.uid)},talk:async function(e,t=[]){let s=this.character.sequences.filter(e=>"Activate"===e.name),i=[];if(this.isLoading=!0,t.length>0){const a=Math.floor(new Date/1e3),n=3600,o=Object.assign({},this.states),c=new TinySegmenter,h=[],l=[];for(const s of t){if(s in this.wordDictionary==!1||a-this.wordDictionary[s].timestamp>=n){const t=await r.ref("wonderland/users/"+e+"/dictionary/words/"+s).once("value");if(this.wordDictionary[s]={attributes:[],timestamp:a},t.exists()){const e=t.val();for(let t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[s].attributes.push(t)}}for(const e of this.wordDictionary[s].attributes)h.includes(e)||h.push(e)}for(const u of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(s)){const s=this.prepare([u]);let d=!1;for(const o of s){if("Message"==o.type)for(const u of Array.isArray(o.text)?o.text:c.segment(o.text)){if(Array.isArray(u)){for(const a of s)if("Message"==a.type){const s=await this.generate(e,a.text,t);if(null===s){d=!0;break}{let e,t;[e,t]=s,i.push({type:a.type,speed:a.speed,duration:a.duration,text:e})}}else i.push(a);if(d)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}if(u.length>1&&!l.includes(u)){if(u in this.wordDictionary==!1||a-this.wordDictionary[u].timestamp>=n){const t=await r.ref("wonderland/users/"+e+"/dictionary/words/"+u).once("value");if(this.wordDictionary[u]={attributes:[],timestamp:a},t.exists()){const e=t.val();for(const t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[u].attributes.push(t)}}for(const a of this.wordDictionary[u].attributes)if(h.includes(a)){for(const a of s)if("Message"==a.type){const s=await this.generate(e,a.text,t);if(null===s){d=!0;break}{let e,t;[e,t]=s,i.push({type:a.type,speed:a.speed,duration:a.duration,text:e})}}else i.push(a);if(d)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}l.push(u)}}if(d){i.splice(0);break}}this.states=o}return this.isLoading=!1,!1}for(const t of this.prepare(s))if("Message"===t.type){const s=await this.generate(e,t.text);if(null===s)return this.isLoading=!1,!1;{let e,a;[e,a]=s,i.push({type:t.type,speed:t.speed,duration:t.duration,text:e})}}else i.push(t);return i.length>0?(this.sequenceQueue.push(i),this.isLoading=!1,!0):(this.isLoading=!1,!1)},generate:async function(e,t,s=[]){function i(e){let t=[],s=Number.MIN_VALUE,i=0;for(let t=0;t<e.length;t++)e[t]>s&&(s=e[t]);for(let t=0;t<e.length;t++)i+=Math.exp(e[t]-s);for(let a=0;a<e.length;a++)t.push(Math.exp(e[a]-s)/i);return t}const a=Math.floor(new Date/1e3);let n=new TinySegmenter,o=Array.isArray(t)?t:n.segment(t),c={},h=[],l=new RegExp("[.#$\\[\\]]"),u={},d="",f=0;const m=Math.pow(10,-6);let p=[{sequence:[],score:1}];for(const t of s){if(t in this.wordDictionary==!1||a-this.wordDictionary[t].timestamp>=3600){const s=await r.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:a},s.exists()){const e=s.val();for(const s in e.attributes)"number"==typeof e.attributes[s]&&e.attributes[s]>0&&this.attributes.includes(s)&&this.wordDictionary[t].attributes.push(s)}}for(const e of this.wordDictionary[t].attributes)e in c?c[e].push(t):c[e]=[t]}for(const t of o){if(!h.includes(t)){if(Array.isArray(t)){let s=[],n=[];for(const i of t)if(i in c){for(const e of c[i])if(!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e===s.name){n.push(s.score),t=!1;break}t&&n.push(m)}}else{if(i in this.reverseWordDictionary==!1||a-this.reverseWordDictionary[i].timestamp>=3600){const t=await r.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:a},t.exists()){const e=t.val();for(const t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(o.includes(e)&&!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e==s.name){n.push(s.score),t=!1;break}t&&n.push(m)}}if(s.length>0&&n.length>0){const e=i(n);let t=[];for(let i=0;i<p.length;i++)for(let a=0;a<e.length;a++){let n=[].concat(p[i].sequence);n.push({index:f,term:s[a]}),t.push({sequence:n,score:p[i].score*e[a]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}else if(!l.test(t)){let s=[],n=[];if(t in this.wordDictionary==!1||a-this.wordDictionary[t].timestamp>=3600){const s=await r.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:a},s.exists()){const e=s.val();for(const s in e.attributes)"number"==typeof e.attributes[s]&&e.attributes[s]>0&&this.attributes.includes(s)&&this.wordDictionary[t].attributes.push(s)}}for(const i of this.wordDictionary[t].attributes)if(i in c){for(const e of c[i])if(!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e===s.name){n.push(s.score),t=!1;break}t&&n.push(m)}}else{if(i in this.reverseWordDictionary==!1||a-this.reverseWordDictionary[i].timestamp>=3600){const t=await r.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:a},t.exists()){const e=t.val();for(let t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(o.includes(e)&&!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e==s.name){n.push(s.score),t=!1;break}t&&n.push(m)}}if(s.length>0&&n.length>0){const e=i(n);let t=[];for(let i=0;i<p.length;i++)for(let a=0;a<e.length;a++){let n=[].concat(p[i].sequence);n.push({index:f,term:s[a]}),t.push({sequence:n,score:p[i].score*e[a]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}h.push(t)}f++}const g=p[function(e){const t=Math.random();let s=0,i=0;for(let a of e){if(s<=t&&t<s+a)break;s+=a,i++}return i}(i(p.map(e=>e.score)))];for(let e=0;e<o.length;e++){const t=JSON.stringify(o[e]);if(t in u)void 0===u[t]?d+=o[e]:d+=u[t];else{let s=!0;for(let i=0;i<g.sequence.length;i++)if(g.sequence[i].index==e){t==g.sequence[i].term?u[t]=void 0:(u[t]=g.sequence[i].term,d+=g.sequence[i].term,s=!1);break}if(s){if(Array.isArray(o[e]))return null;d+=o[e]}}}return[d,u]},notify:function(e,t=3e3){const s=this;e.id=window.setTimeout(e=>{for(let t=0;t<s.notifications.length;t++)if(s.notifications[t].id===e.id){s.notifications.splice(t,1);break}},t,e),this.notifications.unshift(e)},blinded:async function(){if(0==this.backgroundImagesQueue.length){for(const e of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(this.recentImages))this.backgroundImagesQueue.push(e)}const e=this.backgroundImagesQueue.shift();this.preloadImages.splice(0),this.backgroundImages.splice(0);for(const t of e.paths)try{this.preloadImages.push({id:e.id,url:await o.ref().child(t).getDownloadURL(),timestamp:e.timestamp})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}"tags"in e&&this.talk(this.user.uid,e.tags.filter(e=>e!==this.character.name))},load:function(e){let t=!0;for(let s of this.preloadImages)s.url==e?s.isLoaded=!0:"isLoaded"in s||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},error:function(e){let t=!0;for(let s of this.preloadImages)s.url==e?s.isLoaded=!0:"isLoaded"in s||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},shake:function(e){e.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(8px, 0, 0)"},{transform:"translate3d(-8px, 0, 0)"},{transform:"translate3d(7px, 0, 0)"},{transform:"translate3d(-7px, 0, 0)"},{transform:"translate3d(6px, 0, 0)"},{transform:"translate3d(-6px, 0, 0)"},{transform:"translate3d(5px, 0, 0)"},{transform:"translate3d(-5px, 0, 0)"},{transform:"translate3d(4px, 0, 0)"},{transform:"translate3d(-4px, 0, 0)"},{transform:"translate3d(3px, 0, 0)"},{transform:"translate3d(-3px, 0, 0)"},{transform:"translate3d(2px, 0, 0)"},{transform:"translate3d(-2px, 0, 0)"},{transform:"translate3d(1px, 0, 0)"},{transform:"translate3d(-1px, 0, 0)"},{transform:"translate3d(0, 0, 0)"}],{duration:1e3,iterations:1})},scrollToTop(){this.$nextTick(()=>{window.scroll(0,0)})},scrollToEnd:function(){"number"==typeof this.scrollTimeoutID&&clearTimeout(this.scrollTimeoutID),this.scrollTimeoutID=setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),500)},formatDate:function(e){return moment.locale(window.navigator.language),moment(e).format("LT")},animationStart:function(e){this.isAnimating=!0},animationEnd:function(e){const t=this;this.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height,t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height}),this.isPopup||(this.message=null),this.isAnimating=!1},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let s=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))s+=t.getBoundingClientRect().width;s>0&&(t.tickerWidth=Math.min(s/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=s+"px")}})},range:function(e,t){const s=[];for(const i of t)s.push(new Date(new Date(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()).getTime()+24*i*60*60*1e3));return s},arrange:function(e,t){let s=[],i=[];for(const a of e)i.length<t?i.push(a):(s.push(i),i=[a]);return s.push(i),s},take:function(e,t){if(e.length>t){let s=[].concat(e);return s.splice(t),s}return e},reverse:function(e){return[].concat(e).reverse()},formatTime:function(e){const t=Math.floor(e),s=Math.floor(t/86400),i=Math.floor(t/3600),a=Math.floor(t/60);return s>0?s+"d":a>0?i>0?i+"h":a+"m":t%60+"s"},digestMessage:async function(e){const t=(new TextEncoder).encode(e),s=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(s)).map(e=>e.toString(16).padStart(2,"0")).join("")},getDistance:function(e,t,s,i){var a=this.deg2rad(s-e),n=this.deg2rad(i-t),r=Math.sin(a/2)*Math.sin(a/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(s))*Math.sin(n/2)*Math.sin(n/2);return 6371*(2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,s=12){const i=[16,8,4,2,1];var a=1,n=[],r=[],o=0,c=0;let h="";for(n[0]=-90,n[1]=90,r[0]=-180,r[1]=180;h.length<s;){if(a){const e=(r[0]+r[1])/2;t>e?(c|=i[o],r[0]=e):r[1]=e}else{const t=(n[0]+n[1])/2;e>t?(c|=i[o],n[0]=t):n[1]=t}a=!a,o<4?o++:(h+="0123456789bcdefghjkmnpqrstuvwxyz"[c],o=0,c=0)}return h},decodeGeohash:function(e){const t=[16,8,4,2,1];var s=1,i=[],a=[];i[0]=-90,i[1]=90,a[0]=-180,a[1]=180;for(var n=0;n<e.length;n++)for(var r=e[n],o="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(r),c=0;c<5;c++){const e=t[c];s?(2,o&e?a[0]=(a[0]+a[1])/2:a[1]=(a[0]+a[1])/2):(2,o&e?i[0]=(i[0]+i[1])/2:i[1]=(i[0]+i[1])/2),s=!s}return i[2]=(i[0]+i[1])/2,a[2]=(a[0]+a[1])/2,{latitude:i[2],longitude:a[2],topleft:{latitude:i[0],longitude:a[0]},topright:{latitude:i[1],longitude:a[0]},bottomright:{latitude:i[1],longitude:a[1]},bottomleft:{latitude:i[0],longitude:a[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),s=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:s,topleft:this.calculateAdjacent(s,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(s,"bottom")}},calculateAdjacent:function(e,t){const s={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},i={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};s.bottom.odd=s.left.even,s.top.odd=s.right.even,s.left.odd=s.bottom.even,s.right.odd=s.top.even,i.bottom.odd=i.left.even,i.top.odd=i.right.even,i.left.odd=i.bottom.even,i.right.odd=i.top.even;var a=(e=e.toLowerCase()).charAt(e.length-1),n=e.length%2?"odd":"even",r=e.substring(0,e.length-1);return-1!=i[t][n].indexOf(a)&&(r=this.calculateAdjacent(r,t)),r+"0123456789bcdefghjkmnpqrstuvwxyz"[s[t][n].indexOf(a)]},prepare:function(e,t=null,s=null){function i(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let a=[],n=[];for(const s of e){const e=t;if(null===t&&s.name in this.states&&(e=this.states[s.name]),null!==e&&"state"in s&&null!==s.state){new RegExp(s.state).test(e)&&a.push(s)}}if(0===a.length){for(const t of e)"state"in t!=!1&&null!==t.state||a.push(t);t=null}if(a.length>0){let e=[];for(const s of a[i(0,a.length)].sequence)null!==t&&(this.states[s.name]=t),e.push(s);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let a=[],n=[];for(const e of null===s?this.character.sequences:s){let s=this.getSequenceStack(e,t);if(s.length>0){let e=[];do{let t=s.pop();if(s.length>0){let i=[];for(const a of s[s.length-1].sequence)if("Sequence"==a.type){if("sequence"in a){let t=!0;for(const s of e)if(s===a){t=!1;break}t&&i.push(a)}if(a===t)break}for(;i.length>0;)e.push(i.pop())}if("sequence"in t){let s=!0;for(const i of e)if(i===t){s=!1;break}s&&e.push(t)}}while(s.length>0);for(;e.length>0;)a.push(e.pop())}else a.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of a)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;n.push(e)}}else for(const e of a)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}n.push(e)}if(n.length>0){let t=0;for(const s of n[i(0,n.length)].sequence)e.splice(t,0,s),t++}}}else n.push(t)}}return n},getSequenceStack:function(e,t){let s=[];if(s.push(e),s[s.length-1]!==t){if("sequence"in e)for(const i of e.sequence)if("Sequence"==i.type){let e=this.getSequenceStack(i,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{s.push(t.pop())}while(t.length>0);return s}}s.pop()}return s},animate:async function(e){if(requestAnimationFrame(this.animate),null!==this.character){const i=(e-this.elapsed)/1e3;if(this.elapsed=e,this.sequenceQueue.length>0&&Array.isArray(this.sequenceQueue[0]))h=0;else if(h+=i,this.isLoading||(l+=i),0==this.sequenceQueue.length)if(l>=10){if(this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();this.talk(this.user.uid,e.filter(e=>e!==this.character.name))}h=l=0}else h>=5&&(this.sequenceQueue.push({sequences:this.prepare(this.character.sequences.filter(e=>"Idle"===e.name))}),h=0);if(!this.isLocked&&this.sequenceQueue.length>0){const e=Array.isArray(this.sequenceQueue[0])?this.sequenceQueue[0]:this.sequenceQueue[0].sequences;if(e.length>0)if("Animation"==e[0].type){if("frames"in e[0])for(const t of e[0].frames)if(Array.isArray(t))"character"in e[0]?this.animationQueue.push({character:e[0].character,images:t}):this.animationQueue.push({character:this.character,images:t});else if("object"==typeof t&&"iterations"in t)if("images"in t){const s="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:s,images:t.images})}else if("sprites"in t){const s="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:s,images:t.sprites})}e.shift()}else"Message"==e[0].type&&null===this.message&&0===this.animationQueue.length&&("character"in e[0]?this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:e[0].character,text:e[0].text}:this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:{name:this.character.name,accent:this.character.accent,image:this.character.image},text:e[0].text},e.shift());else if(null===this.message&&0===this.animationQueue.length){const e=this;return Object.keys(this.cachedImages).forEach((function(t){e.cachedSprites.some(e=>e.source===t)||delete e.cachedImages[t]})),this.sequenceQueue.shift(),void(this.alternative=null)}}if(null!==this.message){if(this.message.type.reverse)if(this.message.type.count>0){if(this.message.type.elapsed+=2*i,this.message.type.elapsed>=1/this.message.type.speed){if(this.message.type.count-1<this.message.text.length){let e=Math.floor(this.message.text.length/2);this.message.type.buffer.length<=e&&this.message.type.count>0&&(this.message.type.count-=1),this.message.type.buffer.length>0&&(this.message.type.buffer=this.message.type.buffer.substring(0,this.message.type.buffer.length-1))}this.message.type.elapsed=0}}else this.isPopup=!1;else if(this.message.type.buffer.length<this.message.text.length){if(this.message.type.elapsed>=0?this.message.type.elapsed+=i:this.isAnimating||(this.isPopup?this.message.type.elapsed=i:this.isPopup=!0),this.message.type.elapsed>=1/this.message.type.speed){let e=this.message.type.buffer.length,t=Math.floor(this.message.text.length/2),s=this.message.text.length;this.message.type.count>=t&&(this.message.type.buffer+=this.message.text.charAt(e)),this.message.type.count<s&&(this.message.type.count+=1),this.message.type.elapsed=0}}else this.message.time+=i,this.message.time>=this.message.duration&&(this.message.type.reverse=!0);if(this.message.text.length===this.message.type.buffer.length){const e=this.message.text.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else{let e=new Array,i="";for(let t=0;t<this.message.text.length;t++)-1==e.indexOf(this.message.text.charAt(t))&&"\n"!=this.message.text.charAt(t)&&null==this.message.text.charAt(t).match(/\s/)&&e.push(this.message.text.charAt(t));if(e.length>0)for(let a=0;a<this.message.type.count;a++)"\n"==this.message.text.charAt(a)?i+="\n":i+=e[(t=0,s=e.length,t=Math.ceil(t),s=Math.floor(s),~~(Math.floor(Math.random()*(s-t))+t))];if(i.length>this.message.type.buffer.length){const e=(this.message.type.buffer+i.substring(this.message.type.buffer.length,i.length)).split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else if(this.text.length!==this.message.type.buffer.length){const e=this.message.type.buffer.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}}}if(this.animationQueue.length>0){const e=this.animationQueue[0];if(!this.isLocked){const t=[];for(const e of this.animationQueue)t.push(e);this.isLocked=!0;for(const e of t)for(const t of e.images)if(t.source in this.cachedImages==!1)try{const e=await new Promise(async(e,s)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{s(e)},i.crossOrigin="Anonymous",i.src=t.source});this.cachedImages[t.source]=e}catch(e){console.error(e)}if(this.isLocked=!1,e.character.name===this.character.name){this.cachedSprites.splice(0);for(const t of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,e.images))this.cachedSprites.push(t)}else{this.alternative=this.character.alternative,this.alternativeCachedSprites.splice(0);for(const t of this.render(this.$refs.alternative.getContext("2d"),this.alternativeCanvasWidth,this.alternativeCanvasHeight,e.images))this.alternativeCachedSprites.push(t)}this.animationQueue.shift()}}}var t,s},render:function(e,t,s,i){const a=[];e.clearRect(0,0,t,s);for(const t of i)t.source in this.cachedImages&&(e.globalAlpha="opacity"in t?t.opacity:1,e.drawImage(this.cachedImages[t.source],t.x*window.devicePixelRatio,t.y*window.devicePixelRatio,t.width*window.devicePixelRatio,t.height*window.devicePixelRatio)),a.push(t);return a}},updated:function(){this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height},mounted:async function(){function e(e,t){const s=Math.random();let i=0,a=0;for(let n of e){const e=t(n);if(i<=s&&s<i+e)break;i+=e,a++}return e[a]}const t=this,s=localStorage.getItem("character"),i=localStorage.getItem("credential"),a=localStorage.getItem("stats"),n=localStorage.getItem("fragments");let o,h=null;const l=[{path:"/assets/milch.json",probability:1}],u=[{path:"/assets/merku.json",probability:1}];if(s)try{const e=JSON.parse(s);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("character")}if(i)try{h=JSON.parse(i)}catch(e){localStorage.removeItem("credential")}if(a){const e=(new Date).getTime()-6048e5;try{for(const t of JSON.parse(a)){const s=new Date(t.date);s.getTime()>e&&this.stats.push({date:s,steps:t.steps})}}catch(e){localStorage.removeItem("stats")}}if(n)try{o=JSON.parse(n)}catch(e){localStorage.removeItem("fragments"),o=[]}else o=[];this.$refs.container.after(c.domElement),this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height,this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.canvasLight}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1,supportedMapTypes:[Microsoft.Maps.MapTypeId.grayscale,Microsoft.Maps.MapTypeId.canvasLight,Microsoft.Maps.MapTypeId.canvasDark]}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==t.user&&t.update()});try{this.progress=1;const t=await fetch(e(l,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(t.statusText);{const s=await t.json(),i=this.prepare(s.sequences.filter(e=>"Start"===e.name),null,s.sequences),a=await fetch(e(u,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});let n;if(!a.ok)throw new Error(a.statusText);n=await a.json();const r=await fetch("/assets/fragments.json",{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!r.ok)throw new Error(r.statusText);{const e=Math.floor(new Date/1e3),t=(new Date).getTime()-864e5;for(const s of await r.json()){const i=[];for(const a of s){const s=o.find(e=>a.some(t=>e.set.includes(t))&&e.count>0&&1e3*e.timestamp>t&&e.checksum===[...String(e.timestamp)].reduce((e,t)=>e+t,0)+[...String(e.count)].reduce((e,t)=>e+t,0));void 0===s?i.push({set:a,index:0,count:0,timestamp:e}):i.push({set:a,index:0,count:s.count,timestamp:s.timestamp})}this.chars.push(i)}}this.progress=null,this.canvasSize.width=s.width,this.canvasSize.height=s.height,this.canvasSize.deviceWidth=s.width*window.devicePixelRatio,this.canvasSize.deviceHeight=s.height*window.devicePixelRatio,this.canvasSize.alternative.width=n.width,this.canvasSize.alternative.height=n.height,this.canvasSize.alternative.deviceWidth=n.width*window.devicePixelRatio,this.canvasSize.alternative.deviceHeight=n.height*window.devicePixelRatio;for(const e of i)if("Animation"==e.type&&"frames"in e&&e.frames.length>0){let t=null;if(Array.isArray(e.frames[0])?t=e.frames[0]:"object"==typeof e.frames[0]&&"iterations"in e.frames[0]&&("images"in e.frames[0]&&e.frames[0].images.length>0?t=e.frames[0].images:"sprites"in e.frames[0]&&e.frames[0].sprites.length>0&&(t=e.frames[0].sprites)),null!==t){for(const e of t)if(e.source in this.cachedImages==!1)try{const t=await new Promise(async(t,s)=>{const i=new Image;i.onload=()=>{t(i)},i.onerror=e=>{s(e)},i.crossOrigin="Anonymous",i.src=e.source});this.cachedImages[e.source]=t}catch(e){console.error(e)}this.cachedSprites.splice(0);for(const e of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,t))this.cachedSprites.push(e)}break}this.character=s,this.character.alternative=n,this.sequenceQueue.push(i)}}catch(e){this.progress=null,this.notify({text:e.message}),console.error(e)}this.animate(),null===h?(this.mode="sign-in",this.isRevealed=!0):h.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(h.idToken)).catch(e=>{console.error(e.code,e.message)}):h.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(h.accessToken)).catch(e=>{console.error(e.code,e.message)}):h.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(h.accessToken,h.secret)).catch(e=>{console.error(e.code,e.message)}):(this.mode="sign-in",this.isRevealed=!0),firebase.auth().onAuthStateChanged((function(e){if(e){const s=new Date;t.user=e,t.update();for(const e of t.stats)e.date.getFullYear()===s.getFullYear()&&e.date.getMonth()===s.getMonth()&&e.date.getDate()===s.getDate()&&(t.steps=e.steps);r.ref("wonderland/users/"+e.uid+"/dictionary/count").on("value",e=>{const s=e.val();t.stars=null===s?0:s}),r.ref("wonderland/tracks").orderByChild("timestamp").limitToLast(10).on("value",e=>{if(e.exists()){const s=e.val(),i=[];let a=0;for(const e in s)s[e].id=e,i.push(s[e]);for(const e of i.sort((e,t)=>t.timestamp-e.timestamp)){let s=-1;for(let i=0;i<t.recentWords.length;i++)if(t.recentWords[i].name==e.name){s=i;break}s>=0&&t.recentWords.splice(s,1),t.recentWords.splice(a,0,e),a++}for(let e=t.recentWords.length-1;e>=a;e--)t.recentWords.splice(e,1)}})}else null!==t.user&&(r.ref("wonderland/users/"+t.user.uid+"/dictionary/count").off("value"),r.ref("wonderland/tracks").off("value"),t.user=null,t.stars=0)}))},unmounted:function(){"number"==typeof this.tickIntervalID&&clearInterval(this.tickIntervalID),null!==vrmModel&&(scene.remove(vrmModel.scene),vrmModel=null)}}).mount("#app");window.addEventListener("resize",e=>{t.insetTop=t.$refs.indicator.getBoundingClientRect().height,t.insetBottom=t.$refs.blank.getBoundingClientRect().height,t.canvasSize.width=t.character.width,t.canvasSize.height=t.character.height,t.canvasSize.deviceWidth=t.character.width*window.devicePixelRatio,t.canvasSize.deviceHeight=t.character.height*window.devicePixelRatio,t.canvasSize.alternative.width=t.character.alternative.width,t.canvasSize.alternative.height=t.character.alternative.height,t.canvasSize.alternative.deviceWidth=t.character.alternative.width*window.devicePixelRatio,t.canvasSize.alternative.deviceHeight=t.character.alternative.height*window.devicePixelRatio,t.animationQueue.unshift({character:t.character,images:[].concat(t.cachedSprites)}),null!==t.alternative&&t.animationQueue.unshift({character:t.character.alternative,images:[].concat(t.alternativeCachedSprites)})}),window.addEventListener("click",e=>{}),window.addEventListener("dblclick",e=>{}),window.addEventListener("mousedown",e=>{}),window.addEventListener("mousemove",e=>{}),window.addEventListener("mouseup",e=>{}),window.addEventListener("touchstart",e=>{e.stopPropagation(),0==u?(u++,setTimeout(()=>{u=0},500)):u=0}),window.addEventListener("touchmove",e=>{e.stopPropagation()}),window.addEventListener("touchend",e=>{e.stopPropagation()}),window.addEventListener("touchcancel",e=>{e.stopPropagation()}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,