!function(e){function t(t){for(var i,r,o=t[0],c=t[1],h=t[2],u=0,d=[];u<o.length;u++)r=o[u],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&d.push(a[r][0]),a[r]=0;for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&(e[i]=c[i]);for(l&&l(t);d.length;)d.shift()();return n.push.apply(n,h||[]),s()}function s(){for(var e,t=0;t<n.length;t++){for(var s=n[t],i=!0,o=1;o<s.length;o++){var c=s[o];0!==a[c]&&(i=!1)}i&&(n.splice(t--,1),e=r(r.s=s[0]))}return e}var i={},a={0:0},n=[];function r(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=i,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(s,i,function(t){return e[t]}.bind(null,i));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/js";var o=window.webpackJsonp=window.webpackJsonp||[],c=o.push.bind(o);o.push=t,o=o.slice();for(var h=0;h<o.length;h++)t(o[h]);var l=c;n.push([2,1]),s()}({2:function(e,t,s){"use strict";s.r(t);var i=s(1),a=s(0);firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();const n="debug"===decodeURIComponent(window.location.hash.substring(1));let r=firebase.database(),o=firebase.storage();const c=new i;c.domElement.style.position="fixed",c.domElement.style.top="auto",c.domElement.style.bottom="0",c.domElement.style.left="auto",c.domElement.style.right="0",n||c.domElement.classList.add("is-hidden");let h=0;let l=0;let u=0;window.addEventListener("load",e=>{"serviceWorker"in navigator&&(navigator.serviceWorker.register("sw.js").then(e=>{e.onupdatefound=function(){e.update()}}).catch(e=>{console.error(e.code,e.message)}),navigator.serviceWorker.addEventListener("message",e=>{null!==navigator.serviceWorker.controller&&"command"in e.data&&"caches"===e.data.command&&navigator.serviceWorker.controller.postMessage({command:"clear",caches:e.data.caches})}));var t=Vue.createApp({data:()=>({isDebug:n,isDarkMode:!1,isMuted:!0,isLoading:!1,isUpdating:!1,isLocating:!1,isRevealed:!1,isOverlayed:!1,isBlinded:!1,isPopup:!1,isExpanded:!1,isLearning:!1,isAnimating:!1,isHangingOn:!1,isSubmitting:!1,isDiscovering:!1,isStared:!1,isLocked:!1,isEditing:!1,canvasSize:{width:0,height:0,deviceWidth:0,deviceHeight:0,alternative:{width:0,height:0,deviceWidth:0,deviceHeight:0}},cachedImages:{},cachedSprites:[],alternativeCachedSprites:[],animationQueue:[],elapsed:0,map:null,layer:null,mode:null,queryQueue:[],queryCache:{},cachedTracks:{},cachedDocuments:[],documentQueue:[],sequenceQueue:[],progress:null,user:null,candidates:null,input:"",animatedInputLength:0,maxInputLength:100,inputHasError:!1,messages:[],maxMessages:10,word:null,recentWords:[],tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,stars:-1,animatedStars:0,steps:0,isStepping:!1,animatedSteps:0,deviceMotion:null,stats:[],screenshot:null,notifications:[],notificationHeight:0,animatedNotificationHeight:0,inputHeight:0,animatedInputHeight:0,recentImages:[],backgroundImagesQueue:[],backgroundImages:[],preloadImages:[],isUploading:!1,animations:null,currentAnimations:[],blendShapeAnimations:[],insetTop:0,insetBottom:0,text:[],popupTextHeight:0,animatedPopupTextHeight:0,tickerWidth:0,animatedTickerWidth:0,leaderboard:[],leaderboardHeight:0,animatedLeaderboardHeight:0,message:null,states:{},character:null,alternative:null,wordDictionary:{},reverseWordDictionary:{},attributes:["名前","所属","時間","場所","する事","生き物","食べ物","飲み物","聞くもの","見るもの","読むもの","使う物","身につけるもの","乗り物","部位","病気"],chars:[]}),watch:{isMuted(e){try{localStorage.setItem("character",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("character")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let s=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))s+=t.getBoundingClientRect().width;s>0&&(t.tickerWidth=Math.min(s/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=s+"px")}})},deep:!0},tickerWidth(e){const t=this,s={width:this.animatedTickerWidth};Object(a.a)({targets:s,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=s.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll("#app>.background>div");if(e.length>1){const t=e.length-1,s=15;let i=0,a=null;for(const n of e){const r=[];for(let t=0;t<e.length;t++)t===i?r.push({visibility:"visible"}):r.push({visibility:"hidden"});const o=n.animate(r,{fill:"forwards",easing:"steps("+t+")",duration:1e3/s*e.length,iterations:1/0});null===a?a=o.startTime:o.startTime=a,i++}}})},deep:!0},text:{handler:()=>{t.$nextTick(()=>{t.isPopup&&(t.popupTextHeight=t.$refs.popupText.getBoundingClientRect().height)})},deep:!0},popupTextHeight(e){const t={height:this.animatedPopupTextHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedPopupTextHeight=t.height}})},notifications:{handler:()=>{t.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationHeight(e){const t={height:this.animatedNotificationHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationHeight=t.height}})},leaderboard:{handler:()=>{t.$nextTick(()=>{t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height})},deep:!0},leaderboardHeight(e){const t={height:this.animatedLeaderboardHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedLeaderboardHeight=t.height}})},inputHeight(e){const t={height:this.animatedInputHeight};Object(a.a)({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedInputHeight=t.height}})},stars(e){const t={count:this.animatedStars};Object(a.a)({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},steps(e){const t={count:this.animatedSteps};Object(a.a)({targets:t,count:e,round:100,duration:500,easing:"linear",update:()=>{this.animatedSteps=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};Object(a.a)({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0},chars:{handler:()=>{const e=[];for(const s of t.chars)for(const t of s)(t.count>0||!t.reserved)&&e.push({set:t.set,count:t.count,timestamp:t.timestamp,checksum:[...String(t.timestamp)].reduce((e,t)=>e+t,0)+[...String(t.count)].reduce((e,t)=>e+t,0)});try{localStorage.setItem("fragments",JSON.stringify(e))}catch(e){localStorage.removeItem("fragments")}},deep:!0}},methods:{signIn:function(e){if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}r.ref("wonderland/users/"+e.user.uid).transaction((function(e){return e?(e.name=data.displayName,e.timestamp=timestamp):e={name:data.displayName,timestamp:timestamp},e}));try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,idToken:t.idToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}r.ref("wonderland/users/"+e.user.uid).transaction((function(e){return e?(e.name=data.displayName,e.timestamp=timestamp):e={name:data.displayName,timestamp:timestamp},e}));try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;const s=Math.floor(new Date/1e3);for(const t of e.user.providerData){const i=t.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:i}).catch((function(e){console.error(e.code,e.message)})),r.ref("wonderland/users/"+e.user.uid).transaction((function(i){return i?(i.name=t.displayName,i.link="https://twitter.com/"+e.additionalUserInfo.username,i.timestamp=s):i={name:t.displayName,link:"https://twitter.com/"+e.additionalUserInfo.username,timestamp:s},i}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),"serviceWorker"in navigator&&null!==navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({command:"caches"})}).catch(e=>{console.error(e.code,e.message)})},refresh:function(e){this.update(!0)},update:async function(e=!1){this.isLoading=!0;const t=this,s=this.map.getCenter(),i=await this.fetch(e,s.latitude,s.longitude);if(e&&Object.keys(this.cachedTracks).forEach((function(e){for(const s of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(s);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e]})),null!==i){const e=Math.floor(new Date/1e3);let s=!1;for(const a in i)for(const n of i[a]){let i=null;for(const e in this.cachedTracks)if(n.id===this.cachedTracks[e].id){i=e;break}if(null===i){const i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),{title:n.name,subTitle:this.formatTime(e-n.timestamp),icon:"/images/Marker-Star.svg"});this.setImage(i,n.user),this.cachedTracks[i.id]=n,this.cachedTracks[i.id].pushpin=i,this.cachedTracks[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async e=>{t.mode=this.cachedTracks[e.target.id],t.isRevealed=!0}),Microsoft.Maps.Events.addHandler(i,"dblclick",e=>{window.location.hash=t.cachedTracks[e.target.id].id})],this.map.entities.push(i),s=!0}else if(n.timestamp>this.cachedTracks[i].timestamp){const t=this.cachedTracks[i].pushpin,a=this.cachedTracks[i].handlers;t.setLocation(new Microsoft.Maps.Location(n.location.latitude,n.location.longitude)),t.setOptions({title:n.name,subTitle:this.formatTime(e-n.timestamp)}),this.setImage(t,n.user),this.cachedTracks[i]=n,this.cachedTracks[i].pushpin=t,this.cachedTracks[i].handlers=a,s=!0}}const a=[];for(const e in i)for(const t of i[e])a.push(t.id);if(Object.keys(this.cachedTracks).forEach((function(e){if(!a.some(s=>s===t.cachedTracks[e].id)){for(const s of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(s);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e],s=!0}})),s){const e=10;this.isUpdating=!0;const t=await new Promise(e=>{const t={},s=[];for(const e in i)for(const s of i[e])if(s.user.id in t)t[s.user.id].count++;else{const e=Object.assign({},s.user);e.count=1,t[s.user.id]=e}for(const e in t)s.push(t[e]);s.sort((e,t)=>t.count-e.count),e(s)});this.leaderboard.splice(0);for(const e of t)this.leaderboard.push(e);try{const t=await new Promise(t=>{const s=Math.pow(10,-6);let a=[],n=[],r={},o={},c=[],h=s;for(const e in i){let t=[],s=[];for(const a of i[e])t.push(a.name),s.includes(a.name)||(a.name in r?r[a.name]+=1:r[a.name]=1,s.push(a.name));a.push(t)}for(const e in r)r[e]=Math.log(a.length/(r[e]+s));for(const e of a){let t={};for(const s of e)s in t?t[s]+=1:t[s]=1;for(const s in t)t[s]/=e.length,s in o||(o[s]=0);n.push(t)}for(const e in o)for(const t of n)if(e in t){const s=t[e]*r[e];s>o[e]&&(o[e]=s)}for(const e in o)e.length>1&&"..."!=e&&c.push({term:e,value:o[e]});c.sort((e,t)=>t.value-e.value),c.length>e&&c.splice(e);for(const e of c)e.value>h&&(h=e.value);for(const e of c)e.value/=h;c.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),t([a,c])});this.cachedDocuments.splice(0),this.tags.splice(0);for(const e of t[0])this.cachedDocuments.push(e);for(let e=0;e<t[1].length;e++)this.tags.push({index:e,name:t[1][e].term,score:t[1][e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isUpdating=!1}}this.isLoading=!1},fetch:async function(e,t,s){const i=this,a=this.encodeGeohash(t,s,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]);let n=[a];const o=[],c={};let h=[],l=this.decodeGeohash(a);const u=Math.floor(new Date/1e3),d={};if(h.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude),new Microsoft.Maps.Location(l.topright.latitude,l.topright.longitude),new Microsoft.Maps.Location(l.bottomright.latitude,l.bottomright.longitude),new Microsoft.Maps.Location(l.bottomleft.latitude,l.bottomleft.longitude),new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1})),a.length>2){const e=this.getNeighbors(a);for(const t in e)n.push(e[t]),l=this.decodeGeohash(e[t]),h.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude),new Microsoft.Maps.Location(l.topright.latitude,l.topright.longitude),new Microsoft.Maps.Location(l.bottomright.latitude,l.bottomright.longitude),new Microsoft.Maps.Location(l.bottomleft.latitude,l.bottomleft.longitude),new Microsoft.Maps.Location(l.topleft.latitude,l.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}))}this.layer.setPrimitives(h),this.queryQueue.push(a);for(const t of n){if(!e&&t in this.queryCache&&u-this.queryCache[t].timestamp<60){for(const e of this.queryCache[t].data)o.push(e),t in c?c[t].push(e):c[t]=[e];continue}const s=await r.ref("wonderland/tracks").orderByChild("key").limitToLast(50).startAt(t).endAt(t.padEnd(12,"z")+"").once("value");if(d[t]={timestamp:u,data:[]},s.exists()){const e=s.val();for(const s in e)e[s].id=s,o.push(e[s]),d[t].data.push(e[s]),t in c?c[t].push(e[s]):c[t]=[e[s]]}}if(this.queryQueue.shift(),this.queryQueue.length>0)return null;for(const e in d)this.queryCache[e]=d[e];Object.keys(this.queryCache).forEach((function(e){u-i.queryCache[e].timestamp>=60&&delete i.queryCache[e]}));const f=this.take(o.sort((e,t)=>t.timestamp-e.timestamp),100);return Object.keys(c).forEach((function(e){for(let t=c[e].length-1;t>0;t--)f.includes(c[e][t])||c[e].splice(t,1);0===c[e].length&&delete c[e]})),c},startPedometer:async function(){const e=this;if(DeviceMotionEvent.requestPermission){if("granted"!==await DeviceMotionEvent.requestPermission())return}this.deviceMotion=t=>{if(t.accelerationIncludingGravity){const n=t.accelerationIncludingGravity,r=Math.sqrt(n.x*n.x+n.y*n.y+n.z*n.z);if(e.isStepping){if(r<9.8){const t=new Date,n=t.getTime()-6048e5,r=[];e.steps++,e.isStepping=!1;for(let s=e.stats.length-1;s>0;s--)e.stats[s].date.getTime()<=n?e.stats.splice(s,1):e.stats[s].date.getFullYear()!==t.getFullYear()&&e.stats[s].date.getMonth()!==t.getMonth()&&e.stats[s].date.getDate()!==t.getDate()&&r.push({date:e.stats[s].date.toISOString(),steps:e.stats[s].steps});r.unshift({date:new Date(t.getFullYear(),t.getMonth(),t.getDate(),0,0,0).toISOString(),steps:e.steps});try{localStorage.setItem("stats",JSON.stringify(r))}catch(e){localStorage.removeItem("stats")}if(e.steps%10==0){const t=[];let n=0,r=Number.MAX_SAFE_INTEGER;function s(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}for(const s of e.chars){let e=0;for(const i of s)t.push({path:{row:n,column:e},data:i}),e++,i.count<r&&(r=i.count);n++}for(let e=t.length-1;e>0;e--)t[e].data.count>r&&t.splice(e,1);const o=t[(i=0,a=t.length,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i)].path,c=[];e.chars[o.row][o.column].count++,e.chars[o.row][o.column].timestamp=Math.floor(new Date/1e3);for(const t of this.prepare(this.character.sequences.filter(e=>"Capture"===e.name),e.chars[o.row][o.column].set[0],this.character.sequences))"Message"===t.type?c.push({type:t.type,speed:t.speed,duration:t.duration,character:this.character,text:s(t.text,e.chars[o.row][o.column].set[0])}):(t.character=this.character,c.push(t));c.length>0&&this.sequenceQueue.push(c)}}}else r>12&&(e.isStepping=!0)}var i,a},window.addEventListener("devicemotion",this.deviceMotion,!0)},stopPedometer:function(){window.removeEventListener("devicemotion",this.deviceMotion,!0),this.deviceMotion=null},locate:async function(e){if("permissions"in navigator){const e=await navigator.permissions.query({name:"geolocation"});if("granted"==e.state||"prompt"==e.state){const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}}else{const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}},backspace:function(e){this.isEditing||this.chars.forEach(e=>e.forEach(e=>e.count+=e.set.includes(this.input.charAt(this.input.length-1))?1:0)),this.input=this.input.slice(0,-1)},send:async function(e){if(this.isDebug)if(this.input.length>0){let e=[],t=[];for(const s of this.input.split(/\s/))this.backgroundImages.some(e=>e.id===s)?e.push(s):t.push(s);if(e.length>0&&t.length>0){for(const s of e)r.ref("wonderland/images/"+s).transaction((function(e){return e.tags=t,e}));this.isLearning=!1}else if(this.input.length<=this.maxInputLength)if(this.isEditing){const e=this.chars.find(e=>e.some(e=>!e.reserved)),t=[];t.push({set:[this.input],index:0,count:0,timestamp:Math.floor(new Date/1e3),reserved:!1}),void 0===e?this.chars.splice(0,0,t):e.push({set:[this.input],index:0,count:0,timestamp:Math.floor(new Date/1e3),reserved:!1}),this.input="",this.isEditing=!1}else{const e=this.map.getCenter();this.learn({name:this.input,location:{latitude:e.latitude,longitude:e.longitude}}),this.input="",this.isLearning=!1}}else for(const e of this.backgroundImages){this.input=e.id;break}else if(this.input.length>0&&this.input.length<=this.maxInputLength)if(this.isEditing){let e=-1;const t=[];for(let t=this.chars.length-1;t>=0;t--)if(this.chars[t].some(e=>!e.reserved)){e=t;break}t.push({set:[this.input],index:0,count:0,timestamp:Math.floor(new Date/1e3),reserved:!1}),e>=0?this.chars.splice(e+1,0,t):this.chars.splice(0,0,t),this.input="",this.isEditing=!1}else{const e=this.map.getCenter();this.learn({name:this.input,location:{latitude:e.latitude,longitude:e.longitude}}),this.input="",this.isLearning=!1}else console.log(this.input.length),console.log(this.maxInputLength),this.shake(this.$refs.input)},setImage:async function(e,t,s=!1){if("image"in t){let s;try{s=await new Promise(async(e,s)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{s(e)},t.image.startsWith("gs://")?i.src=await o.refFromURL(t.image).getDownloadURL():(i.crossOrigin="Anonymous",i.src=t.image)})}catch(t){return e.setOptions({icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                            <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                                <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                    <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                                </g>\n                                <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                    <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                    <g transform="matrix(0.410574,0,0,0.410574,34.0498,26.7694)">\n                                        <path d="M0,-7.29C-0.311,-8.247 -1.138,-8.944 -2.133,-9.089L-9.21,-10.117L-12.375,-16.529C-12.819,-17.432 -13.738,-18.003 -14.744,-18.003C-15.75,-18.003 -16.67,-17.432 -17.114,-16.53L-20.279,-10.117L-27.355,-9.089C-28.352,-8.944 -29.179,-8.247 -29.49,-7.29C-29.801,-6.333 -29.541,-5.283 -28.82,-4.581L-23.7,0.41L-24.908,7.459C-25.078,8.45 -24.672,9.452 -23.857,10.043C-23.043,10.635 -21.965,10.713 -21.074,10.244L-14.744,6.917L-8.415,10.244C-8.028,10.447 -7.606,10.548 -7.186,10.548C-6.638,10.548 -6.092,10.377 -5.632,10.043C-4.818,9.452 -4.41,8.45 -4.58,7.458L-5.789,0.41L-0.668,-4.581C0.052,-5.283 0.312,-6.333 0,-7.29" style="fill:white;fill-rule:nonzero;"/>\n                                    </g>\n                                </g>\n                            </svg>'}),void console.error(t)}const i=document.createElement("canvas"),a=i.getContext("2d");i.width=s.width,i.height=s.height,a.drawImage(s,0,0,s.width,s.height);const n='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                        <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                        <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                            <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                            </g>\n                            <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                <clipPath id="_clip1">\n                                    <circle cx="27.996" cy="25.239" r="12.214"/>\n                                </clipPath>\n                                <g clip-path="url(#_clip1)">\n                                    <g transform="matrix(0.791667,0,0,0.791667,5.83249,5.2582)">\n                                        <circle cx="27.996" cy="25.239" r="12.214" style="fill:white;"/>\n                                        <clipPath id="_clip2">\n                                            <circle cx="27.996" cy="25.239" r="12.214"/>\n                                        </clipPath>\n                                        <g clip-path="url(#_clip2)">\n                                            <g id="Background" transform="matrix(0.023856,0,0,0.023856,-2.53964,-5.29658)">\n                                                <use xlink:href="#_Image3" x="767" y="767" width="1026px" height="1026px"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <defs>\n                                <image id="_Image3" width="1026px" height="1026px" xlink:href="'+i.toDataURL()+'"/>\n                            </defs>\n                        </svg>';e.setOptions({icon:n})}},change:function(e){this.input.length<=this.maxInputLength?this.inputHasError=!1:this.inputHasError=!0},upload:async function(e){function t(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,s=e.length;t<s;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")}const s=this,i=o.ref(),a=[],n=[];for(const t of e.target.files)a.push(t);this.isUploading=!0;for(const e of a.sort((e,t)=>e.name>t.name?1:e.name<t.name?-1:0)){const r=i.child("images/"+t()).put(e);try{await new Promise((function(e,t){r.on("state_changed",(function(e){s.progress=e.bytesTransferred/e.totalBytes/a.length+n.length/a.length}),(function(e){t(e)}),(function(){e()}))}))}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}n.push(r.snapshot.ref.fullPath)}r.ref("wonderland/images").push({paths:n,timestamp:Math.floor(new Date/1e3)}),this.progress=null,this.isUploading=!1},learn:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}const s=[],i=[];if("attributes"in e)for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}));else{const t=await r.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).once("value");if(t.exists()){const e=t.val();for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}))}else for(const e of this.attributes)i.push({name:e,value:!1})}this.word={name:e.name,attributes:i},"location"in e&&(this.word.location=e.location),"user"in e&&(this.word.user=e.user);for(const i of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===i.type?s.push({type:i.type,speed:i.speed,duration:i.duration,text:t(i.text,e.name)}):s.push(i);s.length>0&&this.sequenceQueue.push(s)},check:function(e){for(const t of this.word.attributes)t===e.target.dataset.attribute&&(t.value=e.target.checked)},share:async function(e){const t=this,s="location"in e?e.location:this.map.getCenter(),i=this.encodeGeohash(s.latitude,s.longitude),a={id:this.user.uid,name:this.user.displayName,image:this.user.photoURL},n=Math.floor(new Date/1e3);if(e.name in this.wordDictionary&&delete this.wordDictionary[e.name],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.name)&&delete this.reverseWordDictionary[t]}),this.isSubmitting=!0,this.user.providerData[0].providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID){const e=await r.ref(`wonderland/users/${this.user.uid}/link`).once("value");e.exists()&&(a.link=e.val())}r.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).transaction((function(t){if(!t){t={attributes:{},timestamp:n};for(const s of e.attributes)s.value?t.attributes[s.name]=n:t.attributes[s.name]=0;return"user"in e&&(t.user={id:e.user.id,name:e.user.name,image:e.user.image}),t}{let s=!1;for(const i of e.attributes){if(!(i.name in t.attributes)){s=!0;break}if(t.attributes[i.name]>0){if(!i.value){s=!0;break}}else if(i.value){s=!0;break}}if(s){let s=!0;const i={attributes:{}};for(const a of e.attributes)a.value?(a.name in t.attributes&&t.attributes[a.name]>0?i.attributes[a.name]=t.attributes[a.name]:i.attributes[a.name]=n-1,s=!1):i.attributes[a.name]=0;return s?null:(i.timestamp=n,i)}}}),(async function(o,c,h){if(c)if(h.exists()){const o=h.val(),c=[];for(const e in o.attributes)"number"==typeof o.attributes[e]&&o.attributes[e]>0&&t.attributes.includes(e)&&c.push(o.attributes[e]);if(1===c.length&&c[0]===o.timestamp){function l(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}r.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return(e||0)+1}));for(const s of t.prepare(t.character.sequences.filter(e=>"Learned"===e.name)))"Message"===s.type&&t.notify({text:l(s.text,e.name),accent:t.character.accent,image:t.character.image});t.isStared=!0,window.setTimeout(()=>{t.isStared=!1},3e3),t.isMuted||t.$refs.twinkle.play()}"user"in e==!1||e.user.id===t.user.uid?r.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(r){const c={};r?(r.key=`${i}${n}`,r.location={latitude:s.latitude,longitude:s.longitude},r.geohash=i,r.timestamp=n):r={key:`${i}${n}`,name:e.name,location:{latitude:s.latitude,longitude:s.longitude},geohash:i,user:a,timestamp:n};for(const e in o.attributes)t.attributes.includes(e)&&(c[e]=o.attributes[e]);return r.attributes=c,r}),(function(e,s,i){s?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}else r.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return e&&e>1?e-1:null})),r.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(e){return null}),(function(e,s,i){s?i.exists()||t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1}));else o?(t.notify({text:o.message,accent:t.character.accent,image:t.character.image}),console.error(o),t.isSubmitting=!1):"user"in e==!1||e.user.id===t.user.uid?r.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(t){if(t){t.key=`${i}${n}`,t.location={latitude:s.latitude,longitude:s.longitude},t.geohash=i,t.user=a,t.timestamp=n;for(const s of e.attributes)s.value?t.attributes[s.name]=n-1:t.attributes[s.name]=0}else{t={key:`${i}${n}`,name:e.name,location:{latitude:s.latitude,longitude:s.longitude},geohash:i,attributes:{},user:a,timestamp:n};for(const s of e.attributes)s.value?t.attributes[s.name]=n:t.attributes[s.name]=0}return t}),(function(e,s,i){s?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}))},next:async function(e,t,s=50){let i;if(i=null===t?await r.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().limitToFirst(s+1).once("value"):await r.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(s+1).once("value"),"words"in this.mode){const e=[];if(i.exists()){const t=i.val();null!==this.mode.words&&this.mode.words.length>0&&this.mode.indexes.push(this.mode.words[0]);for(const s in t)e.push("user"in t[s]?{name:s,attributes:t[s].attributes,user:t[s].user}:{name:s,attributes:t[s].attributes});e.length===s+1?this.mode.next=e.pop():this.mode.next=null}this.mode.words=e}},previous:async function(e,t,s=50){let i=await r.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(s).once("value");if("words"in this.mode&&i.exists()){const e=i.val();null!==this.mode.words&&this.mode.words.length>0&&(this.mode.next=this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes})}},discover:async function(){const e=this,t=[],s={},i=[];for(const e of this.recentWords)this.user.uid!==e.user.id&&(t.push(e),s[e.name]=e);for(const e in this.cachedTracks)this.user.uid!==this.cachedTracks[e].user.id&&this.cachedTracks[e].name in s==!1&&t.push(this.cachedTracks[e]);this.isDiscovering=!0;for(const s of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(t))try{if(null!==await new Promise((t,i)=>{r.ref("wonderland/users/"+e.user.uid+"/dictionary/words/"+s.name).transaction((function(e){if(!e)return e}),(function(e,s,a){s?t(a):e?i(e):t(null)}))})){function a(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,s){return t[parseInt(s)+1]}))}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),s.name,this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:a(e.text,s.name)}):(e.character=this.character.alternative,i.push(e));return i.length>0&&this.sequenceQueue.push(i),this.learn({name:s.name,attributes:s.attributes,location:s.location,user:s.user}),void this.map.setView({center:new Microsoft.Maps.Location(s.location.latitude,s.location.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})}}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),"",this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:e.text}):(e.character=this.character.alternative,i.push(e));i.length>0&&this.sequenceQueue.push(i)},digestMessage:async function(e){const t=(new TextEncoder).encode(e),s=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(s)).map(e=>e.toString(16).padStart(2,"0")).join("")},activate:async function(){if(h=l=0,this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();await this.talk(this.user.uid,e.filter(e=>e!==this.character.name))||this.talk(this.user.uid)}else this.talk(this.user.uid)},talk:async function(e,t=[]){let s=this.character.sequences.filter(e=>"Activate"===e.name),i=[];if(this.isLoading=!0,t.length>0){const a=Math.floor(new Date/1e3),n=3600,o=Object.assign({},this.states),c=new TinySegmenter,h=[],l=[];for(const s of t){if(s in this.wordDictionary==!1||a-this.wordDictionary[s].timestamp>=n){const t=await r.ref("wonderland/users/"+e+"/dictionary/words/"+s).once("value");if(this.wordDictionary[s]={attributes:[],timestamp:a},t.exists()){const e=t.val();for(let t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[s].attributes.push(t)}}for(const e of this.wordDictionary[s].attributes)h.includes(e)||h.push(e)}for(const u of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(s)){const s=this.prepare([u]);let d=!1;for(const o of s){if("Message"==o.type)for(const u of Array.isArray(o.text)?o.text:c.segment(o.text)){if(Array.isArray(u)){for(const a of s)if("Message"==a.type){const s=await this.generate(e,a.text,t);if(null===s){d=!0;break}{let e,t;[e,t]=s,i.push({type:a.type,speed:a.speed,duration:a.duration,text:e})}}else i.push(a);if(d)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}if(u.length>1&&!l.includes(u)){if(u in this.wordDictionary==!1||a-this.wordDictionary[u].timestamp>=n){const t=await r.ref("wonderland/users/"+e+"/dictionary/words/"+u).once("value");if(this.wordDictionary[u]={attributes:[],timestamp:a},t.exists()){const e=t.val();for(const t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[u].attributes.push(t)}}for(const a of this.wordDictionary[u].attributes)if(h.includes(a)){for(const a of s)if("Message"==a.type){const s=await this.generate(e,a.text,t);if(null===s){d=!0;break}{let e,t;[e,t]=s,i.push({type:a.type,speed:a.speed,duration:a.duration,text:e})}}else i.push(a);if(d)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}l.push(u)}}if(d){i.splice(0);break}}this.states=o}return this.isLoading=!1,!1}for(const t of this.prepare(s))if("Message"===t.type){const s=await this.generate(e,t.text);if(null===s)return this.isLoading=!1,!1;{let e,a;[e,a]=s,i.push({type:t.type,speed:t.speed,duration:t.duration,text:e})}}else i.push(t);return i.length>0?(this.sequenceQueue.push(i),this.isLoading=!1,!0):(this.isLoading=!1,!1)},generate:async function(e,t,s=[]){function i(e){let t=[],s=Number.MIN_VALUE,i=0;for(let t=0;t<e.length;t++)e[t]>s&&(s=e[t]);for(let t=0;t<e.length;t++)i+=Math.exp(e[t]-s);for(let a=0;a<e.length;a++)t.push(Math.exp(e[a]-s)/i);return t}const a=Math.floor(new Date/1e3);let n=new TinySegmenter,o=Array.isArray(t)?t:n.segment(t),c={},h=[],l=new RegExp("[.#$\\[\\]]"),u={},d="",f=0;const p=Math.pow(10,-6);let m=[{sequence:[],score:1}];for(const t of s){if(t in this.wordDictionary==!1||a-this.wordDictionary[t].timestamp>=3600){const s=await r.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:a},s.exists()){const e=s.val();for(const s in e.attributes)"number"==typeof e.attributes[s]&&e.attributes[s]>0&&this.attributes.includes(s)&&this.wordDictionary[t].attributes.push(s)}}for(const e of this.wordDictionary[t].attributes)e in c?c[e].push(t):c[e]=[t]}for(const t of o){if(!h.includes(t)){if(Array.isArray(t)){let s=[],n=[];for(const i of t)if(i in c){for(const e of c[i])if(!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e===s.name){n.push(s.score),t=!1;break}t&&n.push(p)}}else{if(i in this.reverseWordDictionary==!1||a-this.reverseWordDictionary[i].timestamp>=3600){const t=await r.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:a},t.exists()){const e=t.val();for(const t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(o.includes(e)&&!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e==s.name){n.push(s.score),t=!1;break}t&&n.push(p)}}if(s.length>0&&n.length>0){const e=i(n);let t=[];for(let i=0;i<m.length;i++)for(let a=0;a<e.length;a++){let n=[].concat(m[i].sequence);n.push({index:f,term:s[a]}),t.push({sequence:n,score:m[i].score*e[a]})}m.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))m.push(e)}}else if(!l.test(t)){let s=[],n=[];if(t in this.wordDictionary==!1||a-this.wordDictionary[t].timestamp>=3600){const s=await r.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:a},s.exists()){const e=s.val();for(const s in e.attributes)"number"==typeof e.attributes[s]&&e.attributes[s]>0&&this.attributes.includes(s)&&this.wordDictionary[t].attributes.push(s)}}for(const i of this.wordDictionary[t].attributes)if(i in c){for(const e of c[i])if(!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e===s.name){n.push(s.score),t=!1;break}t&&n.push(p)}}else{if(i in this.reverseWordDictionary==!1||a-this.reverseWordDictionary[i].timestamp>=3600){const t=await r.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:a},t.exists()){const e=t.val();for(let t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(o.includes(e)&&!s.includes(e)){let t=!0;s.push(e);for(const s of this.tags)if(e==s.name){n.push(s.score),t=!1;break}t&&n.push(p)}}if(s.length>0&&n.length>0){const e=i(n);let t=[];for(let i=0;i<m.length;i++)for(let a=0;a<e.length;a++){let n=[].concat(m[i].sequence);n.push({index:f,term:s[a]}),t.push({sequence:n,score:m[i].score*e[a]})}m.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))m.push(e)}}h.push(t)}f++}const g=m[function(e){const t=Math.random();let s=0,i=0;for(let a of e){if(s<=t&&t<s+a)break;s+=a,i++}return i}(i(m.map(e=>e.score)))];for(let e=0;e<o.length;e++){const t=JSON.stringify(o[e]);if(t in u)void 0===u[t]?d+=o[e]:d+=u[t];else{let s=!0;for(let i=0;i<g.sequence.length;i++)if(g.sequence[i].index==e){t==g.sequence[i].term?u[t]=void 0:(u[t]=g.sequence[i].term,d+=g.sequence[i].term,s=!1);break}if(s){if(Array.isArray(o[e]))return null;d+=o[e]}}}return[d,u]},notify:function(e,t=3e3){const s=this;e.id=window.setTimeout(e=>{for(let t=0;t<s.notifications.length;t++)if(s.notifications[t].id===e.id){s.notifications.splice(t,1);break}},t,e),this.notifications.unshift(e)},blinded:async function(){if(0==this.backgroundImagesQueue.length){for(const e of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(this.recentImages))this.backgroundImagesQueue.push(e)}const e=this.backgroundImagesQueue.shift();this.preloadImages.splice(0),this.backgroundImages.splice(0);for(const t of e.paths)try{this.preloadImages.push({id:e.id,url:await o.ref().child(t).getDownloadURL(),timestamp:e.timestamp})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}"tags"in e&&this.talk(this.user.uid,e.tags.filter(e=>e!==this.character.name))},load:function(e){let t=!0;for(let s of this.preloadImages)s.url==e?s.isLoaded=!0:"isLoaded"in s||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},error:function(e){let t=!0;for(let s of this.preloadImages)s.url==e?s.isLoaded=!0:"isLoaded"in s||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},shake:function(e){e.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(8px, 0, 0)"},{transform:"translate3d(-8px, 0, 0)"},{transform:"translate3d(7px, 0, 0)"},{transform:"translate3d(-7px, 0, 0)"},{transform:"translate3d(6px, 0, 0)"},{transform:"translate3d(-6px, 0, 0)"},{transform:"translate3d(5px, 0, 0)"},{transform:"translate3d(-5px, 0, 0)"},{transform:"translate3d(4px, 0, 0)"},{transform:"translate3d(-4px, 0, 0)"},{transform:"translate3d(3px, 0, 0)"},{transform:"translate3d(-3px, 0, 0)"},{transform:"translate3d(2px, 0, 0)"},{transform:"translate3d(-2px, 0, 0)"},{transform:"translate3d(1px, 0, 0)"},{transform:"translate3d(-1px, 0, 0)"},{transform:"translate3d(0, 0, 0)"}],{duration:1e3,iterations:1})},scrollToTop(){this.$nextTick(()=>{window.scroll(0,0)})},scrollToEnd:function(){"number"==typeof this.scrollTimeoutID&&clearTimeout(this.scrollTimeoutID),this.scrollTimeoutID=setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),500)},formatDate:function(e){return moment.locale(window.navigator.language),moment(e).format("LT")},animationStart:function(e){this.isAnimating=!0},animationEnd:function(e){const t=this;this.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height,t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height}),this.isPopup||(this.message=null),this.isAnimating=!1},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let s=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))s+=t.getBoundingClientRect().width;s>0&&(t.tickerWidth=Math.min(s/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=s+"px")}})},range:function(e,t){const s=[];for(const i of t)s.push(new Date(new Date(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()).getTime()+24*i*60*60*1e3));return s},arrange:function(e,t){let s=[],i=[];for(const a of e)i.length<t?i.push(a):(s.push(i),i=[a]);return s.push(i),s},take:function(e,t){if(e.length>t){let s=[].concat(e);return s.splice(t),s}return e},reverse:function(e){return[].concat(e).reverse()},formatTime:function(e){const t=Math.floor(e),s=Math.floor(t/86400),i=Math.floor(t/3600),a=Math.floor(t/60);return s>0?s+"d":a>0?i>0?i+"h":a+"m":t%60+"s"},digestMessage:async function(e){const t=(new TextEncoder).encode(e),s=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(s)).map(e=>e.toString(16).padStart(2,"0")).join("")},getDistance:function(e,t,s,i){var a=this.deg2rad(s-e),n=this.deg2rad(i-t),r=Math.sin(a/2)*Math.sin(a/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(s))*Math.sin(n/2)*Math.sin(n/2);return 6371*(2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,s=12){const i=[16,8,4,2,1];var a=1,n=[],r=[],o=0,c=0;let h="";for(n[0]=-90,n[1]=90,r[0]=-180,r[1]=180;h.length<s;){if(a){const e=(r[0]+r[1])/2;t>e?(c|=i[o],r[0]=e):r[1]=e}else{const t=(n[0]+n[1])/2;e>t?(c|=i[o],n[0]=t):n[1]=t}a=!a,o<4?o++:(h+="0123456789bcdefghjkmnpqrstuvwxyz"[c],o=0,c=0)}return h},decodeGeohash:function(e){const t=[16,8,4,2,1];var s=1,i=[],a=[];i[0]=-90,i[1]=90,a[0]=-180,a[1]=180;for(var n=0;n<e.length;n++)for(var r=e[n],o="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(r),c=0;c<5;c++){const e=t[c];s?(2,o&e?a[0]=(a[0]+a[1])/2:a[1]=(a[0]+a[1])/2):(2,o&e?i[0]=(i[0]+i[1])/2:i[1]=(i[0]+i[1])/2),s=!s}return i[2]=(i[0]+i[1])/2,a[2]=(a[0]+a[1])/2,{latitude:i[2],longitude:a[2],topleft:{latitude:i[0],longitude:a[0]},topright:{latitude:i[1],longitude:a[0]},bottomright:{latitude:i[1],longitude:a[1]},bottomleft:{latitude:i[0],longitude:a[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),s=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:s,topleft:this.calculateAdjacent(s,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(s,"bottom")}},calculateAdjacent:function(e,t){const s={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},i={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};s.bottom.odd=s.left.even,s.top.odd=s.right.even,s.left.odd=s.bottom.even,s.right.odd=s.top.even,i.bottom.odd=i.left.even,i.top.odd=i.right.even,i.left.odd=i.bottom.even,i.right.odd=i.top.even;var a=(e=e.toLowerCase()).charAt(e.length-1),n=e.length%2?"odd":"even",r=e.substring(0,e.length-1);return-1!=i[t][n].indexOf(a)&&(r=this.calculateAdjacent(r,t)),r+"0123456789bcdefghjkmnpqrstuvwxyz"[s[t][n].indexOf(a)]},prepare:function(e,t=null,s=null){function i(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let a=[],n=[];for(const s of e){const e=t;if(null===t&&s.name in this.states&&(e=this.states[s.name]),null!==e&&"state"in s&&null!==s.state){new RegExp(s.state).test(e)&&a.push(s)}}if(0===a.length){for(const t of e)"state"in t!=!1&&null!==t.state||a.push(t);t=null}if(a.length>0){let e=[];for(const s of a[i(0,a.length)].sequence)null!==t&&(this.states[s.name]=t),e.push(s);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let a=[],n=[];for(const e of null===s?this.character.sequences:s){let s=this.getSequenceStack(e,t);if(s.length>0){let e=[];do{let t=s.pop();if(s.length>0){let i=[];for(const a of s[s.length-1].sequence)if("Sequence"==a.type){if("sequence"in a){let t=!0;for(const s of e)if(s===a){t=!1;break}t&&i.push(a)}if(a===t)break}for(;i.length>0;)e.push(i.pop())}if("sequence"in t){let s=!0;for(const i of e)if(i===t){s=!1;break}s&&e.push(t)}}while(s.length>0);for(;e.length>0;)a.push(e.pop())}else a.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of a)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;n.push(e)}}else for(const e of a)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}n.push(e)}if(n.length>0){let t=0;for(const s of n[i(0,n.length)].sequence)e.splice(t,0,s),t++}}}else n.push(t)}}return n},getSequenceStack:function(e,t){let s=[];if(s.push(e),s[s.length-1]!==t){if("sequence"in e)for(const i of e.sequence)if("Sequence"==i.type){let e=this.getSequenceStack(i,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{s.push(t.pop())}while(t.length>0);return s}}s.pop()}return s},animate:async function(e){if(requestAnimationFrame(this.animate),null!==this.character){const i=(e-this.elapsed)/1e3;if(this.elapsed=e,this.sequenceQueue.length>0&&Array.isArray(this.sequenceQueue[0]))h=0;else if(h+=i,this.isLoading||(l+=i),0==this.sequenceQueue.length)if(l>=10){if(this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),s=e.length;for(;s>1;){const e=(i=0,a=s,i=Math.ceil(i),a=Math.floor(a),Math.floor(Math.random()*(a-i))+i);s--;const n=t[s];t[s]=t[e],t[e]=n}var i,a;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();this.talk(this.user.uid,e.filter(e=>e!==this.character.name))}h=l=0}else h>=5&&(this.sequenceQueue.push({sequences:this.prepare(this.character.sequences.filter(e=>"Idle"===e.name))}),h=0);if(!this.isLocked&&this.sequenceQueue.length>0){const e=Array.isArray(this.sequenceQueue[0])?this.sequenceQueue[0]:this.sequenceQueue[0].sequences;if(e.length>0)if("Animation"==e[0].type){if("frames"in e[0])for(const t of e[0].frames)if(Array.isArray(t))"character"in e[0]?this.animationQueue.push({character:e[0].character,images:t}):this.animationQueue.push({character:this.character,images:t});else if("object"==typeof t&&"iterations"in t)if("images"in t){const s="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:s,images:t.images})}else if("sprites"in t){const s="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:s,images:t.sprites})}e.shift()}else"Message"==e[0].type&&null===this.message&&0===this.animationQueue.length&&("character"in e[0]?this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:e[0].character,text:e[0].text}:this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:{name:this.character.name,accent:this.character.accent,image:this.character.image},text:e[0].text},e.shift());else if(null===this.message&&0===this.animationQueue.length){const e=this;return Object.keys(this.cachedImages).forEach((function(t){e.cachedSprites.some(e=>e.source===t)||delete e.cachedImages[t]})),this.sequenceQueue.shift(),void(this.alternative=null)}}if(null!==this.message){if(this.message.type.reverse)if(this.message.type.count>0){if(this.message.type.elapsed+=2*i,this.message.type.elapsed>=1/this.message.type.speed){if(this.message.type.count-1<this.message.text.length){let e=Math.floor(this.message.text.length/2);this.message.type.buffer.length<=e&&this.message.type.count>0&&(this.message.type.count-=1),this.message.type.buffer.length>0&&(this.message.type.buffer=this.message.type.buffer.substring(0,this.message.type.buffer.length-1))}this.message.type.elapsed=0}}else this.isPopup=!1;else if(this.message.type.buffer.length<this.message.text.length){if(this.message.type.elapsed>=0?this.message.type.elapsed+=i:this.isAnimating||(this.isPopup?this.message.type.elapsed=i:this.isPopup=!0),this.message.type.elapsed>=1/this.message.type.speed){let e=this.message.type.buffer.length,t=Math.floor(this.message.text.length/2),s=this.message.text.length;this.message.type.count>=t&&(this.message.type.buffer+=this.message.text.charAt(e)),this.message.type.count<s&&(this.message.type.count+=1),this.message.type.elapsed=0}}else this.message.time+=i,this.message.time>=this.message.duration&&(this.message.type.reverse=!0);if(this.message.text.length===this.message.type.buffer.length){const e=this.message.text.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else{let e=new Array,i="";for(let t=0;t<this.message.text.length;t++)-1==e.indexOf(this.message.text.charAt(t))&&"\n"!=this.message.text.charAt(t)&&null==this.message.text.charAt(t).match(/\s/)&&e.push(this.message.text.charAt(t));if(e.length>0)for(let a=0;a<this.message.type.count;a++)"\n"==this.message.text.charAt(a)?i+="\n":i+=e[(t=0,s=e.length,t=Math.ceil(t),s=Math.floor(s),~~(Math.floor(Math.random()*(s-t))+t))];if(i.length>this.message.type.buffer.length){const e=(this.message.type.buffer+i.substring(this.message.type.buffer.length,i.length)).split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else if(this.text.length!==this.message.type.buffer.length){const e=this.message.type.buffer.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}}}if(this.animationQueue.length>0){const e=this.animationQueue[0];if(!this.isLocked){const t=[];for(const e of this.animationQueue)t.push(e);this.isLocked=!0;for(const e of t)for(const t of e.images)if(t.source in this.cachedImages==!1)try{const e=await new Promise(async(e,s)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{s(e)},i.crossOrigin="Anonymous",i.src=t.source});this.cachedImages[t.source]=e}catch(e){console.error(e)}if(this.isLocked=!1,e.character.name===this.character.name){this.cachedSprites.splice(0);for(const t of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,e.images))this.cachedSprites.push(t)}else{this.alternative=this.character.alternative,this.alternativeCachedSprites.splice(0);for(const t of this.render(this.$refs.alternative.getContext("2d"),this.alternativeCanvasWidth,this.alternativeCanvasHeight,e.images))this.alternativeCachedSprites.push(t)}this.animationQueue.shift()}}}var t,s},render:function(e,t,s,i){const a=[];e.clearRect(0,0,t,s);for(const t of i)t.source in this.cachedImages&&(e.globalAlpha="opacity"in t?t.opacity:1,e.drawImage(this.cachedImages[t.source],t.x*window.devicePixelRatio,t.y*window.devicePixelRatio,t.width*window.devicePixelRatio,t.height*window.devicePixelRatio)),a.push(t);return a}},updated:function(){this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height},mounted:async function(){function e(e,t){const s=Math.random();let i=0,a=0;for(let n of e){const e=t(n);if(i<=s&&s<i+e)break;i+=e,a++}return e[a]}const t=this,s=localStorage.getItem("character"),i=localStorage.getItem("credential"),a=localStorage.getItem("stats"),n=localStorage.getItem("fragments");let o,h=null;const l=[{path:"/assets/milch.json",probability:1}],u=[{path:"/assets/merku.json",probability:1}];if(s)try{const e=JSON.parse(s);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("character")}if(i)try{h=JSON.parse(i)}catch(e){localStorage.removeItem("credential")}if(a){const e=(new Date).getTime()-6048e5;try{for(const t of JSON.parse(a)){const s=new Date(t.date);s.getTime()>e&&this.stats.push({date:s,steps:t.steps})}}catch(e){localStorage.removeItem("stats")}}if(n)try{o=JSON.parse(n)}catch(e){localStorage.removeItem("fragments"),o=[]}else o=[];this.$refs.container.after(c.domElement),this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height,this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.canvasLight}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1,supportedMapTypes:[Microsoft.Maps.MapTypeId.grayscale,Microsoft.Maps.MapTypeId.canvasLight,Microsoft.Maps.MapTypeId.canvasDark]}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==t.user&&t.update()});try{this.progress=1;const t=await fetch(e(l,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(t.statusText);{const s=await t.json(),i=this.prepare(s.sequences.filter(e=>"Start"===e.name),null,s.sequences),a=await fetch(e(u,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});let n;if(!a.ok)throw new Error(a.statusText);n=await a.json();const r=await fetch("/assets/fragments.json",{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!r.ok)throw new Error(r.statusText);{const e=Math.floor(new Date/1e3),t=(new Date).getTime()-864e5;let s=0;for(const s of await r.json()){const i=[];for(const a of s){const s=o.find(e=>a.some(t=>e.set.includes(t))&&e.count>0&&1e3*e.timestamp>t&&e.checksum===[...String(e.timestamp)].reduce((e,t)=>e+t,0)+[...String(e.count)].reduce((e,t)=>e+t,0));void 0===s?i.push({set:a,index:0,count:0,timestamp:e,reserved:!0}):i.push({set:a,index:0,count:s.count,timestamp:s.timestamp,reserved:!0})}this.chars.push(i)}for(const e of o)if(!e.set.some(e=>this.chars.some(t=>t.some(t=>t.set.includes(e))))){const t=[];t.push({set:e.set,index:0,count:e.count,timestamp:e.timestamp,reserved:!1}),this.chars.splice(s,0,t),s++}}this.progress=null,this.canvasSize.width=s.width,this.canvasSize.height=s.height,this.canvasSize.deviceWidth=s.width*window.devicePixelRatio,this.canvasSize.deviceHeight=s.height*window.devicePixelRatio,this.canvasSize.alternative.width=n.width,this.canvasSize.alternative.height=n.height,this.canvasSize.alternative.deviceWidth=n.width*window.devicePixelRatio,this.canvasSize.alternative.deviceHeight=n.height*window.devicePixelRatio;for(const e of i)if("Animation"==e.type&&"frames"in e&&e.frames.length>0){let t=null;if(Array.isArray(e.frames[0])?t=e.frames[0]:"object"==typeof e.frames[0]&&"iterations"in e.frames[0]&&("images"in e.frames[0]&&e.frames[0].images.length>0?t=e.frames[0].images:"sprites"in e.frames[0]&&e.frames[0].sprites.length>0&&(t=e.frames[0].sprites)),null!==t){for(const e of t)if(e.source in this.cachedImages==!1)try{const t=await new Promise(async(t,s)=>{const i=new Image;i.onload=()=>{t(i)},i.onerror=e=>{s(e)},i.crossOrigin="Anonymous",i.src=e.source});this.cachedImages[e.source]=t}catch(e){console.error(e)}this.cachedSprites.splice(0);for(const e of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,t))this.cachedSprites.push(e)}break}this.character=s,this.character.alternative=n,this.sequenceQueue.push(i)}}catch(e){this.progress=null,this.notify({text:e.message}),console.error(e)}this.animate(),null===h?(this.mode="sign-in",this.isRevealed=!0):h.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(h.idToken)).catch(e=>{console.error(e.code,e.message)}):h.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(h.accessToken)).catch(e=>{console.error(e.code,e.message)}):h.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(h.accessToken,h.secret)).catch(e=>{console.error(e.code,e.message)}):(this.mode="sign-in",this.isRevealed=!0),firebase.auth().onAuthStateChanged((function(e){if(e){const s=new Date;t.user=e,t.update();for(const e of t.stats)e.date.getFullYear()===s.getFullYear()&&e.date.getMonth()===s.getMonth()&&e.date.getDate()===s.getDate()&&(t.steps=e.steps);r.ref("wonderland/users/"+e.uid+"/dictionary/count").on("value",e=>{const s=e.val();t.stars=null===s?0:s}),r.ref("wonderland/tracks").orderByChild("timestamp").limitToLast(10).on("value",e=>{if(e.exists()){const s=e.val(),i=[];let a=0;for(const e in s)s[e].id=e,i.push(s[e]);for(const e of i.sort((e,t)=>t.timestamp-e.timestamp)){let s=-1;for(let i=0;i<t.recentWords.length;i++)if(t.recentWords[i].name==e.name){s=i;break}s>=0&&t.recentWords.splice(s,1),t.recentWords.splice(a,0,e),a++}for(let e=t.recentWords.length-1;e>=a;e--)t.recentWords.splice(e,1)}})}else null!==t.user&&(r.ref("wonderland/users/"+t.user.uid+"/dictionary/count").off("value"),r.ref("wonderland/tracks").off("value"),t.user=null,t.stars=0)}))},unmounted:function(){"number"==typeof this.tickIntervalID&&clearInterval(this.tickIntervalID),null!==vrmModel&&(scene.remove(vrmModel.scene),vrmModel=null)}}).mount("#app");window.addEventListener("resize",e=>{t.insetTop=t.$refs.indicator.getBoundingClientRect().height,t.insetBottom=t.$refs.blank.getBoundingClientRect().height,t.canvasSize.width=t.character.width,t.canvasSize.height=t.character.height,t.canvasSize.deviceWidth=t.character.width*window.devicePixelRatio,t.canvasSize.deviceHeight=t.character.height*window.devicePixelRatio,t.canvasSize.alternative.width=t.character.alternative.width,t.canvasSize.alternative.height=t.character.alternative.height,t.canvasSize.alternative.deviceWidth=t.character.alternative.width*window.devicePixelRatio,t.canvasSize.alternative.deviceHeight=t.character.alternative.height*window.devicePixelRatio,t.animationQueue.unshift({character:t.character,images:[].concat(t.cachedSprites)}),null!==t.alternative&&t.animationQueue.unshift({character:t.character.alternative,images:[].concat(t.alternativeCachedSprites)})}),window.addEventListener("click",e=>{}),window.addEventListener("dblclick",e=>{}),window.addEventListener("mousedown",e=>{}),window.addEventListener("mousemove",e=>{}),window.addEventListener("mouseup",e=>{}),window.addEventListener("touchstart",e=>{e.stopPropagation(),0==u?(u++,setTimeout(()=>{u=0},500)):u=0}),window.addEventListener("touchmove",e=>{e.stopPropagation()}),window.addEventListener("touchend",e=>{e.stopPropagation()}),window.addEventListener("touchcancel",e=>{e.stopPropagation()}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJmaXJlYmFzZSIsImluaXRpYWxpemVBcHAiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJwcm9qZWN0SWQiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJhbmFseXRpY3MiLCJkZWJ1ZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsImRhdGFiYXNlIiwic3RvcmFnZSIsInN0YXRzIiwiZG9tRWxlbWVudCIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJjbGFzc0xpc3QiLCJhZGQiLCJpZGxlVGltZSIsImFjdGl2YXRlVGltZSIsInRhcENvdW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsIm9udXBkYXRlZm91bmQiLCJ1cGRhdGUiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImNvZGUiLCJtZXNzYWdlIiwiY29udHJvbGxlciIsImNvbW1hbmQiLCJwb3N0TWVzc2FnZSIsImNhY2hlcyIsImFwcCIsIlZ1ZSIsImNyZWF0ZUFwcCIsImlzRGVidWciLCJpc0RhcmtNb2RlIiwiaXNNdXRlZCIsImlzTG9hZGluZyIsImlzVXBkYXRpbmciLCJpc0xvY2F0aW5nIiwiaXNSZXZlYWxlZCIsImlzT3ZlcmxheWVkIiwiaXNCbGluZGVkIiwiaXNQb3B1cCIsImlzRXhwYW5kZWQiLCJpc0xlYXJuaW5nIiwiaXNBbmltYXRpbmciLCJpc0hhbmdpbmdPbiIsImlzU3VibWl0dGluZyIsImlzRGlzY292ZXJpbmciLCJpc1N0YXJlZCIsImlzTG9ja2VkIiwiaXNFZGl0aW5nIiwiY2FudmFzU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJkZXZpY2VIZWlnaHQiLCJhbHRlcm5hdGl2ZSIsImNhY2hlZEltYWdlcyIsImNhY2hlZFNwcml0ZXMiLCJhbHRlcm5hdGl2ZUNhY2hlZFNwcml0ZXMiLCJhbmltYXRpb25RdWV1ZSIsImVsYXBzZWQiLCJtYXAiLCJsYXllciIsInF1ZXJ5UXVldWUiLCJxdWVyeUNhY2hlIiwiY2FjaGVkVHJhY2tzIiwiY2FjaGVkRG9jdW1lbnRzIiwiZG9jdW1lbnRRdWV1ZSIsInNlcXVlbmNlUXVldWUiLCJwcm9ncmVzcyIsInVzZXIiLCJjYW5kaWRhdGVzIiwiaW5wdXQiLCJhbmltYXRlZElucHV0TGVuZ3RoIiwibWF4SW5wdXRMZW5ndGgiLCJpbnB1dEhhc0Vycm9yIiwibWVzc2FnZXMiLCJtYXhNZXNzYWdlcyIsIndvcmQiLCJyZWNlbnRXb3JkcyIsInRhZ3MiLCJtYXhUYWdzIiwic2Nyb2xsVGltZW91dElEIiwidW5kZWZpbmVkIiwidGlja0ludGVydmFsSUQiLCJzdGFycyIsImFuaW1hdGVkU3RhcnMiLCJzdGVwcyIsImlzU3RlcHBpbmciLCJhbmltYXRlZFN0ZXBzIiwiZGV2aWNlTW90aW9uIiwic2NyZWVuc2hvdCIsIm5vdGlmaWNhdGlvbnMiLCJub3RpZmljYXRpb25IZWlnaHQiLCJhbmltYXRlZE5vdGlmaWNhdGlvbkhlaWdodCIsImlucHV0SGVpZ2h0IiwiYW5pbWF0ZWRJbnB1dEhlaWdodCIsInJlY2VudEltYWdlcyIsImJhY2tncm91bmRJbWFnZXNRdWV1ZSIsImJhY2tncm91bmRJbWFnZXMiLCJwcmVsb2FkSW1hZ2VzIiwiaXNVcGxvYWRpbmciLCJhbmltYXRpb25zIiwiY3VycmVudEFuaW1hdGlvbnMiLCJibGVuZFNoYXBlQW5pbWF0aW9ucyIsImluc2V0VG9wIiwiaW5zZXRCb3R0b20iLCJ0ZXh0IiwicG9wdXBUZXh0SGVpZ2h0IiwiYW5pbWF0ZWRQb3B1cFRleHRIZWlnaHQiLCJ0aWNrZXJXaWR0aCIsImFuaW1hdGVkVGlja2VyV2lkdGgiLCJsZWFkZXJib2FyZCIsImxlYWRlcmJvYXJkSGVpZ2h0IiwiYW5pbWF0ZWRMZWFkZXJib2FyZEhlaWdodCIsInN0YXRlcyIsImNoYXJhY3RlciIsIndvcmREaWN0aW9uYXJ5IiwicmV2ZXJzZVdvcmREaWN0aW9uYXJ5IiwiYXR0cmlidXRlcyIsImNoYXJzIiwid2F0Y2giLCJuZXdWYWx1ZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwibXV0ZSIsImUiLCJyZW1vdmVJdGVtIiwid29yZHMiLCJoYW5kbGVyIiwiJG5leHRUaWNrIiwiY2xpcCIsImRvY3VtZW50IiwiYm9keSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiTWF0aCIsIm1pbiIsInF1ZXJ5U2VsZWN0b3IiLCJkZWVwIiwic2VsZiIsInRoaXMiLCJvYmoiLCJ0YXJnZXRzIiwicm91bmQiLCJkdXJhdGlvbiIsImVhc2luZyIsImVsZW1lbnRzIiwib2Zmc2V0IiwiZnJhbWVSYXRlIiwiaW5kZXgiLCJzdGFydFRpbWUiLCJrZXlmcmFtZXMiLCJ2aXNpYmlsaXR5IiwiYW5pbWF0aW9uIiwiYW5pbWF0ZSIsImZpbGwiLCJpdGVyYXRpb25zIiwiSW5maW5pdHkiLCIkcmVmcyIsInBvcHVwVGV4dCIsImNvdW50IiwiZnJhZ21lbnRzIiwicm93IiwiY29sdW1uIiwicmVzZXJ2ZWQiLCJzZXQiLCJ0aW1lc3RhbXAiLCJjaGVja3N1bSIsIlN0cmluZyIsInJlZHVjZSIsIngiLCJ5IiwibWV0aG9kcyIsInNpZ25JbiIsImF1dGgiLCJHb29nbGVBdXRoUHJvdmlkZXIiLCJQUk9WSURFUl9JRCIsInNpZ25JbldpdGhQb3B1cCIsImNyZWRlbnRpYWwiLCJwcm92aWRlckRhdGEiLCJjdXJyZW50VXNlciIsInVwZGF0ZVByb2ZpbGUiLCJkaXNwbGF5TmFtZSIsInBob3RvVVJMIiwicmVmIiwidWlkIiwidHJhbnNhY3Rpb24iLCJjdXJyZW50IiwicHJvdmlkZXJJZCIsImFjY2Vzc1Rva2VuIiwiaWRUb2tlbiIsIkZhY2Vib29rQXV0aFByb3ZpZGVyIiwicHJvdmlkZXIiLCJhZGRTY29wZSIsIlR3aXR0ZXJBdXRoUHJvdmlkZXIiLCJmbG9vciIsIkRhdGUiLCJwaG90b1VybCIsInJlcGxhY2UiLCJhZGRpdGlvbmFsVXNlckluZm8iLCJ1c2VybmFtZSIsImxpbmsiLCJzZWNyZXQiLCJzaWduT3V0IiwicmVmcmVzaCIsImFzeW5jIiwiaWdub3JlIiwiY2VudGVyTG9jYXRpb24iLCJnZXRDZW50ZXIiLCJ0cmFja3MiLCJmZXRjaCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwia2V5cyIsImZvckVhY2giLCJoYW5kbGVySWQiLCJoYW5kbGVycyIsIk1pY3Jvc29mdCIsIk1hcHMiLCJFdmVudHMiLCJyZW1vdmVIYW5kbGVyIiwiZW50aXRpZXMiLCJyZW1vdmUiLCJwdXNocGluIiwiaXNVcGRhdGVkIiwiZ2VvaGFzaCIsInRyYWNrIiwicHVzaHBpbklkIiwiaWQiLCJQdXNocGluIiwiTG9jYXRpb24iLCJ0aXRsZSIsInN1YlRpdGxlIiwiZm9ybWF0VGltZSIsImljb24iLCJzZXRJbWFnZSIsImFkZEhhbmRsZXIiLCJhcmdzIiwidGFyZ2V0Iiwic2V0TG9jYXRpb24iLCJzZXRPcHRpb25zIiwiaWRzIiwic29tZSIsIm1heCIsIlByb21pc2UiLCJyZXNvbHZlIiwidHJhY2tEaWN0aW9uYXJ5IiwidHJhY2tSYW5raW5nIiwiYXNzaWduIiwic29ydCIsInJlc3VsdHMiLCJlcHNpbG9uIiwicG93IiwiZG9jdW1lbnRzIiwidGVybUZyZXF1ZW5jaWVzIiwiaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5Iiwic2NvcmVEaWN0aW9uYXJ5Iiwic2NvcmVzIiwibWF4U2NvcmUiLCJ0b2tlbnMiLCJ0ZXJtU2V0IiwiaW5jbHVkZXMiLCJsb2ciLCJ0ZiIsInRva2VuIiwidGVybUZyZXF1ZW5jeSIsInRmaWRmIiwidGVybSIsInNjb3JlIiwibm90aWZ5IiwiYWNjZW50IiwiaW1hZ2UiLCJjZW50ZXJHZW9oYXNoIiwiZW5jb2RlR2VvaGFzaCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCJnZXRab29tIiwiZ2VvaGFzaGVzIiwidGVtcFJlY2VudCIsInByaW1pdGl2ZXMiLCJyZWN0IiwiZGVjb2RlR2VvaGFzaCIsInRlbXBDYWNoZSIsIlBvbHlnb24iLCJ0b3BsZWZ0IiwidG9wcmlnaHQiLCJib3R0b21yaWdodCIsImJvdHRvbWxlZnQiLCJmaWxsQ29sb3IiLCJzdHJva2VDb2xvciIsInN0cm9rZVRoaWNrbmVzcyIsIm5laWdoYm9ycyIsImdldE5laWdoYm9ycyIsInNldFByaW1pdGl2ZXMiLCJzbmFwc2hvdCIsImRhdGFiYXNlUm9vdCIsIm9yZGVyQnlDaGlsZCIsImxpbWl0VG9MYXN0Iiwic3RhcnRBdCIsImVuZEF0IiwicGFkRW5kIiwib25jZSIsImV4aXN0cyIsImRpY3Rpb25hcnkiLCJ2YWwiLCJyZWNlbnQiLCJ0YWtlIiwic3RhcnRQZWRvbWV0ZXIiLCJEZXZpY2VNb3Rpb25FdmVudCIsInJlcXVlc3RQZXJtaXNzaW9uIiwiYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSIsImFnIiwic3FydCIsInoiLCJub3dEYXRlIiwiYmFzZURhdGUiLCJnZXRUaW1lIiwiZGF5cyIsImRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInRvSVNPU3RyaW5nIiwidW5zaGlmdCIsIm1pbkNvdW50IiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImZvcm1hdCIsImFyZ3VtZW50cyIsInBhcnNlSW50IiwiZ3JvdXAiLCJwYXRoIiwiaW5kZXhQYXRoIiwiY2VpbCIsInJhbmRvbSIsInNlcXVlbmNlIiwicHJlcGFyZSIsInNlcXVlbmNlcyIsImZpbHRlciIsInR5cGUiLCJzcGVlZCIsInN0b3BQZWRvbWV0ZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibG9jYXRlIiwicGVybWlzc2lvblN0YXR1cyIsInBlcm1pc3Npb25zIiwicXVlcnkiLCJzdGF0ZSIsImdlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwic2V0VmlldyIsImNlbnRlciIsImNvb3JkcyIsInpvb20iLCJlbmFibGVIaWdoQWNjdXJhY3kiLCJ0aW1lb3V0IiwibWF4aW11bUFnZSIsImJhY2tzcGFjZSIsImNoYXJBdCIsInNlbmQiLCJzcGxpdCIsImZpbmQiLCJsZWFybiIsInNoYWtlIiwic2VsZWN0ZWQiLCJyZWplY3QiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzdGFydHNXaXRoIiwic3JjIiwicmVmRnJvbVVSTCIsImdldERvd25sb2FkVVJMIiwiY3Jvc3NPcmlnaW4iLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsImlubGluZVN2ZyIsInRvRGF0YVVSTCIsImNoYW5nZSIsInVwbG9hZCIsImdlbmVyYXRlVXVpZCIsImxlbiIsInRvU3RyaW5nIiwiam9pbiIsInN0b3JhZ2VSZWYiLCJmaWxlcyIsInBhdGhzIiwiZmlsZSIsInVwbG9hZFRhc2siLCJjaGlsZCIsInB1dCIsIm9uIiwiYnl0ZXNUcmFuc2ZlcnJlZCIsInRvdGFsQnl0ZXMiLCJmdWxsUGF0aCIsImF0dHJpYnV0ZSIsInciLCJjaGVjayIsImRhdGFzZXQiLCJjaGVja2VkIiwic2hhcmUiLCJ1cGRhdGVSZXF1aXJlZCIsImRlbGV0ZVJlcXVpcmVkIiwiY29tbWl0dGVkIiwidGltZXN0YW1wcyIsInNldFRpbWVvdXQiLCJ0d2lua2xlIiwicGxheSIsImRpZ2VzdE1lc3NhZ2UiLCJuZXh0IiwidXNlcklkIiwibGltaXQiLCJvcmRlckJ5S2V5IiwibGltaXRUb0ZpcnN0IiwidGVtcFdvcmRzIiwiaW5kZXhlcyIsInBvcCIsInByZXZpb3VzIiwiZGlzY292ZXIiLCJ3b3JkU2V0IiwiYXJyYXkiLCJhIiwiY29uY2F0IiwiayIsInRlbXAiLCJzaHVmZmxlIiwibXNnVWludDgiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImhhc2hCdWZmZXIiLCJjcnlwdG8iLCJzdWJ0bGUiLCJkaWdlc3QiLCJBcnJheSIsImZyb20iLCJVaW50OEFycmF5IiwiYiIsInBhZFN0YXJ0IiwiYWN0aXZhdGUiLCJ0YWxrIiwidGVtcFN0YXRlcyIsInNlZ21lbnRlciIsIlRpbnlTZWdtZW50ZXIiLCJ0b2tlblNldCIsInByZXBhcmVkU2VxdWVuY2UiLCJpc0Fib3J0ZWQiLCJpc0FycmF5Iiwic2VnbWVudCIsImdlbmVyYXRlIiwiY2FjaGUiLCJoaW50cyIsInNvZnRtYXgiLCJNSU5fVkFMVUUiLCJzdW0iLCJleHAiLCJoaW50RGljdGlvbmFyeSIsInJlZ2V4IiwiUmVnRXhwIiwiY2FjaERpY3Rpb25hcnkiLCJ0ZXJtcyIsImlzTmV3IiwidGFnIiwicHJvYmFiaWxpdGllcyIsImNhbmRpZGF0ZSIsInRlc3QiLCJwcm9iYWJpbGl0eSIsImNob2ljZSIsImJsaW5kZWQiLCJ1cmwiLCJsb2FkIiwiaXNDb21wbGV0ZWQiLCJpc0xvYWRlZCIsInRyYW5zZm9ybSIsInNjcm9sbCIsInNjcm9sbFRvRW5kIiwiY2xlYXJUaW1lb3V0Iiwic2Nyb2xsVG8iLCJzY3JvbGxIZWlnaHQiLCJmb3JtYXREYXRlIiwibW9tZW50IiwibG9jYWxlIiwibGFuZ3VhZ2UiLCJhbmltYXRpb25TdGFydCIsImVsIiwiYW5pbWF0aW9uRW5kIiwidGlja2VyVXBkYXRlZCIsInJhbmdlIiwiY29sbGVjdGlvbiIsImRheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJhcnJhbmdlIiwicm93cyIsImNvbHVtbnMiLCJpdGVtIiwicmV2ZXJzZSIsInRpbWUiLCJob3VycyIsIm1pbnV0ZXMiLCJnZXREaXN0YW5jZSIsImxhdDEiLCJsb24xIiwibGF0MiIsImxvbjIiLCJkTGF0IiwiZGVnMnJhZCIsImRMb24iLCJzaW4iLCJjb3MiLCJhdGFuMiIsImRlZyIsIlBJIiwicHJlY2lzaW9uIiwiQklUUyIsImlzX2V2ZW4iLCJsYXQiLCJsb24iLCJiaXQiLCJjaCIsIm1pZCIsImNkIiwiaW5kZXhPZiIsIm1hc2siLCJyaWdodEdlb2hhc2giLCJjYWxjdWxhdGVBZGphY2VudCIsImxlZnRHZW9oYXNoIiwic3JjSGFzaCIsImRpciIsIk5FSUdIQk9SUyIsImV2ZW4iLCJCT1JERVJTIiwib2RkIiwibGFzdENociIsInRvTG93ZXJDYXNlIiwiYmFzZSIsInNlbGVjdGVkU2VxdWVuY2VzIiwiX3JhbmRvbSIsImNob29zZWRTZXF1ZW5jZXMiLCJmbGF0dGVuZWRTZXF1ZW5jZSIsInRlbXBTdGF0ZSIsInF1ZXVlIiwidHJhY2VkU2VxdWVuY2VzIiwiY2FsbGFibGVTZXF1ZW5jZXMiLCJzZXF1ZW5jZVN0YWNrIiwiZ2V0U2VxdWVuY2VTdGFjayIsInN0YWNrIiwicG9wcGVkU2VxdWVuY2UiLCJ0ZW1wU3RhY2siLCJ0ZW1wU2VxdWVuY2UiLCJzb3VyY2VTZXF1ZW5jZSIsInRhcmdldFNlcXVlbmNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGVsdGFUaW1lIiwiZnJhbWVzIiwiaW1hZ2VzIiwic3ByaXRlcyIsImJ1ZmZlciIsInNvdXJjZSIsImNoYXJhY3RlcnMiLCJjaGFyQXJyYXkiLCJyYW5kb21CdWZmZXIiLCJtYXRjaCIsInNwcml0ZSIsInJlbmRlciIsImNhbnZhcyIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiYWx0ZXJuYXRpdmVDYW52YXNXaWR0aCIsImFsdGVybmF0aXZlQ2FudmFzSGVpZ2h0IiwiY2xlYXJSZWN0IiwiZ2xvYmFsQWxwaGEiLCJvcGFjaXR5IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInVwZGF0ZWQiLCJpbmRpY2F0b3IiLCJibGFuayIsIm1vdW50ZWQiLCJmdW5jIiwiYm90U3RvcmFnZUl0ZW0iLCJnZXRJdGVtIiwiY3JlZGVudGlhbFN0b3JhZ2VJdGVtIiwic3RhdHNTdG9yYWdlSXRlbSIsImZyYWdtZW50c1N0b3JhZ2VJdGVtIiwiYWx0ZXJuYXRpdmVzIiwiYm90IiwicGFyc2UiLCJjb250YWluZXIiLCJhZnRlciIsIk1hcCIsIm1hcFR5cGVJZCIsIk1hcFR5cGVJZCIsImNhbnZhc0xpZ2h0IiwiZW5hYmxlSGlnaERwaSIsInNob3dMb2NhdGVNZUJ1dHRvbiIsInNob3dNYXBUeXBlU2VsZWN0b3IiLCJzaG93Wm9vbUJ1dHRvbnMiLCJzaG93U2NhbGViYXIiLCJzdXBwb3J0ZWRNYXBUeXBlcyIsImdyYXlzY2FsZSIsImNhbnZhc0RhcmsiLCJMYXllciIsInNldFZpc2libGUiLCJsYXllcnMiLCJpbnNlcnQiLCJyZXNwb25zZTEiLCJtZXRob2QiLCJoZWFkZXJzIiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJqc29uIiwicmVzcG9uc2UyIiwicmVzcG9uc2UzIiwiYmFzZVRpbWUiLCJnIiwiZnJhZ21lbnQiLCJzaWduSW5XaXRoQ3JlZGVudGlhbCIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsInJlbW92ZUluZGV4Iiwib2ZmIiwidW5tb3VudGVkIiwiY2xlYXJJbnRlcnZhbCIsInZybU1vZGVsIiwic2NlbmUiLCJtb3VudCIsInN0b3BQcm9wYWdhdGlvbiIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxFQUFJLEVBQUdDLEVBQVcsR0FDcENELEVBQUlILEVBQVNLLE9BQVFGLElBQ3pCSixFQUFVQyxFQUFTRyxHQUNoQkcsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBaUJYLElBQVlXLEVBQWdCWCxJQUNwRkssRUFBU08sS0FBS0QsRUFBZ0JYLEdBQVMsSUFFeENXLEVBQWdCWCxHQUFXLEVBRTVCLElBQUlELEtBQVlHLEVBQ1pLLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtSLEVBQWFILEtBQ3BEYyxFQUFRZCxHQUFZRyxFQUFZSCxJQUtsQyxJQUZHZSxHQUFxQkEsRUFBb0JoQixHQUV0Q08sRUFBU0MsUUFDZEQsRUFBU1UsT0FBVFYsR0FPRCxPQUhBVyxFQUFnQkosS0FBS0ssTUFBTUQsRUFBaUJiLEdBQWtCLElBR3ZEZSxJQUVSLFNBQVNBLElBRVIsSUFEQSxJQUFJQyxFQUNJZixFQUFJLEVBQUdBLEVBQUlZLEVBQWdCVixPQUFRRixJQUFLLENBRy9DLElBRkEsSUFBSWdCLEVBQWlCSixFQUFnQlosR0FDakNpQixHQUFZLEVBQ1JDLEVBQUksRUFBR0EsRUFBSUYsRUFBZWQsT0FBUWdCLElBQUssQ0FDOUMsSUFBSUMs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RUFBVyxHQUNaLE1BbURIQSxFQUFXLElBR25CakMsT0FBT2tDLGlCQUFpQixZQUFhQyxJQUNqQ0EsRUFBTWdvQixvQkFJVm5xQixPQUFPa0MsaUJBQWlCLFdBQVlDLElBQ2hDQSxFQUFNZ29CLG9CQVFWbnFCLE9BQU9rQyxpQkFBaUIsY0FBZUMsSUFDbkNBLEVBQU1nb0Isb0JBRVZucUIsT0FBT29xQixXQUFXLGdDQUFnQ2xvQixpQkFBaUIsU0FBVXNILElBQ3JFQSxFQUFFNmdCLFFBQ0ZqbkIsRUFBSUksWUFBYSxFQUVqQkosRUFBSUksWUFBYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9qc1wiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMiwxXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsImltcG9ydCAqIGFzIFN0YXRzIGZyb20gJ3N0YXRzLmpzJ1xyXG5pbXBvcnQgYW5pbWUgZnJvbSAnYW5pbWVqcy9saWIvYW5pbWUuZXMuanMnO1xyXG5cclxuLy8gWW91ciB3ZWIgYXBwJ3MgRmlyZWJhc2UgY29uZmlndXJhdGlvblxyXG52YXIgZmlyZWJhc2VDb25maWcgPSB7XHJcbiAgICBhcGlLZXk6IFwiQUl6YVN5RFRWeERKajdycUc5TC1DbHZiYTJUYW85QjBoa2N4amNFXCIsXHJcbiAgICBhdXRoRG9tYWluOiBcIm1pbGNoY2hhbi5maXJlYmFzZWFwcC5jb21cIixcclxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vbWlsY2hjaGFuLmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBwcm9qZWN0SWQ6IFwibWlsY2hjaGFuXCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcIm1pbGNoY2hhbi5hcHBzcG90LmNvbVwiLFxyXG4gICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMzU1Njk4OTcxODg5XCIsXHJcbiAgICBhcHBJZDogXCIxOjM1NTY5ODk3MTg4OTp3ZWI6ZTM2NTNjNWMzMWJkNzI4OWNkNDU1MFwiLFxyXG4gICAgbWVhc3VyZW1lbnRJZDogXCJHLTM5OThGSllOV1hcIlxyXG59O1xyXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXHJcbmZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG5maXJlYmFzZS5hbmFseXRpY3MoKTtcclxuXHJcbmNvbnN0IGRlYnVnID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSkgPT09IFwiZGVidWdcIjtcclxuLy9jb25zdCBjaGFubmVsID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSk7XHJcbmNvbnN0IGRhdGFiYXNlUm9vdCA9IFwid29uZGVybGFuZFwiO1xyXG4vL2NvbnN0IGRhdGFiYXNlQ2hhbm5lbCA9IGNoYW5uZWwubGVuZ3RoID4gMCA/IGRhdGFiYXNlUm9vdCArICcvY2hhbm5lbHMvJyArIGNoYW5uZWwgOiBkYXRhYmFzZVJvb3Q7XHJcbmNvbnN0IGRhdGFiYXNlTWVzc2FnZXMgPSBkYXRhYmFzZVJvb3QgKyBcIi9mZWVkXCI7XHJcbmxldCBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCk7XHJcbmxldCBzdG9yYWdlID0gZmlyZWJhc2Uuc3RvcmFnZSgpO1xyXG5jb25zdCBtaWxjaCA9IHsgbmFtZTogXCLjg5/jg6vjg5LjgaHjgoPjgpNcIiwgYWNjZW50OiBcIiNmZmE2YmJcIiwgaW1hZ2U6IFwiL2ltYWdlcy9NaWxjaC5wbmdcIiB9O1xyXG5jb25zdCBtZXJrdSA9IHsgbmFtZTogXCLjg6Hjg6vjgq/jgaHjgoPjgpNcIiwgYWNjZW50OiBcIiM1YmNiZTFcIiwgaW1hZ2U6IFwiL2ltYWdlcy9NZXJrdS5wbmdcIiB9O1xyXG5jb25zdCBzdGF0cyA9IG5ldyBTdGF0cygpO1xyXG5cclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS50b3AgPSBcImF1dG9cIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5ib3R0b20gPSBcIjBcIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCJhdXRvXCI7XHJcbnN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucmlnaHQgPSBcIjBcIjtcclxuXHJcbmlmICghZGVidWcpIHtcclxuICAgIHN0YXRzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImlzLWhpZGRlblwiKTtcclxufVxyXG5cclxubGV0IGlkbGVUaW1lID0gMC4wO1xyXG5jb25zdCBibGlua1RocmVzaG9sZCA9IDUuMDtcclxubGV0IGFjdGl2YXRlVGltZSA9IDAuMDtcclxuY29uc3QgYWN0aXZhdGVUaHJlc2hvbGQgPSAxMC4wO1xyXG5sZXQgdGFwQ291bnQgPSAwO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChldmVudCkgPT4ge1xyXG4gICAgaWYgKFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvcikge1xyXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKFwic3cuanNcIikudGhlbihyZWdpc3RyYXRpb24gPT4ge1xyXG4gICAgICAgICAgICByZWdpc3RyYXRpb24ub251cGRhdGVmb3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyICE9PSBudWxsICYmIFwiY29tbWFuZFwiIGluIGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS5jb21tYW5kID09PSBcImNhY2hlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogXCJjbGVhclwiLCBjYWNoZXM6IGV2ZW50LmRhdGEuY2FjaGVzIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGFwcCA9IFZ1ZS5jcmVhdGVBcHAoe1xyXG4gICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpc0RlYnVnOiBkZWJ1ZyxcclxuICAgICAgICAgICAgICAgIGlzRGFya01vZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNNdXRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc1VwZGF0aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzTG9jYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNSZXZlYWxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc092ZXJsYXllZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0JsaW5kZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNQb3B1cDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzTGVhcm5pbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNBbmltYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNIYW5naW5nT246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzRGlzY292ZXJpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNTdGFyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNMb2NrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNFZGl0aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNhbnZhc1NpemU6IHsgd2lkdGg6IDAsIGhlaWdodDogMCwgZGV2aWNlV2lkdGg6IDAsIGRldmljZUhlaWdodDogMCwgYWx0ZXJuYXRpdmU6IHsgd2lkdGg6IDAsIGhlaWdodDogMCwgZGV2aWNlV2lkdGg6IDAsIGRldmljZUhlaWdodDogMCB9IH0sXHJcbiAgICAgICAgICAgICAgICBjYWNoZWRJbWFnZXM6IHt9LFxyXG4gICAgICAgICAgICAgICAgY2FjaGVkU3ByaXRlczogW10sXHJcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZUNhY2hlZFNwcml0ZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUXVldWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgZWxhcHNlZDogMCxcclxuICAgICAgICAgICAgICAgIG1hcDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGxheWVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbW9kZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHF1ZXJ5UXVldWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgcXVlcnlDYWNoZToge30sXHJcbiAgICAgICAgICAgICAgICBjYWNoZWRUcmFja3M6IHt9LFxyXG4gICAgICAgICAgICAgICAgY2FjaGVkRG9jdW1lbnRzOiBbXSxcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50UXVldWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VRdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzczogbnVsbCxcclxuICAgICAgICAgICAgICAgIHVzZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGVzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZElucHV0TGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4SW5wdXRMZW5ndGg6IDEwMCxcclxuICAgICAgICAgICAgICAgIGlucHV0SGFzRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgbWF4TWVzc2FnZXM6IDEwLFxyXG4gICAgICAgICAgICAgICAgd29yZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlY2VudFdvcmRzOiBbXSxcclxuICAgICAgICAgICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgbWF4VGFnczogMTAsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUaW1lb3V0SUQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHRpY2tJbnRlcnZhbElEOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzdGFyczogLTEsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZFN0YXJzOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RlcHM6IDAsXHJcbiAgICAgICAgICAgICAgICBpc1N0ZXBwaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVkU3RlcHM6IDAsXHJcbiAgICAgICAgICAgICAgICBkZXZpY2VNb3Rpb246IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGF0czogW10sXHJcbiAgICAgICAgICAgICAgICBzY3JlZW5zaG90OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZE5vdGlmaWNhdGlvbkhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGlucHV0SGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRJbnB1dEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIHJlY2VudEltYWdlczogW10sXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2VzUXVldWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlczogW10sXHJcbiAgICAgICAgICAgICAgICBwcmVsb2FkSW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIGlzVXBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBibGVuZFNoYXBlQW5pbWF0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBpbnNldFRvcDogMCxcclxuICAgICAgICAgICAgICAgIGluc2V0Qm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogW10sXHJcbiAgICAgICAgICAgICAgICBwb3B1cFRleHRIZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZFBvcHVwVGV4dEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIHRpY2tlcldpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRUaWNrZXJXaWR0aDogMCxcclxuICAgICAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbXSxcclxuICAgICAgICAgICAgICAgIGxlYWRlcmJvYXJkSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRMZWFkZXJib2FyZEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZXM6IHt9LFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB3b3JkRGljdGlvbmFyeToge30sXHJcbiAgICAgICAgICAgICAgICByZXZlcnNlV29yZERpY3Rpb25hcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogW1wi5ZCN5YmNXCIsIFwi5omA5bGeXCIsIFwi5pmC6ZaTXCIsIFwi5aC05omAXCIsIFwi44GZ44KL5LqLXCIsIFwi55Sf44GN54mpXCIsIFwi6aOf44G554mpXCIsIFwi6aOy44G/54mpXCIsIFwi6IGe44GP44KC44GuXCIsIFwi6KaL44KL44KC44GuXCIsIFwi6Kqt44KA44KC44GuXCIsIFwi5L2/44GG54mpXCIsIFwi6Lqr44Gr44Gk44GR44KL44KC44GuXCIsIFwi5LmX44KK54mpXCIsIFwi6YOo5L2NXCIsIFwi55eF5rCXXCJdLFxyXG4gICAgICAgICAgICAgICAgY2hhcnM6IFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhdGNoOiB7XHJcbiAgICAgICAgICAgIGlzTXV0ZWQobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjaGFyYWN0ZXJcIiwgSlNPTi5zdHJpbmdpZnkoeyBtdXRlOiBuZXdWYWx1ZSB9KSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjaGFyYWN0ZXJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdvcmRzOiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2xpcCBvZiBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjaW5wdXQ+LmNvbHVtbnM6bGFzdC1vZi10eXBlPi5jb2x1bW4+LmNvbnRyb2wgLmNsaXBcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpY2tlcldpZHRoKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHsgd2lkdGg6IHRoaXMuYW5pbWF0ZWRUaWNrZXJXaWR0aCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFuaW1hdGVkVGlja2VyV2lkdGggPSBvYmoud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZXM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjYXBwPi5iYWNrZ3JvdW5kPmRpdlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50cy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRlID0gMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ZnJhbWVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZXMucHVzaCh7IHZpc2liaWxpdHk6IFwidmlzaWJsZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWVzLnB1c2goeyB2aXNpYmlsaXR5OiBcImhpZGRlblwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb24gPSBlbGVtZW50LmFuaW1hdGUoa2V5ZnJhbWVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdmb3J3YXJkcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ3N0ZXBzKCcgKyBvZmZzZXQgKyAnKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwIC8gZnJhbWVSYXRlICogZWxlbWVudHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb25zOiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IGFuaW1hdGlvbi5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwcC5pc1BvcHVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAucG9wdXBUZXh0SGVpZ2h0ID0gYXBwLiRyZWZzLnBvcHVwVGV4dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvcHVwVGV4dEhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWRQb3B1cFRleHRIZWlnaHQgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWRQb3B1cFRleHRIZWlnaHQgPSBvYmouaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm5vdGlmaWNhdGlvbkhlaWdodCA9IGFwcC4kcmVmcy5ub3RpZmljYXRpb25zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWROb3RpZmljYXRpb25IZWlnaHQgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWROb3RpZmljYXRpb25IZWlnaHQgPSBvYmouaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sZWFkZXJib2FyZEhlaWdodCA9IGFwcC4kcmVmcy5sZWFkZXJib2FyZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFkZXJib2FyZEhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWRMZWFkZXJib2FyZEhlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZExlYWRlcmJvYXJkSGVpZ2h0ID0gb2JqLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnB1dEhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWRJbnB1dEhlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZElucHV0SGVpZ2h0ID0gb2JqLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGFycyhuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBjb3VudDogdGhpcy5hbmltYXRlZFN0YXJzIH07XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICBjb3VudDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWRTdGFycyA9IG9iai5jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGVwcyhuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBjb3VudDogdGhpcy5hbmltYXRlZFN0ZXBzIH07XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICBjb3VudDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEwMCxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZFN0ZXBzID0gb2JqLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHsgY291bnQ6IGFwcC5hbmltYXRlZElucHV0TGVuZ3RoIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogYXBwLmlucHV0Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5hbmltYXRlZElucHV0TGVuZ3RoID0gb2JqLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2hhcnM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByb3cgb2YgYXBwLmNoYXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29sdW1uIG9mIHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5jb3VudCA+IDAgfHwgIWNvbHVtbi5yZXNlcnZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKHsgc2V0OiBjb2x1bW4uc2V0LCBjb3VudDogY29sdW1uLmNvdW50LCB0aW1lc3RhbXA6IGNvbHVtbi50aW1lc3RhbXAsIGNoZWNrc3VtOiBbLi4uU3RyaW5nKGNvbHVtbi50aW1lc3RhbXApXS5yZWR1Y2UoKHgsIHkpID0+IHggKyB5LCAwKSArIFsuLi5TdHJpbmcoY29sdW1uLmNvdW50KV0ucmVkdWNlKCh4LCB5KSA9PiB4ICsgeSwgMCkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiZnJhZ21lbnRzXCIsIEpTT04uc3RyaW5naWZ5KGZyYWdtZW50cykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJmcmFnbWVudHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBzaWduSW46IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ID09PSBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUG9wdXAobmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUge2ZpcmViYXNlLmF1dGguT0F1dGhDcmVkZW50aWFsfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IHJlc3VsdC5jcmVkZW50aWFsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC51c2VyLnByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnVwZGF0ZVByb2ZpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkYXRhLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBkYXRhLnBob3RvVVJMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihgJHtkYXRhYmFzZVJvb3R9L3VzZXJzLyR7cmVzdWx0LnVzZXIudWlkfWApLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJuYW1lXCJdID0gZGF0YS5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0geyBuYW1lOiBkYXRhLmRpc3BsYXlOYW1lLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNyZWRlbnRpYWxcIiwgSlNPTi5zdHJpbmdpZnkoeyBwcm92aWRlcklkOiBjcmVkZW50aWFsLnByb3ZpZGVySWQsIGFjY2Vzc1Rva2VuOiBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuLCBpZFRva2VuOiBjcmVkZW50aWFsLmlkVG9rZW4gfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNyZWRlbnRpYWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKFwicHVibGljX3Byb2ZpbGVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUG9wdXAocHJvdmlkZXIpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUge2ZpcmViYXNlLmF1dGguT0F1dGhDcmVkZW50aWFsfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IHJlc3VsdC5jcmVkZW50aWFsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC51c2VyLnByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnVwZGF0ZVByb2ZpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkYXRhLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBkYXRhLnBob3RvVVJMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihgJHtkYXRhYmFzZVJvb3R9L3VzZXJzLyR7cmVzdWx0LnVzZXIudWlkfWApLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJuYW1lXCJdID0gZGF0YS5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0geyBuYW1lOiBkYXRhLmRpc3BsYXlOYW1lLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNyZWRlbnRpYWxcIiwgSlNPTi5zdHJpbmdpZnkoeyBwcm92aWRlcklkOiBjcmVkZW50aWFsLnByb3ZpZGVySWQsIGFjY2Vzc1Rva2VuOiBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjcmVkZW50aWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBmaXJlYmFzZS5hdXRoLlR3aXR0ZXJBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFBvcHVwKG5ldyBmaXJlYmFzZS5hdXRoLlR3aXR0ZXJBdXRoUHJvdmlkZXIoKSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7ZmlyZWJhc2UuYXV0aC5PQXV0aENyZWRlbnRpYWx9ICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVkZW50aWFsID0gcmVzdWx0LmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC51c2VyLnByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvdG9VcmwgPSBkYXRhLnBob3RvVVJMLnJlcGxhY2UoL19ub3JtYWxcXC5qcGckLywgJy5qcGcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIudXBkYXRlUHJvZmlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGRhdGEuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9VUkw6IHBob3RvVXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGAke2RhdGFiYXNlUm9vdH0vdXNlcnMvJHtyZXN1bHQudXNlci51aWR9YCkudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wibmFtZVwiXSA9IGRhdGEuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJsaW5rXCJdID0gYGh0dHBzOi8vdHdpdHRlci5jb20vJHtyZXN1bHQuYWRkaXRpb25hbFVzZXJJbmZvLnVzZXJuYW1lfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJ0aW1lc3RhbXBcIl0gPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHsgbmFtZTogZGF0YS5kaXNwbGF5TmFtZSwgbGluazogYGh0dHBzOi8vdHdpdHRlci5jb20vJHtyZXN1bHQuYWRkaXRpb25hbFVzZXJJbmZvLnVzZXJuYW1lfWAsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjcmVkZW50aWFsXCIsIEpTT04uc3RyaW5naWZ5KHsgcHJvdmlkZXJJZDogY3JlZGVudGlhbC5wcm92aWRlcklkLCBhY2Nlc3NUb2tlbjogY3JlZGVudGlhbC5hY2Nlc3NUb2tlbiwgc2VjcmV0OiBjcmVkZW50aWFsLnNlY3JldCB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaWduT3V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduT3V0KCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjcmVkZW50aWFsXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlci5wb3N0TWVzc2FnZSh7IGNvbW1hbmQ6IFwiY2FjaGVzXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKmZpcmViYXNlLmF1dGgoKS5zaWduSW5Bbm9ueW1vdXNseSgpLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pOyovXHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZnJlc2g6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVwZGF0ZTogYXN5bmMgZnVuY3Rpb24gKGlnbm9yZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJMb2NhdGlvbiA9IHRoaXMubWFwLmdldENlbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gYXdhaXQgdGhpcy5mZXRjaChpZ25vcmUsIGNlbnRlckxvY2F0aW9uLmxhdGl0dWRlLCBjZW50ZXJMb2NhdGlvbi5sb25naXR1ZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmNhY2hlZFRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlcklkIG9mIHNlbGYuY2FjaGVkVHJhY2tzW2tleV0uaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pY3Jvc29mdC5NYXBzLkV2ZW50cy5yZW1vdmVIYW5kbGVyKGhhbmRsZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmVudGl0aWVzLnJlbW92ZShzZWxmLmNhY2hlZFRyYWNrc1trZXldLnB1c2hwaW4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuY2FjaGVkVHJhY2tzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1VwZGF0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBnZW9oYXNoIGluIHRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHRyYWNrc1tnZW9oYXNoXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHB1c2hwaW5JZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IHdvcmRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLmNhY2hlZFRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjay5pZCA9PT0gdGhpcy5jYWNoZWRUcmFja3NbaWRdLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hwaW5JZCA9IGlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdXNocGluSWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwdXNocGluID0gbmV3IE1pY3Jvc29mdC5NYXBzLlB1c2hwaW4obmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHRyYWNrLmxvY2F0aW9uLmxhdGl0dWRlLCB0cmFjay5sb2NhdGlvbi5sb25naXR1ZGUpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFjay5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUaXRsZTogdGhpcy5mb3JtYXRUaW1lKHRpbWVzdGFtcCAtIHRyYWNrLnRpbWVzdGFtcCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiL2ltYWdlcy9NYXJrZXItU3Rhci5zdmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEltYWdlKHB1c2hwaW4sIHRyYWNrLnVzZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmlmIChcImRpY3Rpb25hcnlcIiBpbiB0cmFjayAmJiBcIndvcmRzXCIgaW4gdHJhY2suZGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgaW4gdHJhY2suZGljdGlvbmFyeS53b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvbmVkV29yZCA9IE9iamVjdC5hc3NpZ24oe30sIHRyYWNrLmRpY3Rpb25hcnkud29yZHNbd29yZF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZFdvcmRbXCJuYW1lXCJdID0gd29yZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goY2xvbmVkV29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnNvcnQoKHgsIHkpID0+IHkudGltZXN0YW1wIC0geC50aW1lc3RhbXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1tcIndvcmRzXCJdID0gd29yZHM7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbi5pZF0gPSB0cmFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluLmlkXVtcInB1c2hwaW5cIl0gPSBwdXNocGluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW4uaWRdW1wiaGFuZGxlcnNcIl0gPSBbTWljcm9zb2Z0Lk1hcHMuRXZlbnRzLmFkZEhhbmRsZXIocHVzaHBpbiwgJ2NsaWNrJywgYXN5bmMgKGFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2RlID0gdGhpcy5jYWNoZWRUcmFja3NbYXJncy50YXJnZXQuaWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzUmV2ZWFsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBNaWNyb3NvZnQuTWFwcy5FdmVudHMuYWRkSGFuZGxlcihwdXNocGluLCAnZGJsY2xpY2snLCAoYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHNlbGYuY2FjaGVkVHJhY2tzW2FyZ3MudGFyZ2V0LmlkXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuZW50aXRpZXMucHVzaChwdXNocGluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFjay50aW1lc3RhbXAgPiB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdLnRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB1c2hwaW4gPSB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdW1wicHVzaHBpblwiXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW5JZF1bXCJoYW5kbGVyc1wiXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaHBpbi5zZXRMb2NhdGlvbihuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24odHJhY2subG9jYXRpb24ubGF0aXR1ZGUsIHRyYWNrLmxvY2F0aW9uLmxvbmdpdHVkZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hwaW4uc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFjay5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUaXRsZTogdGhpcy5mb3JtYXRUaW1lKHRpbWVzdGFtcCAtIHRyYWNrLnRpbWVzdGFtcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEltYWdlKHB1c2hwaW4sIHRyYWNrLnVzZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmlmIChcImRpY3Rpb25hcnlcIiBpbiB0cmFjayAmJiBcIndvcmRzXCIgaW4gdHJhY2suZGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgaW4gdHJhY2suZGljdGlvbmFyeS53b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvbmVkV29yZCA9IE9iamVjdC5hc3NpZ24oe30sIHRyYWNrLmRpY3Rpb25hcnkud29yZHNbd29yZF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZFdvcmRbXCJuYW1lXCJdID0gd29yZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goY2xvbmVkV29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnNvcnQoKHgsIHkpID0+IHkudGltZXN0YW1wIC0geC50aW1lc3RhbXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1tcIndvcmRzXCJdID0gd29yZHM7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXSA9IHRyYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW5JZF1bXCJwdXNocGluXCJdID0gcHVzaHBpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdW1wiaGFuZGxlcnNcIl0gPSBoYW5kbGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBnZW9oYXNoIGluIHRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHRyYWNrc1tnZW9oYXNoXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2godHJhY2suaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmNhY2hlZFRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaWRzLnNvbWUoeCA9PiB4ID09PSBzZWxmLmNhY2hlZFRyYWNrc1trZXldLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kbGVySWQgb2Ygc2VsZi5jYWNoZWRUcmFja3Nba2V5XS5oYW5kbGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pY3Jvc29mdC5NYXBzLkV2ZW50cy5yZW1vdmVIYW5kbGVyKGhhbmRsZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuZW50aXRpZXMucmVtb3ZlKHNlbGYuY2FjaGVkVHJhY2tzW2tleV0ucHVzaHBpbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuY2FjaGVkVHJhY2tzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1VwZGF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4ID0gMTA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhZGVyYm9hcmQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrRGljdGlvbmFyeSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2tSYW5raW5nID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3Nba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sudXNlci5pZCBpbiB0cmFja0RpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrRGljdGlvbmFyeVt0cmFjay51c2VyLmlkXS5jb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IE9iamVjdC5hc3NpZ24oe30sIHRyYWNrLnVzZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbXCJjb3VudFwiXSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0RpY3Rpb25hcnlbdHJhY2sudXNlci5pZF0gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYWNrRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrUmFua2luZy5wdXNoKHRyYWNrRGljdGlvbmFyeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1Jhbmtpbmcuc29ydCgoeCwgeSkgPT4geS5jb3VudCAtIHguY291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJhY2tSYW5raW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYWRlcmJvYXJkLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiBsZWFkZXJib2FyZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFkZXJib2FyZC5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVwc2lsb24gPSBNYXRoLnBvdygxMCwgLTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkb2N1bWVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBmaWx0ZXJlZERvY3VtZW50cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXJtRnJlcXVlbmNpZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBiYXNlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gMjQgKiA2MCAqIDYwICogMTAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IGxpbWl0ID0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjb3JlRGljdGlvbmFyeSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY29yZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF4U2NvcmUgPSBlcHNpbG9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRva2VucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVybVNldCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3Nba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godHJhY2submFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtU2V0LmluY2x1ZGVzKHRyYWNrLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLm5hbWUgaW4gaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVt0cmFjay5uYW1lXSArPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5W3RyYWNrLm5hbWVdID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybVNldC5wdXNoKHRyYWNrLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudHMucHVzaCh0b2tlbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2RvY3VtZW50cy5wdXNoKHsgdG9rZW5zOiB0b2tlbnMsIHRpbWVzdGFtcDogdXNlci50aW1lc3RhbXAsIHVzZXI6IHsgaWQ6IHVzZXIuaWQsIG5hbWU6IHVzZXIubmFtZSwgaW1hZ2U6IFwiaW1hZ2VcIiBpbiB1c2VyID8gdXNlci5pbWFnZSA6IG51bGwgfSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3Nba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwid29yZHNcIiBpbiB1c2VyICYmIHVzZXIud29yZHMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5W2tleV0gPSBNYXRoLmxvZyhkb2N1bWVudHMubGVuZ3RoIC8gKGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVtrZXldICsgZXBzaWxvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypmb3IgKGNvbnN0IGRvY3VtZW50IG9mIGRvY3VtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQudGltZXN0YW1wICogMTAwMCA+IGJhc2VUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERvY3VtZW50cy5wdXNoKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkRG9jdW1lbnRzLmxlbmd0aCA8IGxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWF4KGRvY3VtZW50cy5sZW5ndGggLSBsaW1pdCwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERvY3VtZW50cy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZG9jdW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gbWluOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRG9jdW1lbnRzLnVuc2hpZnQoZG9jdW1lbnRzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRvY3VtZW50IG9mIGRvY3VtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGYgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiBpbiB0Zikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmW3Rva2VuXSArPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmW3Rva2VuXSA9IDEuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmW2tleV0gLz0gZG9jdW1lbnQubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBzY29yZURpY3Rpb25hcnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVEaWN0aW9uYXJ5W2tleV0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1GcmVxdWVuY2llcy5wdXNoKHRmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNjb3JlRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRlcm1GcmVxdWVuY3kgb2YgdGVybUZyZXF1ZW5jaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHRlcm1GcmVxdWVuY3kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZmlkZiA9IHRlcm1GcmVxdWVuY3lba2V5XSAqIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVtrZXldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGZpZGYgPiBzY29yZURpY3Rpb25hcnlba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZURpY3Rpb25hcnlba2V5XSA9IHRmaWRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2NvcmVEaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID4gMSAmJiBrZXkgIT0gXCIuLi5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goeyB0ZXJtOiBrZXksIHZhbHVlOiBzY29yZURpY3Rpb25hcnlba2V5XSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnNvcnQoKHgsIHkpID0+IHkudmFsdWUgLSB4LnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3Jlcy5sZW5ndGggPiBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnNwbGljZShtYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzY29yZSBvZiBzY29yZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlLnZhbHVlID4gbWF4U2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFNjb3JlID0gc2NvcmUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmUgb2Ygc2NvcmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlLnZhbHVlIC89IG1heFNjb3JlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnNvcnQoKHgsIHkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHgudGVybSA+IHkudGVybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeC50ZXJtIDwgeS50ZXJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtkb2N1bWVudHMsIHNjb3Jlc10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWREb2N1bWVudHMuc3BsaWNlKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZ3Muc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgcmVzdWx0c1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkRG9jdW1lbnRzLnB1c2goZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0c1sxXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFncy5wdXNoKHsgaW5kZXg6IGksIG5hbWU6IHJlc3VsdHNbMV1baV0udGVybSwgc2NvcmU6IHJlc3VsdHNbMV1baV0udmFsdWUgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy90aGlzLmlzQmxpbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvL2FjdGl2YXRlVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZldGNoOiBhc3luYyBmdW5jdGlvbiAoaWdub3JlLCBsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZWNpc2lvbnMgPSB7IDE6IDIsIDI6IDIsIDM6IDIsIDQ6IDIsIDU6IDIsIDY6IDIsIDc6IDIsIDg6IDIsIDk6IDIsIDEwOiAzLCAxMTogMywgMTI6IDQsIDEzOiA0LCAxNDogNCwgMTU6IDUsIDE2OiA1LCAxNzogNSwgMTg6IDYsIDE5OiA2LCAyMDogNiB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyR2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChsYXRpdHVkZSwgbG9uZ2l0dWRlLCBwcmVjaXNpb25zW3RoaXMubWFwLmdldFpvb20oKV0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGdlb2hhc2hlcyA9IFtjZW50ZXJHZW9oYXNoXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBSZWNlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIGxldCBwcmltaXRpdmVzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IHRoaXMuZGVjb2RlR2VvaGFzaChjZW50ZXJHZW9oYXNoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IDYwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcENhY2hlID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlcy5wdXNoKG5ldyBNaWNyb3NvZnQuTWFwcy5Qb2x5Z29uKFtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3BsZWZ0LmxhdGl0dWRlLCByZWN0LnRvcGxlZnQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3ByaWdodC5sYXRpdHVkZSwgcmVjdC50b3ByaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LmJvdHRvbXJpZ2h0LmxhdGl0dWRlLCByZWN0LmJvdHRvbXJpZ2h0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QuYm90dG9tbGVmdC5sYXRpdHVkZSwgcmVjdC5ib3R0b21sZWZ0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSldLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAncmdiYSgyNTUsIDAsIDAsIDAuNSknLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAncmVkJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VUaGlja25lc3M6IDFcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2VudGVyR2VvaGFzaC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVpZ2hib3JzID0gdGhpcy5nZXROZWlnaGJvcnMoY2VudGVyR2VvaGFzaCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5laWdoYm9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9oYXNoZXMucHVzaChuZWlnaGJvcnNba2V5XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN0ID0gdGhpcy5kZWNvZGVHZW9oYXNoKG5laWdoYm9yc1trZXldKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZXMucHVzaChuZXcgTWljcm9zb2Z0Lk1hcHMuUG9seWdvbihbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3BsZWZ0LmxhdGl0dWRlLCByZWN0LnRvcGxlZnQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LnRvcHJpZ2h0LmxhdGl0dWRlLCByZWN0LnRvcHJpZ2h0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC5ib3R0b21yaWdodC5sYXRpdHVkZSwgcmVjdC5ib3R0b21yaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QuYm90dG9tbGVmdC5sYXRpdHVkZSwgcmVjdC5ib3R0b21sZWZ0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3BsZWZ0LmxhdGl0dWRlLCByZWN0LnRvcGxlZnQubG9uZ2l0dWRlKV0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAncmVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVRoaWNrbmVzczogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIuc2V0UHJpbWl0aXZlcyhwcmltaXRpdmVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5UXVldWUucHVzaChjZW50ZXJHZW9oYXNoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGdlb2hhc2ggb2YgZ2VvaGFzaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZ25vcmUgJiYgZ2VvaGFzaCBpbiB0aGlzLnF1ZXJ5Q2FjaGUgJiYgdGltZXN0YW1wIC0gdGhpcy5xdWVyeUNhY2hlW2dlb2hhc2hdLnRpbWVzdGFtcCA8IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIHRoaXMucXVlcnlDYWNoZVtnZW9oYXNoXS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wUmVjZW50LnB1c2godXNlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlb2hhc2ggaW4gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZ2VvaGFzaF0ucHVzaCh1c2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtnZW9oYXNoXSA9IFt1c2VyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi90cmFja3NcIikub3JkZXJCeUNoaWxkKFwia2V5XCIpLmxpbWl0VG9MYXN0KDUwKS5zdGFydEF0KGdlb2hhc2gpLmVuZEF0KGdlb2hhc2gucGFkRW5kKDEyLCBcInpcIikgKyBcIlxcdWY4ZmZcIikub25jZSgndmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcENhY2hlW2dlb2hhc2hdID0geyB0aW1lc3RhbXA6IHRpbWVzdGFtcCwgZGF0YTogW10gfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpY3Rpb25hcnkgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpY3Rpb25hcnlba2V5XVtcImlkXCJdID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFJlY2VudC5wdXNoKGRpY3Rpb25hcnlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ2FjaGVbZ2VvaGFzaF0uZGF0YS5wdXNoKGRpY3Rpb25hcnlba2V5XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlb2hhc2ggaW4gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZ2VvaGFzaF0ucHVzaChkaWN0aW9uYXJ5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2dlb2hhc2hdID0gW2RpY3Rpb25hcnlba2V5XV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVF1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlRdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBnZW9oYXNoIGluIHRlbXBDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlDYWNoZVtnZW9oYXNoXSA9IHRlbXBDYWNoZVtnZW9oYXNoXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5Q2FjaGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgLSBzZWxmLnF1ZXJ5Q2FjaGVba2V5XS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZi5xdWVyeUNhY2hlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjZW50ID0gdGhpcy50YWtlKHRlbXBSZWNlbnQuc29ydCgoeCwgeSkgPT4geS50aW1lc3RhbXAgLSB4LnRpbWVzdGFtcCksIDEwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRhdGFba2V5XS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVjZW50LmluY2x1ZGVzKGRhdGFba2V5XVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFba2V5XS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2tleV0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXJ0UGVkb21ldGVyOiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKERldmljZU1vdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvblN0YXRlID0gYXdhaXQgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb25TdGF0ZSAhPT0gXCJncmFudGVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldmljZU1vdGlvbiA9IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZyA9IGV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQoYWcueCAqIGFnLnggKyBhZy55ICogYWcueSArIGFnLnogKiBhZy56KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzU3RlcHBpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIDwgOS44KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm93RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZURhdGUgPSBub3dEYXRlLmdldFRpbWUoKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RlcHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RlcHBpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZGF5cyA9IHNlbGYuc3RhdHMubGVuZ3RoIC0gMTsgZGF5cyA+IDA7IGRheXMtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5zdGF0c1tkYXlzXS5kYXRlLmdldFRpbWUoKSA8PSBiYXNlRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGF0cy5zcGxpY2UoZGF5cywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5zdGF0c1tkYXlzXS5kYXRlLmdldEZ1bGxZZWFyKCkgIT09IG5vd0RhdGUuZ2V0RnVsbFllYXIoKSAmJiBzZWxmLnN0YXRzW2RheXNdLmRhdGUuZ2V0TW9udGgoKSAhPT0gbm93RGF0ZS5nZXRNb250aCgpICYmIHNlbGYuc3RhdHNbZGF5c10uZGF0ZS5nZXREYXRlKCkgIT09IG5vd0RhdGUuZ2V0RGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5wdXNoKHsgZGF0ZTogc2VsZi5zdGF0c1tkYXlzXS5kYXRlLnRvSVNPU3RyaW5nKCksIHN0ZXBzOiBzZWxmLnN0YXRzW2RheXNdLnN0ZXBzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy51bnNoaWZ0KHsgZGF0ZTogbmV3IERhdGUobm93RGF0ZS5nZXRGdWxsWWVhcigpLCBub3dEYXRlLmdldE1vbnRoKCksIG5vd0RhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwKS50b0lTT1N0cmluZygpLCBzdGVwczogc2VsZi5zdGVwcyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzdGF0c1wiLCBKU09OLnN0cmluZ2lmeShzdGF0cykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJzdGF0c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnN0ZXBzICUgMTAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkNvdW50ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1xceyhcXGQpXFx9L2csIGZ1bmN0aW9uIChtLCBjKSB7IHJldHVybiBhcmdzW3BhcnNlSW50KGMpICsgMV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2Ygc2VsZi5jaGFycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGogPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZCBvZiBncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5wdXNoKHsgcGF0aDogeyByb3c6IGksIGNvbHVtbjogaiB9LCBkYXRhOiBkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuY291bnQgPCBtaW5Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5Db3VudCA9IGQuY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IG1hcC5sZW5ndGggLSAxOyBqID4gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwW2pdLmRhdGEuY291bnQgPiBtaW5Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5zcGxpY2UoaiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4UGF0aCA9IG1hcFtfcmFuZG9tKDAsIG1hcC5sZW5ndGgpXS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXF1ZW5jZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGFyc1tpbmRleFBhdGgucm93XVtpbmRleFBhdGguY29sdW1uXS5jb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYXJzW2luZGV4UGF0aC5yb3ddW2luZGV4UGF0aC5jb2x1bW5dLnRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkNhcHR1cmVcIiksIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdLCB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdKSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkNhcHR1cmVcIiksIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdLCB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLCB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY2hhcmFjdGVyXCJdID0gdGhpcy5jaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQgPiAxMi4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RlcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlbW90aW9uXCIsIHRoaXMuZGV2aWNlTW90aW9uLCB0cnVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RvcFBlZG9tZXRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkZXZpY2Vtb3Rpb25cIiwgdGhpcy5kZXZpY2VNb3Rpb24sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXZpY2VNb3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2NhdGU6IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFwicGVybWlzc2lvbnNcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uU3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogXCJnZW9sb2NhdGlvblwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVybWlzc2lvblN0YXR1cy5zdGF0ZSA9PSBcImdyYW50ZWRcIiB8fCBwZXJtaXNzaW9uU3RhdHVzLnN0YXRlID09IFwicHJvbXB0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9jYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNMb2NhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuc2V0Vmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzTG9jYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZXJyb3IubWVzc2FnZSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvY2F0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0xvY2F0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHNlbGYubWFwLmdldFpvb20oKSA8IDE2ID8gMTYgOiBzZWxmLm1hcC5nZXRab29tKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNMb2NhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLypjb25zdCBwZXJtaXNzaW9uU3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogXCJnZW9sb2NhdGlvblwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uU3RhdHVzLnN0YXRlID09IFwiZ3JhbnRlZFwiIHx8IHBlcm1pc3Npb25TdGF0dXMuc3RhdGUgPT0gXCJwcm9tcHRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOyovXHJcblxyXG4gICAgICAgICAgICAgICAgLyp0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogNTAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAvKmNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHRoaXMudXNlci51aWQpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBrZXk6IGdlb2hhc2ggKyB0aW1lc3RhbXAsIG5hbWU6IHNlbGYudXNlci5kaXNwbGF5TmFtZSwgaW1hZ2U6IHNlbGYudXNlci5waG90b1VSTCwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIH0sIGdlb2hhc2g6IGdlb2hhc2gsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJrZXlcIl0gPSBnZW9oYXNoICsgdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibmFtZVwiXSA9IHNlbGYudXNlci5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcltcImltYWdlXCJdID0gc2VsZi51c2VyLnBob3RvVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibG9jYXRpb25cIl0gPSB7IGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wiZ2VvaGFzaFwiXSA9IGdlb2hhc2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJ0aW1lc3RhbXBcIl0gPSB0aW1lc3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIGNvbW1pdHRlZCwgc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21taXR0ZWQgJiYgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyBzZWxmLnVzZXIudWlkKS50cmFuc2FjdGlvbihmdW5jdGlvbiAodSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21taXR0ZWQgJiYgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyovXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8qfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBiYWNrc3BhY2U6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFycy5mb3JFYWNoKHggPT4geC5mb3JFYWNoKHkgPT4geS5jb3VudCArPSB5LnNldC5pbmNsdWRlcyh0aGlzLmlucHV0LmNoYXJBdCh0aGlzLmlucHV0Lmxlbmd0aCAtIDEpKSA/IDEgOiAwICkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5pbnB1dC5zbGljZSggMCwgLTEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZW5kOiBhc3luYyBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNEZWJ1Zykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGtleXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdGhpcy5pbnB1dC5zcGxpdCgvXFxzLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRJbWFnZXMuc29tZSgoeCkgPT4geC5pZCA9PT0gdG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFncy5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMCAmJiB0YWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvaW1hZ2VzL1wiICsga2V5KS50cmFuc2FjdGlvbihmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VbXCJ0YWdzXCJdID0gdGFncztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTGVhcm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlucHV0Lmxlbmd0aCA8PSB0aGlzLm1heElucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VkaXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNoYXJzLmZpbmQoeCA9PiB4LnNvbWUoeSA9PiAheS5yZXNlcnZlZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKHsgc2V0OiBbdGhpcy5pbnB1dF0sIGluZGV4OiAwLCBjb3VudDogMCwgdGltZXN0YW1wOiBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKSwgcmVzZXJ2ZWQ6IGZhbHNlIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnMuc3BsaWNlKDAsIDAsIGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBzZXQ6IFt0aGlzLmlucHV0XSwgaW5kZXg6IDAsIGNvdW50OiAwLCB0aW1lc3RhbXA6IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApLCByZXNlcnZlZDogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFZGl0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhcm4oeyBuYW1lOiB0aGlzLmlucHV0LCBsb2NhdGlvbjogeyBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsIGxvbmdpdHVkZTogbG9jYXRpb24ubG9uZ2l0dWRlIH0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xlYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHRoaXMuYmFja2dyb3VuZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dCA9IGltYWdlLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlucHV0Lmxlbmd0aCA+IDAgJiYgdGhpcy5pbnB1dC5sZW5ndGggPD0gdGhpcy5tYXhJbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRWRpdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5jaGFycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnNbaV0uc29tZSh4ID0+ICF4LnJlc2VydmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKHsgc2V0OiBbdGhpcy5pbnB1dF0sIGluZGV4OiAwLCBjb3VudDogMCwgdGltZXN0YW1wOiBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKSwgcmVzZXJ2ZWQ6IGZhbHNlIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnMuc3BsaWNlKGluZGV4ICsgMSwgMCwgY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnMuc3BsaWNlKDAsIDAsIGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRWRpdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYXJuKHsgbmFtZTogdGhpcy5pbnB1dCwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xlYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmlucHV0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5tYXhJbnB1dExlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWtlKHRoaXMuJHJlZnMuaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRJbWFnZTogYXN5bmMgZnVuY3Rpb24gKHB1c2hwaW4sIHVzZXIsIHNlbGVjdGVkID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zdCBob3VycyA9IG5ldyBEYXRlKHRyYWNrLnBvc2l0aW9uLnRpbWVzdGFtcCAqIDEwMDApLmdldEhvdXJzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwiaW1hZ2VcIiBpbiB1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8qcHVzaHBpbi5zZXRPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cIm5vXCI/PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMThcIiB2aWV3Qm94PVwiMCAwIDE4IDE4XCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHhtbG5zOnNlcmlmPVwiaHR0cDovL3d3dy5zZXJpZi5jb20vXCIgc3R5bGU9XCJmaWxsLXJ1bGU6ZXZlbm9kZDtjbGlwLXJ1bGU6ZXZlbm9kZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cIm1hdHJpeCgxLDAsMCwxLC0xNy43MDc3LC0xOC43NTM4KVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMjYuNzA4LDE5Ljc1NEMzMS4xMjMsMTkuNzU0IDM0LjcwOCwyMy4zMzkgMzQuNzA4LDI3Ljc1NEMzNC43MDgsMzIuMTY5IDMxLjEyMywzNS43NTQgMjYuNzA4LDM1Ljc1NEMyMi4yOTIsMzUuNzU0IDE4LjcwOCwzMi4xNjkgMTguNzA4LDI3Ljc1NEMxOC43MDgsMjMuMzM5IDIyLjI5MiwxOS43NTQgMjYuNzA4LDE5Ljc1NFpNMjYuNzA4LDIzLjc1NEMyOC45MTUsMjMuNzU0IDMwLjcwOCwyNS41NDYgMzAuNzA4LDI3Ljc1NEMzMC43MDgsMjkuOTYyIDI4LjkxNSwzMS43NTQgMjYuNzA4LDMxLjc1NEMyNC41LDMxLjc1NCAyMi43MDgsMjkuOTYyIDIyLjcwOCwyNy43NTRDMjIuNzA4LDI1LjU0NiAyNC41LDIzLjc1NCAyNi43MDgsMjMuNzU0WlwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPmBcclxuICAgICAgICAgICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub25lcnJvciA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlci5pbWFnZS5zdGFydHNXaXRoKFwiZ3M6Ly9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNyYyA9IGF3YWl0IHN0b3JhZ2UucmVmRnJvbVVSTCh1c2VyLmltYWdlKS5nZXREb3dubG9hZFVSTCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmNyb3NzT3JpZ2luID0gXCJBbm9ueW1vdXNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNyYyA9IHVzZXIuaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaHBpbi5zZXRPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiIHN0YW5kYWxvbmU9XCJub1wiPz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhRE9DVFlQRSBzdmcgUFVCTElDIFwiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU5cIiBcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjUwXCIgaGVpZ2h0PVwiNTRcIiB2aWV3Qm94PVwiMCAwIDUwIDU0XCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHhtbG5zOnNlcmlmPVwiaHR0cDovL3d3dy5zZXJpZi5jb20vXCIgc3R5bGU9XCJmaWxsLXJ1bGU6ZXZlbm9kZDtjbGlwLXJ1bGU6ZXZlbm9kZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMC45OTk5OTksMCwwLDAuOTk5OTk5LDE3LjAwMTEsLTEzKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTAsNTBMMTYsNTBMOCw2NkwwLDUwWlwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cIm1hdHJpeCgxLjk2NDkxLDAsMCwxLjk2NDkxLC0zMC4wMDk5LC0yNC41OTMxKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiMjcuOTk2XCIgY3k9XCIyNS4yMzlcIiByPVwiMTIuMjE0XCIgc3R5bGU9XCJmaWxsOnJnYigyNTUsMjM4LDApO1wiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDAuNDEwNTc0LDAsMCwwLjQxMDU3NCwzNC4wNDk4LDI2Ljc2OTQpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTAsLTcuMjlDLTAuMzExLC04LjI0NyAtMS4xMzgsLTguOTQ0IC0yLjEzMywtOS4wODlMLTkuMjEsLTEwLjExN0wtMTIuMzc1LC0xNi41MjlDLTEyLjgxOSwtMTcuNDMyIC0xMy43MzgsLTE4LjAwMyAtMTQuNzQ0LC0xOC4wMDNDLTE1Ljc1LC0xOC4wMDMgLTE2LjY3LC0xNy40MzIgLTE3LjExNCwtMTYuNTNMLTIwLjI3OSwtMTAuMTE3TC0yNy4zNTUsLTkuMDg5Qy0yOC4zNTIsLTguOTQ0IC0yOS4xNzksLTguMjQ3IC0yOS40OSwtNy4yOUMtMjkuODAxLC02LjMzMyAtMjkuNTQxLC01LjI4MyAtMjguODIsLTQuNTgxTC0yMy43LDAuNDFMLTI0LjkwOCw3LjQ1OUMtMjUuMDc4LDguNDUgLTI0LjY3Miw5LjQ1MiAtMjMuODU3LDEwLjA0M0MtMjMuMDQzLDEwLjYzNSAtMjEuOTY1LDEwLjcxMyAtMjEuMDc0LDEwLjI0NEwtMTQuNzQ0LDYuOTE3TC04LjQxNSwxMC4yNDRDLTguMDI4LDEwLjQ0NyAtNy42MDYsMTAuNTQ4IC03LjE4NiwxMC41NDhDLTYuNjM4LDEwLjU0OCAtNi4wOTIsMTAuMzc3IC01LjYzMiwxMC4wNDNDLTQuODE4LDkuNDUyIC00LjQxLDguNDUgLTQuNTgsNy40NThMLTUuNzg5LDAuNDFMLTAuNjY4LC00LjU4MUMwLjA1MiwtNS4yODMgMC4zMTIsLTYuMzMzIDAsLTcuMjlcIiBzdHlsZT1cImZpbGw6d2hpdGU7ZmlsbC1ydWxlOm5vbnplcm87XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBjLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGMud2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBjLmhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc3Qgb3BhY2l0eSA9IGhvdXJzID49IDYgJiYgaG91cnMgPCAxOCA/IFwiMC4wNVwiIDogXCIxXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBhY2NlbnRDb2xvciA9IHNlbGYudXNlci51aWQgPT09IHdvcmQuaWQgPyBzZWxmLmNoYXJhY3Rlci5hY2NlbnQgOiAnI2ZmZmZmZic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBzZWxlY3RlZENvbG9yID0gc2VsZWN0ZWQgPyBzZWxmLmNoYXJhY3Rlci5hY2NlbnQgOiAncmdiKDI1NCwyMjEsODApJztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmxpbmVTdmcgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwibm9cIj8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwhRE9DVFlQRSBzdmcgUFVCTElDIFwiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU5cIiBcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCI1NFwiIHZpZXdCb3g9XCIwIDAgNTAgNTRcIiB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgeG1sbnM6c2VyaWY9XCJodHRwOi8vd3d3LnNlcmlmLmNvbS9cIiBzdHlsZT1cImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDAuOTk5OTk5LDAsMCwwLjk5OTk5OSwxNy4wMDExLC0xMylcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTAsNTBMMTYsNTBMOCw2NkwwLDUwWlwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMS45NjQ5MSwwLDAsMS45NjQ5MSwtMzAuMDA5OSwtMjQuNTkzMSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiMjcuOTk2XCIgY3k9XCIyNS4yMzlcIiByPVwiMTIuMjE0XCIgc3R5bGU9XCJmaWxsOnJnYigyNTUsMjM4LDApO1wiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJfY2xpcDFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NsaXBQYXRoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGNsaXAtcGF0aD1cInVybCgjX2NsaXAxKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMC43OTE2NjcsMCwwLDAuNzkxNjY3LDUuODMyNDksNS4yNTgyKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiIHN0eWxlPVwiZmlsbDp3aGl0ZTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJfY2xpcDJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiMjcuOTk2XCIgY3k9XCIyNS4yMzlcIiByPVwiMTIuMjE0XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jbGlwUGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGNsaXAtcGF0aD1cInVybCgjX2NsaXAyKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPVwiQmFja2dyb3VuZFwiIHRyYW5zZm9ybT1cIm1hdHJpeCgwLjAyMzg1NiwwLDAsMC4wMjM4NTYsLTIuNTM5NjQsLTUuMjk2NTgpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgeGxpbms6aHJlZj1cIiNfSW1hZ2UzXCIgeD1cIjc2N1wiIHk9XCI3NjdcIiB3aWR0aD1cIjEwMjZweFwiIGhlaWdodD1cIjEwMjZweFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVmcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1hZ2UgaWQ9XCJfSW1hZ2UzXCIgd2lkdGg9XCIxMDI2cHhcIiBoZWlnaHQ9XCIxMDI2cHhcIiB4bGluazpocmVmPVwiYCArIGMudG9EYXRhVVJMKCkgKyBgXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZWZzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5gO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwdXNocGluLnNldE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpbmxpbmVTdmdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0Lmxlbmd0aCA8PSB0aGlzLm1heElucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dEhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRIYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVwbG9hZDogYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVV1aWQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9jaHJvbWUtcGxhdGZvcm0tYW5hbHl0aWNzL2Jsb2IvbWFzdGVyL3NyYy9pbnRlcm5hbC9pZGVudGlmaWVyLmpzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgRk9STUFUOiBzdHJpbmcgPSBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIuc3BsaXQoXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGFycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwieFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnNbaV0gPSAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCkgKyA4KS50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFycy5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZVJlZiA9IHN0b3JhZ2UucmVmKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZXZlbnQudGFyZ2V0LmZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMucHVzaChmaWxlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMuc29ydCgoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4Lm5hbWUgPiB5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4Lm5hbWUgPCB5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICB9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwbG9hZFRhc2sgPSBzdG9yYWdlUmVmLmNoaWxkKGBpbWFnZXMvJHtnZW5lcmF0ZVV1aWQoKX1gKS5wdXQoZmlsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZFRhc2sub24oXCJzdGF0ZV9jaGFuZ2VkXCIsIGZ1bmN0aW9uIChzbmFwc2hvdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBzbmFwc2hvdC5ieXRlc1RyYW5zZmVycmVkIC8gc25hcHNob3QudG90YWxCeXRlcyAvIGZpbGVzLmxlbmd0aCArIHBhdGhzLmxlbmd0aCAvIGZpbGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXRocy5wdXNoKHVwbG9hZFRhc2suc25hcHNob3QucmVmLmZ1bGxQYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvaW1hZ2VzXCIpLnB1c2goeyBwYXRoczogcGF0aHMsIHRpbWVzdGFtcDogTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCkgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlYXJuOiBhc3luYyBmdW5jdGlvbiAod29yZCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1xceyhcXGQpXFx9L2csIGZ1bmN0aW9uIChtLCBjKSB7IHJldHVybiBhcmdzW3BhcnNlSW50KGMpICsgMV0gfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJhdHRyaWJ1dGVzXCIgaW4gd29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRoaXMuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7IG5hbWU6IGF0dHJpYnV0ZSwgdmFsdWU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7IG5hbWU6IGF0dHJpYnV0ZSwgdmFsdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHRoaXMudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgd29yZC5uYW1lKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3ID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgaW4gdy5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcuYXR0cmlidXRlc1thdHRyaWJ1dGVdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7IG5hbWU6IGF0dHJpYnV0ZSwgdmFsdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRoaXMuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHsgbmFtZTogYXR0cmlidXRlLCB2YWx1ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy53b3JkID0geyBuYW1lOiB3b3JkLm5hbWUsIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJsb2NhdGlvblwiIGluIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRbXCJsb2NhdGlvblwiXSA9IHdvcmQubG9jYXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwidXNlclwiIGluIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRbXCJ1c2VyXCJdID0gd29yZC51c2VyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiTGVhcm5cIikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgdHlwZTogb2JqLnR5cGUsIHNwZWVkOiBvYmouc3BlZWQsIGR1cmF0aW9uOiBvYmouZHVyYXRpb24sIHRleHQ6IGZvcm1hdChvYmoudGV4dCwgd29yZC5uYW1lKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjaGVjazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLndvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgPT09IGV2ZW50LnRhcmdldC5kYXRhc2V0LmF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUudmFsdWUgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNoYXJlOiBhc3luYyBmdW5jdGlvbiAod29yZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IFwibG9jYXRpb25cIiBpbiB3b3JkID8gd29yZC5sb2NhdGlvbiA6IHRoaXMubWFwLmdldENlbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChsb2NhdGlvbi5sYXRpdHVkZSwgbG9jYXRpb24ubG9uZ2l0dWRlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7IGlkOiB0aGlzLnVzZXIudWlkLCBuYW1lOiB0aGlzLnVzZXIuZGlzcGxheU5hbWUsIGltYWdlOiB0aGlzLnVzZXIucGhvdG9VUkwgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3b3JkLm5hbWUgaW4gdGhpcy53b3JkRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLndvcmREaWN0aW9uYXJ5W3dvcmQubmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnkpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVtrZXldLndvcmRzLnNvbWUoKHgpID0+IHggPT09IHdvcmQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXIucHJvdmlkZXJEYXRhWzBdLnByb3ZpZGVySWQgPT09IGZpcmViYXNlLmF1dGguVHdpdHRlckF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBhd2FpdCBkYXRhYmFzZS5yZWYoYCR7ZGF0YWJhc2VSb290fS91c2Vycy8ke3RoaXMudXNlci51aWR9L2xpbmtgKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rLmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJsaW5rXCJdID0gbGluay52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdGhpcy51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB3b3JkLm5hbWUpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVwZGF0ZVJlcXVpcmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSBpbiBjdXJyZW50LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVsZXRlUmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IHsgYXR0cmlidXRlczoge30gfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSBpbiBjdXJyZW50LmF0dHJpYnV0ZXMgJiYgY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IHRpbWVzdGFtcCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlcXVpcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxldGVSZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjW1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0geyBhdHRyaWJ1dGVzOiB7fSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJ1c2VyXCIgaW4gd29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInVzZXJcIl0gPSB7IGlkOiB3b3JkLnVzZXIuaWQsIG5hbWU6IHdvcmQudXNlci5uYW1lLCBpbWFnZTogd29yZC51c2VyLmltYWdlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgfSwgYXN5bmMgZnVuY3Rpb24gKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpY3Rpb25hcnkgPSBzbmFwc2hvdC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0aW9uYXJ5LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRpY3Rpb25hcnkuYXR0cmlidXRlc1trZXldID09PSBcIm51bWJlclwiICYmIGRpY3Rpb25hcnkuYXR0cmlidXRlc1trZXldID4gMCAmJiBzZWxmLmF0dHJpYnV0ZXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXBzLnB1c2goZGljdGlvbmFyeS5hdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEgJiYgdGltZXN0YW1wc1swXSA9PT0gZGljdGlvbmFyeS50aW1lc3RhbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9cXHsoXFxkKVxcfS9nLCBmdW5jdGlvbiAobSwgYykgeyByZXR1cm4gYXJnc1twYXJzZUludChjKSArIDFdIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgc2VsZi51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvY291bnRcIikudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY291bnQgfHwgMCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBzZWxmLnByZXBhcmUoc2VsZi5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkxlYXJuZWRcIikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZm9ybWF0KG9iai50ZXh0LCB3b3JkLm5hbWUpLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RhcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RhcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc011dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMudHdpbmtsZS5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInVzZXJcIiBpbiB3b3JkID09PSBmYWxzZSB8fCB3b3JkLnVzZXIuaWQgPT09IHNlbGYudXNlci51aWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzL1wiICsgYXdhaXQgc2VsZi5kaWdlc3RNZXNzYWdlKGAke3NlbGYudXNlci51aWR9JiR7d29yZC5uYW1lfWApKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImtleVwiXSA9IGAke2dlb2hhc2h9JHt0aW1lc3RhbXB9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJsb2NhdGlvblwiXSA9IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImdlb2hhc2hcIl0gPSBnZW9oYXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInRpbWVzdGFtcFwiXSA9IHRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7IGtleTogYCR7Z2VvaGFzaH0ke3RpbWVzdGFtcH1gLCBuYW1lOiB3b3JkLm5hbWUsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBsb2NhdGlvbi5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGUgfSwgZ2VvaGFzaDogZ2VvaGFzaCwgdXNlcjogdXNlciwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGljdGlvbmFyeS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hdHRyaWJ1dGVzLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBkaWN0aW9uYXJ5LmF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImF0dHJpYnV0ZXNcIl0gPSBhdHRyaWJ1dGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUsIGMsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IGRhdGFiYXNlLnJlZihgJHtkYXRhYmFzZVJvb3R9L3RyYWNrc2ApLnB1c2goKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmLnNldCh7IGtleTogZ2VvaGFzaCArIHRpbWVzdGFtcCwgbmFtZTogd29yZC5uYW1lLCBhdHRyaWJ1dGVzOiB3b3JkLmF0dHJpYnV0ZXMsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9LCBnZW9oYXNoOiBnZW9oYXNoLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCwgdXNlcjogeyBpZDogc2VsZi51c2VyLnVpZCwgbmFtZTogc2VsZi51c2VyLmRpc3BsYXlOYW1lLCBpbWFnZTogc2VsZi51c2VyLnBob3RvVVJMIH0gfSwgYXN5bmMgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHNlbGYudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L2NvdW50XCIpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCAmJiBjb3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzL1wiICsgYXdhaXQgc2VsZi5kaWdlc3RNZXNzYWdlKGAke3NlbGYudXNlci51aWR9JiR7d29yZC5uYW1lfWApKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUsIGMsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJ1c2VyXCIgaW4gd29yZCA9PT0gZmFsc2UgfHwgd29yZC51c2VyLmlkID09PSBzZWxmLnVzZXIudWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi90cmFja3MvXCIgKyBhd2FpdCBzZWxmLmRpZ2VzdE1lc3NhZ2UoYCR7c2VsZi51c2VyLnVpZH0mJHt3b3JkLm5hbWV9YCkpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJrZXlcIl0gPSBgJHtnZW9oYXNofSR7dGltZXN0YW1wfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImxvY2F0aW9uXCJdID0geyBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsIGxvbmdpdHVkZTogbG9jYXRpb24ubG9uZ2l0dWRlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImdlb2hhc2hcIl0gPSBnZW9oYXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJ1c2VyXCJdID0gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IHRpbWVzdGFtcCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHsga2V5OiBgJHtnZW9oYXNofSR7dGltZXN0YW1wfWAsIG5hbWU6IHdvcmQubmFtZSwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9LCBnZW9oYXNoOiBnZW9oYXNoLCBhdHRyaWJ1dGVzOiB7fSwgdXNlcjogdXNlciwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2Ygd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUsIGMsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBuZXh0OiBhc3luYyBmdW5jdGlvbiAodXNlcklkLCBzdGFydEF0LCBsaW1pdCA9IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc25hcHNob3Q7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0QXQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHNcIikub3JkZXJCeUtleSgpLmxpbWl0VG9GaXJzdChsaW1pdCArIDEpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzXCIpLm9yZGVyQnlLZXkoKS5zdGFydEF0KHN0YXJ0QXQpLmxpbWl0VG9GaXJzdChsaW1pdCArIDEpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJ3b3Jkc1wiIGluIHRoaXMubW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBXb3JkcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUud29yZHMgIT09IG51bGwgJiYgdGhpcy5tb2RlLndvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS5pbmRleGVzLnB1c2godGhpcy5tb2RlLndvcmRzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHdvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV29yZHMucHVzaChcInVzZXJcIiBpbiB3b3Jkc1tuYW1lXSA/IHsgbmFtZTogbmFtZSwgYXR0cmlidXRlczogd29yZHNbbmFtZV0uYXR0cmlidXRlcywgdXNlcjogd29yZHNbbmFtZV0udXNlciB9IDogeyBuYW1lOiBuYW1lLCBhdHRyaWJ1dGVzOiB3b3Jkc1tuYW1lXS5hdHRyaWJ1dGVzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFdvcmRzLmxlbmd0aCA9PT0gbGltaXQgKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUubmV4dCA9IHRlbXBXb3Jkcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS5uZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLndvcmRzID0gdGVtcFdvcmRzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcmV2aW91czogYXN5bmMgZnVuY3Rpb24gKHVzZXJJZCwgc3RhcnRBdCwgbGltaXQgPSA1MCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkc1wiKS5vcmRlckJ5S2V5KCkuc3RhcnRBdChzdGFydEF0KS5saW1pdFRvRmlyc3QobGltaXQpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJ3b3Jkc1wiIGluIHRoaXMubW9kZSAmJiBzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUud29yZHMgIT09IG51bGwgJiYgdGhpcy5tb2RlLndvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLm5leHQgPSB0aGlzLm1vZGUud29yZHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUud29yZHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHdvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS53b3Jkcy5wdXNoKFwidXNlclwiIGluIHdvcmRzW25hbWVdID8geyBuYW1lOiBuYW1lLCBhdHRyaWJ1dGVzOiB3b3Jkc1tuYW1lXS5hdHRyaWJ1dGVzLCB1c2VyOiB3b3Jkc1tuYW1lXS51c2VyIH0gOiB7IG5hbWU6IG5hbWUsIGF0dHJpYnV0ZXM6IHdvcmRzW25hbWVdLmF0dHJpYnV0ZXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNjb3ZlcjogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd29yZFNldCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYVtrXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGhpcy5yZWNlbnRXb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXIudWlkICE9PSB3b3JkLnVzZXIuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMucHVzaCh3b3JkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZFNldFt3b3JkLm5hbWVdID0gd29yZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5jYWNoZWRUcmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51c2VyLnVpZCAhPT0gdGhpcy5jYWNoZWRUcmFja3Nba2V5XS51c2VyLmlkICYmIHRoaXMuY2FjaGVkVHJhY2tzW2tleV0ubmFtZSBpbiB3b3JkU2V0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKHRoaXMuY2FjaGVkVHJhY2tzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRGlzY292ZXJpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd29yZCBvZiBzaHVmZmxlKHdvcmRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB0aGlzLnVzZXIudWlkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHdvcmQubmFtZSkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgc2VsZi51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB3b3JkLm5hbWUpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHsga2V5OiB3b3JkLmtleSwgbmFtZTogd29yZC5uYW1lLCBhdHRyaWJ1dGVzOiB3b3JkLmF0dHJpYnV0ZXMsIGxvY2F0aW9uOiB3b3JkLmxvY2F0aW9uLCBnZW9oYXNoOiB3b3JkLmdlb2hhc2gsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIGNvbW1pdHRlZCwgc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFx7KFxcZClcXH0vZywgZnVuY3Rpb24gKG0sIGMpIHsgcmV0dXJuIGFyZ3NbcGFyc2VJbnQoYykgKyAxXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGlzY292ZXJpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiRGlzY292ZXJcIiksIHdvcmQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZm9ybWF0KG9iai50ZXh0LCB3b3JkLm5hbWUpLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiRGlzY292ZXJcIiksIHdvcmQubmFtZSwgdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUuc2VxdWVuY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLCB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHdvcmQubmFtZSkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY2hhcmFjdGVyXCJdID0gdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaChzZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFybih7IG5hbWU6IHdvcmQubmFtZSwgYXR0cmlidXRlczogd29yZC5hdHRyaWJ1dGVzLCBsb2NhdGlvbjogd29yZC5sb2NhdGlvbiwgdXNlcjogd29yZC51c2VyIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0Vmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24od29yZC5sb2NhdGlvbi5sYXRpdHVkZSwgd29yZC5sb2NhdGlvbi5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHNlbGYubWFwLmdldFpvb20oKSA8IDE2ID8gMTYgOiBzZWxmLm1hcC5nZXRab29tKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNEaXNjb3ZlcmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8qZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHRoaXMuY2hhcmFjdGVyLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJEaXNjb3ZlclwiKSwgXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogb2JqLnRleHQsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJEaXNjb3ZlclwiKSwgXCJcIiwgdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUuc2VxdWVuY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLCB0ZXh0OiBvYmoudGV4dCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbXCJjaGFyYWN0ZXJcIl0gPSB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlnZXN0TWVzc2FnZTogYXN5bmMgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZ1VpbnQ4ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKG1lc3NhZ2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuY29kZSBhcyAodXRmLTgpIFVpbnQ4QXJyYXlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIG1zZ1VpbnQ4KTsgICAgICAgICAgIC8vIGhhc2ggdGhlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpOyAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hIZXggPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7IC8vIGNvbnZlcnQgYnl0ZXMgdG8gaGV4IHN0cmluZ1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNoSGV4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhY3RpdmF0ZTogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWRsZVRpbWUgPSBhY3RpdmF0ZVRpbWUgPSAwLjA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVkRG9jdW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFF1ZXVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBbXS5jb25jYXQoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IF9yYW5kb20oMCwgbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbbl0gPSBhW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFba10gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRvY3VtZW50IG9mIHNodWZmbGUodGhpcy5jYWNoZWREb2N1bWVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UXVldWUucHVzaChkb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb2N1bWVudFF1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXdhaXQgdGhpcy50YWxrKHRoaXMudXNlci51aWQsIGRvY3VtZW50LmZpbHRlcigoeCkgPT4geCAhPT0gdGhpcy5jaGFyYWN0ZXIubmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFsayh0aGlzLnVzZXIudWlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFsayh0aGlzLnVzZXIudWlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFsazogYXN5bmMgZnVuY3Rpb24gKHVzZXJJZCwgdG9rZW5zID0gW10pIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZXMgPSB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiQWN0aXZhdGVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2UgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBbXS5jb25jYXQoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IF9yYW5kb20oMCwgbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhW25dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbbl0gPSBhW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtrXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IDYwICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcFN0YXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGVzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ZXIgPSBuZXcgVGlueVNlZ21lbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlblNldCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGhpcy53b3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHRva2VuKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0gPSB7IGF0dHJpYnV0ZXM6IFtdLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgPT09IFwibnVtYmVyXCIgJiYgd29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPiAwICYmIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS5hdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHNodWZmbGUoc2VxdWVuY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVwYXJlZFNlcXVlbmNlID0gdGhpcy5wcmVwYXJlKFtzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc0Fib3J0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBwcmVwYXJlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBBcnJheS5pc0FycmF5KG8udGV4dCkgPyBvLnRleHQgOiBzZWdtZW50ZXIuc2VnbWVudChvLnRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgcHJlcGFyZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgdGhpcy5nZW5lcmF0ZSh1c2VySWQsIG9iai50ZXh0LCB0b2tlbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXAgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWJvcnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWNoZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGV4dCwgY2FjaGVdID0gdGVtcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgdHlwZTogb2JqLnR5cGUsIHNwZWVkOiBvYmouc3BlZWQsIGR1cmF0aW9uOiBvYmouZHVyYXRpb24sIHRleHQ6IHRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaChzZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi5sZW5ndGggPiAxICYmICF0b2tlblNldC5pbmNsdWRlcyh0b2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiBpbiB0aGlzLndvcmREaWN0aW9uYXJ5ID09PSBmYWxzZSB8fCB0aW1lc3RhbXAgLSB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHRva2VuKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dID0geyBhdHRyaWJ1dGVzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAod29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pID09PSBcIm51bWJlclwiICYmIHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdID4gMCAmJiB0aGlzLmF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHByZXBhcmVkU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCB0aGlzLmdlbmVyYXRlKHVzZXJJZCwgb2JqLnRleHQsIHRva2Vucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWJvcnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RleHQsIGNhY2hlXSA9IHRlbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgdHlwZTogb2JqLnR5cGUsIHNwZWVkOiBvYmouc3BlZWQsIGR1cmF0aW9uOiBvYmouZHVyYXRpb24sIHRleHQ6IHRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU2V0LnB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlcyA9IHRlbXBTdGF0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHNlcXVlbmNlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCB0aGlzLmdlbmVyYXRlKHVzZXJJZCwgb2JqLnRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXAgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FjaGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RleHQsIGNhY2hlXSA9IHRlbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2VuZXJhdGU6IGFzeW5jIGZ1bmN0aW9uICh1c2VySWQsIG1lc3NhZ2UsIGhpbnRzID0gW10pIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNob2ljZShwcm9iYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1bSA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9iYWJpbGl0eSBvZiBwcm9iYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdW0gPD0gciAmJiByIDwgc3VtICsgcHJvYmFiaWxpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gcHJvYmFiaWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc29mdG1heCh4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4ID0gTnVtYmVyLk1JTl9WQUxVRTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3VtID0gMC4wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhbaV0gPiBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IHhbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gTWF0aC5leHAoeFtpXSAtIG1heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeS5wdXNoKE1hdGguZXhwKHhbaV0gLSBtYXgpIC8gc3VtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IDYwICogNjA7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VnbWVudGVyID0gbmV3IFRpbnlTZWdtZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0b2tlbnMgPSBBcnJheS5pc0FycmF5KG1lc3NhZ2UpID8gbWVzc2FnZSA6IHNlZ21lbnRlci5zZWdtZW50KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhpbnREaWN0aW9uYXJ5ID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9rZW5TZXQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoXCJbLiMkXFxcXFtcXFxcXV1cIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FjaERpY3Rpb25hcnkgPSB7fTtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlcHNpbG9uID0gTWF0aC5wb3coMTAsIC02KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlYW1XaWR0aCA9IDEwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlcXVlbmNlcyA9IFt7IHNlcXVlbmNlOiBbXSwgc2NvcmU6IDEuMCB9XVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgaGludHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGhpcy53b3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgdG9rZW4pLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dID0geyBhdHRyaWJ1dGVzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZCA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdKSA9PT0gXCJudW1iZXJcIiAmJiB3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDAgJiYgdGhpcy5hdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgaW4gaGludERpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0ucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50RGljdGlvbmFyeVthdHRyaWJ1dGVdID0gW3Rva2VuXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9rZW5TZXQuaW5jbHVkZXModG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIGhpbnREaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBoaW50RGljdGlvbmFyeVthdHRyaWJ1dGVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1zLmluY2x1ZGVzKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMucHVzaChzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSB0YWcubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2godGFnLnNjb3JlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmV3ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXMucHVzaChlcHNpbG9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5ID09PSBmYWxzZSB8fCB0aW1lc3RhbXAgLSB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVthdHRyaWJ1dGVdLnRpbWVzdGFtcCA+PSB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHNcIikub3JkZXJCeUNoaWxkKGBhdHRyaWJ1dGVzLyR7YXR0cmlidXRlfWApLmxpbWl0VG9MYXN0KDEwMCkuc3RhcnRBdCgxKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXSA9IHsgd29yZHM6IFtdLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd29yZCBpbiB3b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVthdHRyaWJ1dGVdLndvcmRzLnB1c2god29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vucy5pbmNsdWRlcyh3b3JkKSAmJiAhdGVybXMuaW5jbHVkZXMod29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtcy5wdXNoKHdvcmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmQgPT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtcy5sZW5ndGggPiAwICYmIHNjb3Jlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmFiaWxpdGllcyA9IHNvZnRtYXgoc2NvcmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FuZGlkYXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHByb2JhYmlsaXRpZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZSA9IFtdLmNvbmNhdChzZXF1ZW5jZXNbaV0uc2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyBpbmRleDogaW5kZXgsIHRlcm06IHRlcm1zW2pdIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHsgc2VxdWVuY2U6IHNlcXVlbmNlLCBzY29yZTogc2VxdWVuY2VzW2ldLnNjb3JlICogcHJvYmFiaWxpdGllc1tqXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjYW5kaWRhdGUgb2YgdGhpcy50YWtlKGNhbmRpZGF0ZXMuc29ydCgoeCwgeSkgPT4geS5zY29yZSAtIHguc2NvcmUpLCBiZWFtV2lkdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKGNhbmRpZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyZWdleC50ZXN0KHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuIGluIHRoaXMud29yZERpY3Rpb25hcnkgPT09IGZhbHNlIHx8IHRpbWVzdGFtcCAtIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLnRpbWVzdGFtcCA+PSB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgdG9rZW4pLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0gPSB7IGF0dHJpYnV0ZXM6IFtdLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZCA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgaW4gd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgPT09IFwibnVtYmVyXCIgJiYgd29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPiAwICYmIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgaW4gaGludERpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgaGludERpY3Rpb25hcnlbYXR0cmlidXRlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtcy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMucHVzaChrZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSBpbiB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzXCIpLm9yZGVyQnlDaGlsZChgYXR0cmlidXRlcy8ke2F0dHJpYnV0ZX1gKS5saW1pdFRvTGFzdCgxMDApLnN0YXJ0QXQoMSkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0gPSB7IHdvcmRzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gd29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vucy5pbmNsdWRlcyh3b3JkKSAmJiAhdGVybXMuaW5jbHVkZXMod29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtcy5wdXNoKHdvcmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmQgPT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtcy5sZW5ndGggPiAwICYmIHNjb3Jlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmFiaWxpdGllcyA9IHNvZnRtYXgoc2NvcmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FuZGlkYXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHByb2JhYmlsaXRpZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZSA9IFtdLmNvbmNhdChzZXF1ZW5jZXNbaV0uc2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyBpbmRleDogaW5kZXgsIHRlcm06IHRlcm1zW2pdIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHsgc2VxdWVuY2U6IHNlcXVlbmNlLCBzY29yZTogc2VxdWVuY2VzW2ldLnNjb3JlICogcHJvYmFiaWxpdGllc1tqXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjYW5kaWRhdGUgb2YgdGhpcy50YWtlKGNhbmRpZGF0ZXMuc29ydCgoeCwgeSkgPT4geS5zY29yZSAtIHguc2NvcmUpLCBiZWFtV2lkdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKGNhbmRpZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblNldC5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHNlcXVlbmNlc1tjaG9pY2Uoc29mdG1heChzZXF1ZW5jZXMubWFwKHggPT4geC5zY29yZSkpKV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeSh0b2tlbnNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIGNhY2hEaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FjaERpY3Rpb25hcnlba2V5XSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0b2tlbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGNhY2hEaWN0aW9uYXJ5W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzLnNlcXVlbmNlLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5zZXF1ZW5jZVtqXS5pbmRleCA9PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PSBzLnNlcXVlbmNlW2pdLnRlcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaERpY3Rpb25hcnlba2V5XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoRGljdGlvbmFyeVtrZXldID0gcy5zZXF1ZW5jZVtqXS50ZXJtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHMuc2VxdWVuY2Vbal0udGVybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2Vuc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHRva2Vuc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RleHQsIGNhY2hEaWN0aW9uYXJ5XTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiAoZGF0YSwgZHVyYXRpb24gPSAzMDAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhW1wiaWRcIl0gPSB3aW5kb3cuc2V0VGltZW91dCgoZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZi5ub3RpZmljYXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm5vdGlmaWNhdGlvbnNbaV0uaWQgPT09IGQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZpY2F0aW9ucy5zcGxpY2UoaSwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBkdXJhdGlvbiwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnVuc2hpZnQoZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJsaW5kZWQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZEltYWdlc1F1ZXVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IFtdLmNvbmNhdChhcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrID0gX3JhbmRvbSgwLCBuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtuXSA9IGFba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2tdID0gdGVtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHNodWZmbGUodGhpcy5yZWNlbnRJbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlc1F1ZXVlLnB1c2goaW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuYmFja2dyb3VuZEltYWdlc1F1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIGltYWdlLnBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnB1c2goeyBpZDogaW1hZ2UuaWQsIHVybDogYXdhaXQgc3RvcmFnZS5yZWYoKS5jaGlsZChwYXRoKS5nZXREb3dubG9hZFVSTCgpLCB0aW1lc3RhbXA6IGltYWdlLnRpbWVzdGFtcCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJ0YWdzXCIgaW4gaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy51c2VyLnVpZCwgaW1hZ2UudGFncy5maWx0ZXIoKHgpID0+IHggIT09IHRoaXMuY2hhcmFjdGVyLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzQ29tcGxldGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbWFnZSBvZiB0aGlzLnByZWxvYWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2UudXJsID09IHVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVtcImlzTG9hZGVkXCJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoXCJpc0xvYWRlZFwiIGluIGltYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHRoaXMucHJlbG9hZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2UuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGltYWdlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaW1hZ2UudXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogaW1hZ2UudGltZXN0YW1wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMuc3BsaWNlKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNCbGluZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNDb21wbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGltYWdlIG9mIHRoaXMucHJlbG9hZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS51cmwgPT0gdXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlW1wiaXNMb2FkZWRcIl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShcImlzTG9hZGVkXCIgaW4gaW1hZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgdGhpcy5wcmVsb2FkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS5pc0xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaW1hZ2UuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWFnZS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBpbWFnZS50aW1lc3RhbXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZEltYWdlcy5zcGxpY2UoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0JsaW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hha2U6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFuaW1hdGUoW1xyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCg4cHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtOHB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoN3B4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLTdweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDZweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKC02cHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCg1cHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtNXB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoNHB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLTRweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDNweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKC0zcHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgycHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtMnB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMXB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLTFweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCIgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBkdXJhdGlvbjogMTAwMCwgaXRlcmF0aW9uczogMSB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2Nyb2xsVG9Ub3AoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY3JvbGxUb0VuZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNjcm9sbFRpbWVvdXRJRCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNjcm9sbFRpbWVvdXRJRCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9ybWF0RGF0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBtb21lbnQubG9jYWxlKHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoZXZlbnQpLmZvcm1hdChcIkxUXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRpb25TdGFydDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0aW9uRW5kOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmaWNhdGlvbkhlaWdodCA9IHNlbGYuJHJlZnMubm90aWZpY2F0aW9ucy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sZWFkZXJib2FyZEhlaWdodCA9IHNlbGYuJHJlZnMubGVhZGVyYm9hcmQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGlja2VyVXBkYXRlZDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjbGlwIG9mIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAuY2xpcFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByYW5nZTogZnVuY3Rpb24gKGRhdGUsIGRheXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRheSBvZiBkYXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKG5ldyBEYXRlKG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpLmdldFRpbWUoKSArIGRheSAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXJyYW5nZTogZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcm93cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCA8IGxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBbaXRlbV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJvd3MucHVzaChjb2x1bW5zKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93cztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFrZTogZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5sZW5ndGggPiBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gW10uY29uY2F0KGNvbGxlY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLnNwbGljZShjb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChjb2xsZWN0aW9uKS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZvcm1hdFRpbWU6IGZ1bmN0aW9uICh0aW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gTWF0aC5mbG9vcih0aW1lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKHQgLyA4NjQwMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodCAvIDM2MDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodCAvIDYwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlY29uZHMgPSB0ICUgNjA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRheXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBcImRcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWludXRlcyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaG91cnMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBob3VycyArIFwiaFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pbnV0ZXMgKyBcIm1cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Vjb25kcyArIFwic1wiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaWdlc3RNZXNzYWdlOiBhc3luYyBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnVWludDggPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUobWVzc2FnZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5jb2RlIGFzICh1dGYtOCkgVWludDhBcnJheVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiLCBtc2dVaW50OCk7ICAgICAgICAgICAvLyBoYXNoIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTsgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGJ1ZmZlciB0byBieXRlIGFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTsgLy8gY29udmVydCBieXRlcyB0byBoZXggc3RyaW5nXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc2hIZXg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldERpc3RhbmNlOiBmdW5jdGlvbiAobGF0MSwgbG9uMSwgbGF0MiwgbG9uMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIFIgPSA2MzcxOyAvLyBSYWRpdXMgb2YgdGhlIGVhcnRoIGluIGttXHJcbiAgICAgICAgICAgICAgICB2YXIgZExhdCA9IHRoaXMuZGVnMnJhZChsYXQyIC0gbGF0MSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZExvbiA9IHRoaXMuZGVnMnJhZChsb24yIC0gbG9uMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYSA9XHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oZExhdCAvIDIpICogTWF0aC5zaW4oZExhdCAvIDIpICtcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyh0aGlzLmRlZzJyYWQobGF0MSkpICogTWF0aC5jb3ModGhpcy5kZWcycmFkKGxhdDIpKSAqXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oZExvbiAvIDIpICogTWF0aC5zaW4oZExvbiAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxIC0gYSkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBSICogYzsgLy8gRGlzdGFuY2UgaW4ga21cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVnMnJhZDogZnVuY3Rpb24gKGRlZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZyAqIChNYXRoLlBJIC8gMTgwKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmNvZGVHZW9oYXNoOiBmdW5jdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSwgcHJlY2lzaW9uID0gMTIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJJVFMgPSBbMTYsIDgsIDQsIDIsIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQkFTRTMyID0gXCIwMTIzNDU2Nzg5YmNkZWZnaGprbW5wcXJzdHV2d3h5elwiO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzX2V2ZW4gPSAxO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2ggPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGdlb2hhc2ggPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGxhdFswXSA9IC05MC4wOyBsYXRbMV0gPSA5MC4wO1xyXG4gICAgICAgICAgICAgICAgbG9uWzBdID0gLTE4MC4wOyBsb25bMV0gPSAxODAuMDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2VvaGFzaC5sZW5ndGggPCBwcmVjaXNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZXZlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWQgPSAobG9uWzBdICsgbG9uWzFdKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9uZ2l0dWRlID4gbWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaCB8PSBCSVRTW2JpdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25bMF0gPSBtaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uWzFdID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pZCA9IChsYXRbMF0gKyBsYXRbMV0pIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRpdHVkZSA+IG1pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ggfD0gQklUU1tiaXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0WzBdID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdFsxXSA9IG1pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlzX2V2ZW4gPSAhaXNfZXZlbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdCA8IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYml0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvaGFzaCArPSBCQVNFMzJbY2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBnZW9oYXNoO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWNvZGVHZW9oYXNoOiBmdW5jdGlvbiAoZ2VvaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQklUUyA9IFsxNiwgOCwgNCwgMiwgMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCQVNFMzIgPSBcIjAxMjM0NTY3ODliY2RlZmdoamttbnBxcnN0dXZ3eHl6XCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNfZXZlbiA9IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0ID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0X2VyciA9IDkwLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uX2VyciA9IDE4MC4wO1xyXG5cclxuICAgICAgICAgICAgICAgIGxhdFswXSA9IC05MC4wO1xyXG4gICAgICAgICAgICAgICAgbGF0WzFdID0gOTAuMDtcclxuICAgICAgICAgICAgICAgIGxvblswXSA9IC0xODAuMDtcclxuICAgICAgICAgICAgICAgIGxvblsxXSA9IDE4MC4wO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvaGFzaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gZ2VvaGFzaFtpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2QgPSBCQVNFMzIuaW5kZXhPZihjKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA1OyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFzayA9IEJJVFNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZXZlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uX2VyciAvPSAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZCAmIG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25bMF0gPSAobG9uWzBdICsgbG9uWzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvblsxXSA9IChsb25bMF0gKyBsb25bMV0pIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdF9lcnIgLz0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2QgJiBtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0WzBdID0gKGxhdFswXSArIGxhdFsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRbMV0gPSAobGF0WzBdICsgbGF0WzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzX2V2ZW4gPSAhaXNfZXZlbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGF0WzJdID0gKGxhdFswXSArIGxhdFsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgbG9uWzJdID0gKGxvblswXSArIGxvblsxXSkgLyAyO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxhdFsyXSxcclxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvblsyXSxcclxuICAgICAgICAgICAgICAgICAgICB0b3BsZWZ0OiB7IGxhdGl0dWRlOiBsYXRbMF0sIGxvbmdpdHVkZTogbG9uWzBdIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wcmlnaHQ6IHsgbGF0aXR1ZGU6IGxhdFsxXSwgbG9uZ2l0dWRlOiBsb25bMF0gfSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21yaWdodDogeyBsYXRpdHVkZTogbGF0WzFdLCBsb25naXR1ZGU6IGxvblsxXSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbWxlZnQ6IHsgbGF0aXR1ZGU6IGxhdFswXSwgbG9uZ2l0dWRlOiBsb25bMV0gfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0TmVpZ2hib3JzOiBmdW5jdGlvbiAoZ2VvaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRHZW9oYXNoID0gdGhpcy5jYWxjdWxhdGVBZGphY2VudChnZW9oYXNoLCAncmlnaHQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRHZW9oYXNoID0gdGhpcy5jYWxjdWxhdGVBZGphY2VudChnZW9oYXNoLCAnbGVmdCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGdlb2hhc2gsICd0b3AnKSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQoZ2VvaGFzaCwgJ2JvdHRvbScpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiByaWdodEdlb2hhc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdEdlb2hhc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wbGVmdDogdGhpcy5jYWxjdWxhdGVBZGphY2VudChsZWZ0R2VvaGFzaCwgJ3RvcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcHJpZ2h0OiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KHJpZ2h0R2VvaGFzaCwgJ3RvcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbXJpZ2h0OiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KHJpZ2h0R2VvaGFzaCwgJ2JvdHRvbScpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbWxlZnQ6IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQobGVmdEdlb2hhc2gsICdib3R0b20nKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FsY3VsYXRlQWRqYWNlbnQ6IGZ1bmN0aW9uIChzcmNIYXNoLCBkaXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJBU0UzMiA9IFwiMDEyMzQ1Njc4OWJjZGVmZ2hqa21ucHFyc3R1dnd4eXpcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IE5FSUdIQk9SUyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogeyBldmVuOiBcImJjMDFmZzQ1MjM4OTY3ZGV1dmhqeXpucGttc3Rxcnd4XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB7IGV2ZW46IFwiMjM4OTY3ZGViYzAxZmc0NWttc3Rxcnd4dXZoanl6bnBcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeyBldmVuOiBcInAwcjIxNDM2eDh6YjlkY2Y1aDdram5tcWVzZ3V0d3Z5XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHsgZXZlbjogXCIxNDM2NWg3azlkY2Zlc2d1am5tcXAwcjJ0d3Z5eDh6YlwiIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCT1JERVJTID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB7IGV2ZW46IFwiYmNmZ3V2eXpcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHsgZXZlbjogXCIwMTQ1aGpucFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB7IGV2ZW46IFwicHJ4elwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiB7IGV2ZW46IFwiMDI4YlwiIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgTkVJR0hCT1JTLmJvdHRvbS5vZGQgPSBORUlHSEJPUlMubGVmdC5ldmVuO1xyXG4gICAgICAgICAgICAgICAgTkVJR0hCT1JTLnRvcC5vZGQgPSBORUlHSEJPUlMucmlnaHQuZXZlbjtcclxuICAgICAgICAgICAgICAgIE5FSUdIQk9SUy5sZWZ0Lm9kZCA9IE5FSUdIQk9SUy5ib3R0b20uZXZlbjtcclxuICAgICAgICAgICAgICAgIE5FSUdIQk9SUy5yaWdodC5vZGQgPSBORUlHSEJPUlMudG9wLmV2ZW47XHJcblxyXG4gICAgICAgICAgICAgICAgQk9SREVSUy5ib3R0b20ub2RkID0gQk9SREVSUy5sZWZ0LmV2ZW47XHJcbiAgICAgICAgICAgICAgICBCT1JERVJTLnRvcC5vZGQgPSBCT1JERVJTLnJpZ2h0LmV2ZW47XHJcbiAgICAgICAgICAgICAgICBCT1JERVJTLmxlZnQub2RkID0gQk9SREVSUy5ib3R0b20uZXZlbjtcclxuICAgICAgICAgICAgICAgIEJPUkRFUlMucmlnaHQub2RkID0gQk9SREVSUy50b3AuZXZlbjtcclxuXHJcbiAgICAgICAgICAgICAgICBzcmNIYXNoID0gc3JjSGFzaC50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsYXN0Q2hyID0gc3JjSGFzaC5jaGFyQXQoc3JjSGFzaC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gKHNyY0hhc2gubGVuZ3RoICUgMikgPyAnb2RkJyA6ICdldmVuJztcclxuICAgICAgICAgICAgICAgIHZhciBiYXNlID0gc3JjSGFzaC5zdWJzdHJpbmcoMCwgc3JjSGFzaC5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQk9SREVSU1tkaXJdW3R5cGVdLmluZGV4T2YobGFzdENocikgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlID0gdGhpcy5jYWxjdWxhdGVBZGphY2VudChiYXNlLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlICsgQkFTRTMyW05FSUdIQk9SU1tkaXJdW3R5cGVdLmluZGV4T2YobGFzdENocildO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcmVwYXJlOiBmdW5jdGlvbiAoc2VxdWVuY2VzLCBzdGF0ZSA9IG51bGwsIHNlbGVjdGVkU2VxdWVuY2VzID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hvb3NlZFNlcXVlbmNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZsYXR0ZW5lZFNlcXVlbmNlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBTdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IG51bGwgJiYgcy5uYW1lIGluIHRoaXMuc3RhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdGF0ZSA9IHRoaXMuc3RhdGVzW3MubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFN0YXRlICE9PSBudWxsICYmIFwic3RhdGVcIiBpbiBzICYmIHMuc3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzLnN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KHRlbXBTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob29zZWRTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hvb3NlZFNlcXVlbmNlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0YXRlXCIgaW4gcyA9PT0gZmFsc2UgfHwgcy5zdGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3NlZFNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNob29zZWRTZXF1ZW5jZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWV1ZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgY2hvb3NlZFNlcXVlbmNlc1tfcmFuZG9tKDAsIGNob29zZWRTZXF1ZW5jZXMubGVuZ3RoKV0uc2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlc1tzLm5hbWVdID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2gocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSBxdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09IFwiU2VxdWVuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic2VxdWVuY2VcIiBpbiBvYmogPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyYWNlZFNlcXVlbmNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWxsYWJsZVNlcXVlbmNlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2VsZWN0ZWRTZXF1ZW5jZXMgPT09IG51bGwgPyB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMgOiBzZWxlY3RlZFNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2VTdGFjayA9IHRoaXMuZ2V0U2VxdWVuY2VTdGFjayhzLCBvYmopO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3BwZWRTZXF1ZW5jZSA9IHNlcXVlbmNlU3RhY2sucG9wKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZVN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBTdGFjayA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIHNlcXVlbmNlU3RhY2tbc2VxdWVuY2VTdGFjay5sZW5ndGggLSAxXS5zZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcIlNlcXVlbmNlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXF1ZW5jZVwiIGluIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGVtcFNlcXVlbmNlIG9mIHN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFNlcXVlbmNlID09PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YWNrLnB1c2gobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID09PSBwb3BwZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ZW1wU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0ZW1wU3RhY2sucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXF1ZW5jZVwiIGluIHBvcHBlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc05ldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRlbXBTZXF1ZW5jZSBvZiBzdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBTZXF1ZW5jZSA9PT0gcG9wcGVkU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHBvcHBlZFNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHNlcXVlbmNlU3RhY2subGVuZ3RoID4gMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjZWRTZXF1ZW5jZXMucHVzaChzdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjZWRTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RhdGVcIiBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZXNbb2JqLm5hbWVdID0gb2JqLnN0YXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHRyYWNlZFNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PSBvYmoubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAocy5zdGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChvYmouc3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiB0cmFjZWRTZXF1ZW5jZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLm5hbWUgPT0gb2JqLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdGF0ZVwiIGluIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSBpbiB0aGlzLnN0YXRlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHMuc3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KHRoaXMuc3RhdGVzW3MubmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxhYmxlU2VxdWVuY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBjYWxsYWJsZVNlcXVlbmNlc1tfcmFuZG9tKDAsIGNhbGxhYmxlU2VxdWVuY2VzLmxlbmd0aCldLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5zcGxpY2UoaW5kZXgsIDAsIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5lZFNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlbmVkU2VxdWVuY2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFNlcXVlbmNlU3RhY2s6IGZ1bmN0aW9uIChzb3VyY2VTZXF1ZW5jZSwgdGFyZ2V0U2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZVN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wdXNoKHNvdXJjZVNlcXVlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2VTdGFja1tzZXF1ZW5jZVN0YWNrLmxlbmd0aCAtIDFdICE9PSB0YXJnZXRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcInNlcXVlbmNlXCIgaW4gc291cmNlU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIHNvdXJjZVNlcXVlbmNlLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFwiU2VxdWVuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFjayA9IHRoaXMuZ2V0U2VxdWVuY2VTdGFjayhvLCB0YXJnZXRTZXF1ZW5jZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwICYmIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdID09PSB0YXJnZXRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RhY2sucHVzaChzdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wdXNoKHRlbXBTdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRlbXBTdGFjay5sZW5ndGggPiAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZVN0YWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VxdWVuY2VTdGFjaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0ZTogYXN5bmMgZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhVGltZSA9ICh0aW1lc3RhbXAgLSB0aGlzLmVsYXBzZWQpIC8gMTAwMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGFwc2VkID0gdGltZXN0YW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZVF1ZXVlLmxlbmd0aCA+IDAgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnNlcXVlbmNlUXVldWVbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkbGVUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkbGVUaW1lICs9IGRlbHRhVGltZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0xvYWRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlVGltZSArPSBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlcXVlbmNlUXVldWUubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmF0ZVRpbWUgPj0gYWN0aXZhdGVUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWNoZWREb2N1bWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFF1ZXVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtrXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRvY3VtZW50IG9mIHNodWZmbGUodGhpcy5jYWNoZWREb2N1bWVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFF1ZXVlLnB1c2goZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9jdW1lbnRRdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWxrKHRoaXMudXNlci51aWQsIGRvY3VtZW50LmZpbHRlcigoeCkgPT4geCAhPT0gdGhpcy5jaGFyYWN0ZXIubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWUgPSBhY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlkbGVUaW1lID49IGJsaW5rVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goeyBzZXF1ZW5jZXM6IHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiSWRsZVwiKSkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0xvY2tlZCAmJiB0aGlzLnNlcXVlbmNlUXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXF1ZW5jZSA9IEFycmF5LmlzQXJyYXkodGhpcy5zZXF1ZW5jZVF1ZXVlWzBdKSA/IHRoaXMuc2VxdWVuY2VRdWV1ZVswXSA6IHRoaXMuc2VxdWVuY2VRdWV1ZVswXS5zZXF1ZW5jZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlWzBdLnR5cGUgPT0gXCJBbmltYXRpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImZyYW1lc1wiIGluIHNlcXVlbmNlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHNlcXVlbmNlWzBdLmZyYW1lcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImNoYXJhY3RlclwiIGluIHNlcXVlbmNlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUXVldWUucHVzaCh7IGNoYXJhY3Rlcjogc2VxdWVuY2VbMF0uY2hhcmFjdGVyLCBpbWFnZXM6IG9iaiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlLnB1c2goeyBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLCBpbWFnZXM6IG9iaiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAob2JqKSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIml0ZXJhdGlvbnNcIiBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiaW1hZ2VzXCIgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gXCJjaGFyYWN0ZXJcIiBpbiBzZXF1ZW5jZVswXSA/IHNlcXVlbmNlWzBdLmNoYXJhY3RlciA6IHRoaXMuY2hhcmFjdGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLml0ZXJhdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUXVldWUucHVzaCh7IGNoYXJhY3RlcjogYywgaW1hZ2VzOiBvYmouaW1hZ2VzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwic3ByaXRlc1wiIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IFwiY2hhcmFjdGVyXCIgaW4gc2VxdWVuY2VbMF0gPyBzZXF1ZW5jZVswXS5jaGFyYWN0ZXIgOiB0aGlzLmNoYXJhY3RlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5pdGVyYXRpb25zOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlLnB1c2goeyBjaGFyYWN0ZXI6IGMsIGltYWdlczogb2JqLnNwcml0ZXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlcXVlbmNlWzBdLnR5cGUgPT0gXCJNZXNzYWdlXCIgJiYgdGhpcy5tZXNzYWdlID09PSBudWxsICYmIHRoaXMuYW5pbWF0aW9uUXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2hhcmFjdGVyXCIgaW4gc2VxdWVuY2VbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0geyB0aW1lOiAwLCBkdXJhdGlvbjogc2VxdWVuY2VbMF0uZHVyYXRpb24sIHR5cGU6IHsgZWxhcHNlZDogLTEsIHNwZWVkOiBzZXF1ZW5jZVswXS5zcGVlZCwgcmV2ZXJzZTogZmFsc2UsIGJ1ZmZlcjogXCJcIiwgY291bnQ6IDAgfSwgY2hhcmFjdGVyOiBzZXF1ZW5jZVswXS5jaGFyYWN0ZXIsIHRleHQ6IHNlcXVlbmNlWzBdLnRleHQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSB7IHRpbWU6IDAsIGR1cmF0aW9uOiBzZXF1ZW5jZVswXS5kdXJhdGlvbiwgdHlwZTogeyBlbGFwc2VkOiAtMSwgc3BlZWQ6IHNlcXVlbmNlWzBdLnNwZWVkLCByZXZlcnNlOiBmYWxzZSwgYnVmZmVyOiBcIlwiLCBjb3VudDogMCB9LCBjaGFyYWN0ZXI6IHsgbmFtZTogdGhpcy5jaGFyYWN0ZXIubmFtZSwgYWNjZW50OiB0aGlzLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiB0aGlzLmNoYXJhY3Rlci5pbWFnZSB9LCB0ZXh0OiBzZXF1ZW5jZVswXS50ZXh0IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmlmICghdGhpcy5pc011dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLm1lc3NhZ2UudGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9haS5taWxjaGNoYW4uY29tL2FwaS9zeW50aGVzaXplP3RleHQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGV4dCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGF3YWl0IHJlc3BvbnNlLmJsb2IoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlICE9PSBudWxsICYmIHRleHQgPT09IHRoaXMubWVzc2FnZS50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVzc2FnZSA9PT0gbnVsbCAmJiB0aGlzLmFuaW1hdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYWNoZWRJbWFnZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5jYWNoZWRTcHJpdGVzLnNvbWUoeCA9PiB4LnNvdXJjZSA9PT0ga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZi5jYWNoZWRJbWFnZXNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgKz0gZGVsdGFUaW1lICogMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPj0gMS4wIC8gdGhpcy5tZXNzYWdlLnR5cGUuc3BlZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5tZXNzYWdlLnR5cGUuY291bnQgLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5tZXNzYWdlLnRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSBNYXRoLmZsb29yKHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCAvIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoIDw9IHdpZHRoICYmIHRoaXMubWVzc2FnZS50eXBlLmNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmNvdW50IC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyID0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLnN1YnN0cmluZygwLCB0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1BvcHVwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCA8IHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc0FuaW1hdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuZWxhcHNlZCA9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUG9wdXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuZWxhcHNlZCA+PSAxLjAgLyB0aGlzLm1lc3NhZ2UudHlwZS5zcGVlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gTWF0aC5mbG9vcih0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGggLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gdGhpcy5tZXNzYWdlLnRleHQubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuY291bnQgPj0gd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyICs9IHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuY291bnQgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnRpbWUgKz0gZGVsdGFUaW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudGltZSA+PSB0aGlzLm1lc3NhZ2UuZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5yZXZlcnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCA9PT0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVycyA9IHRoaXMubWVzc2FnZS50ZXh0LnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0LnB1c2goeyBrZXk6IGksIHZhbHVlOiBjaGFyYWN0ZXJzW2ldIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJBcnJheSA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmRvbUJ1ZmZlciA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXJyYXkuaW5kZXhPZih0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkpID09IC0xICYmIHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpKSAhPSBcIlxcblwiICYmIHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpKS5tYXRjaCgvXFxzLykgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQXJyYXkucHVzaCh0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckFycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWVzc2FnZS50eXBlLmNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpKSA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb21CdWZmZXIgKz0gXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbUJ1ZmZlciArPSBjaGFyQXJyYXlbfn5fcmFuZG9tKDAsIGNoYXJBcnJheS5sZW5ndGgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tQnVmZmVyLmxlbmd0aCA+IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gKHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlciArIHJhbmRvbUJ1ZmZlci5zdWJzdHJpbmcodGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCwgcmFuZG9tQnVmZmVyLmxlbmd0aCkpLnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJhY3RlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0LnB1c2goeyBrZXk6IGksIHZhbHVlOiBjaGFyYWN0ZXJzW2ldIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50ZXh0Lmxlbmd0aCAhPT0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlcnMgPSB0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIuc3BsaXQoXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcmFjdGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQucHVzaCh7IGtleTogaSwgdmFsdWU6IGNoYXJhY3RlcnNbaV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb25RdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uUXVldWVbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2NrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGEgb2YgdGhpcy5hbmltYXRpb25RdWV1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9ja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGEgb2YgYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIGEuaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGUuc291cmNlIGluIHRoaXMuY2FjaGVkSW1hZ2VzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3JjID0gc3ByaXRlLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRJbWFnZXNbc3ByaXRlLnNvdXJjZV0gPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2NrZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uLmNoYXJhY3Rlci5uYW1lID09PSB0aGlzLmNoYXJhY3Rlci5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRTcHJpdGVzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpdGUgb2YgdGhpcy5yZW5kZXIodGhpcy4kcmVmcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCwgYW5pbWF0aW9uLmltYWdlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRTcHJpdGVzLnB1c2goc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmUgPSB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlQ2FjaGVkU3ByaXRlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIHRoaXMucmVuZGVyKHRoaXMuJHJlZnMuYWx0ZXJuYXRpdmUuZ2V0Q29udGV4dChcIjJkXCIpLCB0aGlzLmFsdGVybmF0aXZlQ2FudmFzV2lkdGgsIHRoaXMuYWx0ZXJuYXRpdmVDYW52YXNIZWlnaHQsIGFuaW1hdGlvbi5pbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmVDYWNoZWRTcHJpdGVzLnB1c2goc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25RdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChjdHgsIHdpZHRoLCBoZWlnaHQsIGFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ByaXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpdGUgb2YgYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwcml0ZS5zb3VyY2UgaW4gdGhpcy5jYWNoZWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwib3BhY2l0eVwiIGluIHNwcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gc3ByaXRlLm9wYWNpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuY2FjaGVkSW1hZ2VzW3Nwcml0ZS5zb3VyY2VdLCBzcHJpdGUueCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBzcHJpdGUueSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBzcHJpdGUud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgc3ByaXRlLmhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZXMucHVzaChzcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzcHJpdGVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGRhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vbGV0IGNvbnRhaW5lciA9IHRoaXMuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnNldFRvcCA9IHRoaXMuJHJlZnMuaW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5pbnNldEJvdHRvbSA9IHRoaXMuJHJlZnMuYmxhbmsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy90aGlzLiRyZWZzLnRpY2tlci5zdHlsZS53aWR0aCA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNpbnB1dCAuY29sdW1ucz4uY29sdW1uIC5jb250cm9sOm50aC1sYXN0LW9mLXR5cGUoMSkgLmxldmVsOm50aC1sYXN0LW9mLXR5cGUoMSkgZm9ybVwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XHJcblxyXG4gICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNoZWFkaW5nPi5jb2x1bW5zPi5jb2x1bW4+LmNvbHVtbnM6Zmlyc3QtY2hpbGQ+LmNvbHVtbj4uY29sdW1uczpsYXN0LWNoaWxkIC5sZXZlbDpmaXJzdC1jaGlsZCAubGV2ZWwtaXRlbSAuZmllbGQgLnRpY2tlclwiKS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICAvKnRoaXMuJHJlZnMudGlja2VyLnN0eWxlLndpZHRoID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0IC5jb2x1bW5zPi5jb2x1bW4gLmNvbnRyb2w6bnRoLWxhc3Qtb2YtdHlwZSgxKSAubGV2ZWw6bnRoLWxhc3Qtb2YtdHlwZSgxKSBmb3JtXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLypmb3IgKGNvbnN0IGNsaXAgb2YgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5jbGlwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjbGlwLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXIgLml0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpY2tlcldpZHRoID0gTWF0aC5taW4od2lkdGggLyAyLCBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQ+LmNvbHVtbnM6bGFzdC1vZi10eXBlPi5jb2x1bW4+LmNvbnRyb2wgLmxldmVsXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3VudGVkOiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNob2ljZShjb2xsZWN0aW9uLCBmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdW0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JhYmlsaXR5ID0gZnVuYyhpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1bSA8PSByICYmIHIgPCBzdW0gKyBwcm9iYWJpbGl0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBwcm9iYWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uW2luZGV4XTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvdFN0b3JhZ2VJdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjaGFyYWN0ZXJcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxTdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdHNTdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic3RhdHNcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50c1N0b3JhZ2VJdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJmcmFnbWVudHNcIik7XHJcbiAgICAgICAgICAgIGxldCBjcmVkZW50aWFsID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IGZyYWdtZW50cztcclxuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVycyA9IFt7IHBhdGg6IFwiL2Fzc2V0cy9taWxjaC5qc29uXCIsIHByb2JhYmlsaXR5OiAxLjAgfV07XHJcbiAgICAgICAgICAgIGNvbnN0IGFsdGVybmF0aXZlcyA9IFt7IHBhdGg6IFwiL2Fzc2V0cy9tZXJrdS5qc29uXCIsIHByb2JhYmlsaXR5OiAxLjAgfV07XHJcblxyXG4gICAgICAgICAgICBpZiAoYm90U3RvcmFnZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm90ID0gSlNPTi5wYXJzZShib3RTdG9yYWdlSXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc011dGVkID0gYm90Lm11dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY2hhcmFjdGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbFN0b3JhZ2VJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwgPSBKU09OLnBhcnNlKGNyZWRlbnRpYWxTdG9yYWdlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjcmVkZW50aWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhdHNTdG9yYWdlSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZURhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXkgb2YgSlNPTi5wYXJzZShzdGF0c1N0b3JhZ2VJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF5LmRhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0VGltZSgpID4gYmFzZURhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHMucHVzaCh7IGRhdGU6IGRhdGUsIHN0ZXBzOiBkYXkuc3RlcHMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJzdGF0c1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZyYWdtZW50c1N0b3JhZ2VJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50cyA9IEpTT04ucGFyc2UoZnJhZ21lbnRzU3RvcmFnZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiZnJhZ21lbnRzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLmFmdGVyKHN0YXRzLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnNldFRvcCA9IHRoaXMuJHJlZnMuaW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5pbnNldEJvdHRvbSA9IHRoaXMuJHJlZnMuYmxhbmsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWljcm9zb2Z0Lk1hcHMuTWFwKHRoaXMuJHJlZnMubWFwLCB7XHJcbiAgICAgICAgICAgICAgICBtYXBUeXBlSWQ6IE1pY3Jvc29mdC5NYXBzLk1hcFR5cGVJZC5jYW52YXNMaWdodFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVIaWdoRHBpOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93TG9jYXRlTWVCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd01hcFR5cGVTZWxlY3RvcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93Wm9vbUJ1dHRvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd1NjYWxlYmFyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHN1cHBvcnRlZE1hcFR5cGVzOiBbTWljcm9zb2Z0Lk1hcHMuTWFwVHlwZUlkLmdyYXlzY2FsZSwgTWljcm9zb2Z0Lk1hcHMuTWFwVHlwZUlkLmNhbnZhc0xpZ2h0LCBNaWNyb3NvZnQuTWFwcy5NYXBUeXBlSWQuY2FudmFzRGFya11cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxheWVyID0gbmV3IE1pY3Jvc29mdC5NYXBzLkxheWVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLmxheWVycy5pbnNlcnQodGhpcy5sYXllcik7XHJcblxyXG4gICAgICAgICAgICBNaWNyb3NvZnQuTWFwcy5FdmVudHMuYWRkSGFuZGxlcih0aGlzLm1hcCwgJ3ZpZXdjaGFuZ2VlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi51c2VyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UxID0gYXdhaXQgZmV0Y2goY2hvaWNlKGNoYXJhY3RlcnMsICh4KSA9PiB4LnByb2JhYmlsaXR5KS5wYXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZTEub2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSBhd2FpdCByZXNwb25zZTEuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlID0gdGhpcy5wcmVwYXJlKGNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiU3RhcnRcIiksIG51bGwsIGNoYXJhY3Rlci5zZXF1ZW5jZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UyID0gYXdhaXQgZmV0Y2goY2hvaWNlKGFsdGVybmF0aXZlcywgKHgpID0+IHgucHJvYmFiaWxpdHkpLnBhdGgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsdGVybmF0aXZlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UyLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlID0gYXdhaXQgcmVzcG9uc2UyLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UyLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UzID0gYXdhaXQgZmV0Y2goXCIvYXNzZXRzL2ZyYWdtZW50cy5qc29uXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZTMub2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSAyNCAqIDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiBhd2FpdCByZXNwb25zZTMuanNvbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzZXQgb2YgZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmcmFnbWVudHMuZmluZCh4ID0+IHNldC5zb21lKHkgPT4geC5zZXQuaW5jbHVkZXMoeSkpICYmIHguY291bnQgPiAwICYmIHgudGltZXN0YW1wICogMTAwMCA+IGJhc2VUaW1lICYmIHguY2hlY2tzdW0gPT09IFsuLi5TdHJpbmcoeC50aW1lc3RhbXApXS5yZWR1Y2UoKHgsIHkpID0+IHggKyB5LCAwKSArIFsuLi5TdHJpbmcoeC5jb3VudCldLnJlZHVjZSgoeCwgeSkgPT4geCArIHksIDApKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZy5wdXNoKHsgc2V0OiBzZXQsIGluZGV4OiAwLCBjb3VudDogMCwgdGltZXN0YW1wOiB0aW1lc3RhbXAsIHJlc2VydmVkOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcucHVzaCh7IHNldDogc2V0LCBpbmRleDogMCwgY291bnQ6IHJlc3VsdC5jb3VudCwgdGltZXN0YW1wOiByZXN1bHQudGltZXN0YW1wLCByZXNlcnZlZDogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFycy5wdXNoKGcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50IG9mIGZyYWdtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmcmFnbWVudC5zZXQuc29tZSh4ID0+IHRoaXMuY2hhcnMuc29tZSh5ID0+IHkuc29tZSh6ID0+IHouc2V0LmluY2x1ZGVzKHgpKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKHsgc2V0OiBmcmFnbWVudC5zZXQsIGluZGV4OiAwLCBjb3VudDogZnJhZ21lbnQuY291bnQsIHRpbWVzdGFtcDogZnJhZ21lbnQudGltZXN0YW1wLCByZXNlcnZlZDogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFycy5zcGxpY2UoaW5kZXgsIDAsIGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZTMuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1NpemUud2lkdGggPSBjaGFyYWN0ZXIud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmhlaWdodCA9IGNoYXJhY3Rlci5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmRldmljZVdpZHRoID0gY2hhcmFjdGVyLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmRldmljZUhlaWdodCA9IGNoYXJhY3Rlci5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUud2lkdGggPSBhbHRlcm5hdGl2ZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuaGVpZ2h0ID0gYWx0ZXJuYXRpdmUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS5kZXZpY2VXaWR0aCA9IGFsdGVybmF0aXZlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmFsdGVybmF0aXZlLmRldmljZUhlaWdodCA9IGFsdGVybmF0aXZlLmhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBzZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT0gXCJBbmltYXRpb25cIiAmJiBcImZyYW1lc1wiIGluIG9iaiAmJiBvYmouZnJhbWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZXMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iai5mcmFtZXNbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzID0gb2JqLmZyYW1lc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChvYmouZnJhbWVzWzBdKSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIml0ZXJhdGlvbnNcIiBpbiBvYmouZnJhbWVzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImltYWdlc1wiIGluIG9iai5mcmFtZXNbMF0gJiYgb2JqLmZyYW1lc1swXS5pbWFnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzID0gb2JqLmZyYW1lc1swXS5pbWFnZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJzcHJpdGVzXCIgaW4gb2JqLmZyYW1lc1swXSAmJiBvYmouZnJhbWVzWzBdLnNwcml0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzID0gb2JqLmZyYW1lc1swXS5zcHJpdGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcml0ZSBvZiBpbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwcml0ZS5zb3VyY2UgaW4gdGhpcy5jYWNoZWRJbWFnZXMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gYXdhaXQgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub25lcnJvciA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmNyb3NzT3JpZ2luID0gXCJBbm9ueW1vdXNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zcmMgPSBzcHJpdGUuc291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZEltYWdlc1tzcHJpdGUuc291cmNlXSA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkU3ByaXRlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIHRoaXMucmVuZGVyKHRoaXMuJHJlZnMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQsIGltYWdlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRTcHJpdGVzLnB1c2goc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyID0gY2hhcmFjdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyW1wiYWx0ZXJuYXRpdmVcIl0gPSBhbHRlcm5hdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaChzZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZTEuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjcmVkZW50aWFsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGUgPSBcInNpZ24taW5cIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNSZXZlYWxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3JlZGVudGlhbC5wcm92aWRlcklkID09PSBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoQ3JlZGVudGlhbChmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsKGNyZWRlbnRpYWwuaWRUb2tlbikpLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcmVkZW50aWFsLnByb3ZpZGVySWQgPT09IGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoZmlyZWJhc2UuYXV0aC5GYWNlYm9va0F1dGhQcm92aWRlci5jcmVkZW50aWFsKGNyZWRlbnRpYWwuYWNjZXNzVG9rZW4pKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3JlZGVudGlhbC5wcm92aWRlcklkID09PSBmaXJlYmFzZS5hdXRoLlR3aXR0ZXJBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoY3JlZGVudGlhbC5hY2Nlc3NUb2tlbiwgY3JlZGVudGlhbC5zZWNyZXQpKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlID0gXCJzaWduLWluXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLypmaXJlYmFzZS5hdXRoKCkuc2lnbkluQW5vbnltb3VzbHkoKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZXJyb3IubWVzc2FnZSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pOyovXHJcblxyXG4gICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkub25BdXRoU3RhdGVDaGFuZ2VkKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZXIgaXMgc2lnbmVkIGluLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vd0RhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF5IG9mIHNlbGYuc3RhdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheS5kYXRlLmdldEZ1bGxZZWFyKCkgPT09IG5vd0RhdGUuZ2V0RnVsbFllYXIoKSAmJiBkYXkuZGF0ZS5nZXRNb250aCgpID09PSBub3dEYXRlLmdldE1vbnRoKCkgJiYgZGF5LmRhdGUuZ2V0RGF0ZSgpID09PSBub3dEYXRlLmdldERhdGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGVwcyA9IGRheS5zdGVwcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L2NvdW50XCIpLm9uKFwidmFsdWVcIiwgc25hcHNob3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhcnMgPSBjb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi90cmFja3NcIikub3JkZXJCeUNoaWxkKFwidGltZXN0YW1wXCIpLmxpbWl0VG9MYXN0KDEwKS5vbihcInZhbHVlXCIsIHNuYXBzaG90ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcFdvcmRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHdvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHNba2V5XVtcImlkXCJdID0ga2V5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV29yZHMucHVzaCh3b3Jkc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGVtcFdvcmRzLnNvcnQoKHgsIHkpID0+IHkudGltZXN0YW1wIC0geC50aW1lc3RhbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZUluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZi5yZWNlbnRXb3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZWNlbnRXb3Jkc1tpXS5uYW1lID09IHdvcmQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSW5kZXggPSBpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2VudFdvcmRzLnNwbGljZShyZW1vdmVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2VudFdvcmRzLnNwbGljZShpbmRleCwgMCwgd29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc2VsZi5yZWNlbnRXb3Jkcy5sZW5ndGggLSAxOyBpID49IGluZGV4OyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2VudFdvcmRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnVzZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIGlzIHNpZ25lZCBvdXQuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgc2VsZi51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvY291bnRcIikub2ZmKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3RyYWNrc1wiKS5vZmYoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51c2VyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJzID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2RhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi93b3Jkc1wiKS5vcmRlckJ5Q2hpbGQoXCJ0aW1lc3RhbXBcIikubGltaXRUb0xhc3QoMTAwKS5vbihcInZhbHVlXCIsIHNuYXBzaG90ID0+IHtcclxuICAgICAgICAgICAgICAgIC8vICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGNvbnN0IHdvcmRzID0gc25hcHNob3QudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAvKmxldCBpc1VwZGF0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYucmVjZW50SW1hZ2VzLnNvbWUoeCA9PiB4LmlkID09PSBrZXkgJiYgeC50aW1lc3RhbXAgPT09IGltYWdlc1trZXldLnRpbWVzdGFtcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNVcGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRJbWFnZXMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzW2tleV1bXCJpZFwiXSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRJbWFnZXMucHVzaChpbWFnZXNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZShzZWxmLnJlY2VudEltYWdlcywgc2VsZi5tYXhUYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlzQmxpbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgIC8vICAgIH1cclxuICAgICAgICAgICAgICAgIC8vfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5tb3VudGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy50aWNrSW50ZXJ2YWxJRCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpY2tJbnRlcnZhbElEKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZybU1vZGVsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzY2VuZS5yZW1vdmUodnJtTW9kZWwuc2NlbmUpO1xyXG4gICAgICAgICAgICAgICAgdnJtTW9kZWwgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSkubW91bnQoXCIjYXBwXCIpO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGV2ZW50ID0+IHtcclxuICAgICAgICBhcHAuaW5zZXRUb3AgPSBhcHAuJHJlZnMuaW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICBhcHAuaW5zZXRCb3R0b20gPSBhcHAuJHJlZnMuYmxhbmsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgIGFwcC5jYW52YXNTaXplLndpZHRoID0gYXBwLmNoYXJhY3Rlci53aWR0aDtcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5oZWlnaHQgPSBhcHAuY2hhcmFjdGVyLmhlaWdodDtcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5kZXZpY2VXaWR0aCA9IGFwcC5jaGFyYWN0ZXIud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5kZXZpY2VIZWlnaHQgPSBhcHAuY2hhcmFjdGVyLmhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgIGFwcC5jYW52YXNTaXplLmFsdGVybmF0aXZlLndpZHRoID0gYXBwLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS53aWR0aDtcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS5oZWlnaHQgPSBhcHAuY2hhcmFjdGVyLmFsdGVybmF0aXZlLmhlaWdodDtcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS5kZXZpY2VXaWR0aCA9IGFwcC5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS5kZXZpY2VIZWlnaHQgPSBhcHAuY2hhcmFjdGVyLmFsdGVybmF0aXZlLmhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgIGFwcC5hbmltYXRpb25RdWV1ZS51bnNoaWZ0KHsgY2hhcmFjdGVyOiBhcHAuY2hhcmFjdGVyLCBpbWFnZXM6IFtdLmNvbmNhdChhcHAuY2FjaGVkU3ByaXRlcykgfSk7XHJcblxyXG4gICAgICAgIGlmIChhcHAuYWx0ZXJuYXRpdmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXBwLmFuaW1hdGlvblF1ZXVlLnVuc2hpZnQoeyBjaGFyYWN0ZXI6IGFwcC5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUsIGltYWdlczogW10uY29uY2F0KGFwcC5hbHRlcm5hdGl2ZUNhY2hlZFNwcml0ZXMpIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKlxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIE9iamVjdC5rZXlzKGFwcC5jYWNoZWRJbWFnZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBkZWxldGUgYXBwLmNhY2hlZEltYWdlc1trZXldO1xyXG4gICAgICAgIH0pOyovXHJcblxyXG4gICAgICAgIC8vYXBwLiRyZWZzLnRpY2tlci5zdHlsZS53aWR0aCA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNpbnB1dCAuY29sdW1ucz4uY29sdW1uIC5jb250cm9sOm50aC1sYXN0LW9mLXR5cGUoMSkgLmxldmVsOm50aC1sYXN0LW9mLXR5cGUoMSkgZm9ybVwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XHJcblxyXG4gICAgICAgIC8qY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSB3aW5kb3cub3V0ZXJIZWlnaHQ7XHJcbiAgICAgXHJcbiAgICAgICAgYmxvb21QYXNzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgZnhhYVNoYWRlci51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlLnNldCgxIC8gKHdpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pLCAxIC8gKGhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSk7XHJcbiAgICAgXHJcbiAgICAgICAgcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICBcclxuICAgICAgICBjYW1lcmEuYXNwZWN0ID0gd2lkdGggLyBoZWlnaHQ7XHJcbiAgICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICAgICBcclxuICAgICAgICBjb21wb3Nlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICAgICAgICBjb21wb3Nlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpOyovXHJcblxyXG4gICAgICAgIC8qYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2xpcCBvZiBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjaW5wdXQ+LmNvbHVtbnM6bGFzdC1vZi10eXBlPi5jb2x1bW4+LmNvbnRyb2wgLmNsaXBcIikpIHtcclxuICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcC5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTsqL1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50ID0+IHtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCBldmVudCA9PiB7XHJcbiAgICAgICAgLy9hcHAuYWN0aXZhdGUoKTtcclxuICAgICAgICAvL2FjdGl2YXRlVGltZSA9IDAuMDtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIC8qaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoYmVzdEludGVyc2VjdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwcmluZ0JvbmVJbmRleCA9IDA7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZUJvbmUgPSB7IHBvaW50OiB7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSwgZGlyZWN0aW9uOiB7IHg6IDAsIHk6IDAsIH0sIGRpc3RhbmNlOiAwLCBpbmRleDogLTEgfTtcclxuICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaW5nQm9uZUdyb3VwIG9mIHZybU1vZGVsLnNwcmluZ0JvbmVNYW5hZ2VyLnNwcmluZ0JvbmVHcm91cExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcmluZ0JvbmUgb2Ygc3ByaW5nQm9uZUdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gc3ByaW5nQm9uZS5ib25lLmdldFdvcmxkUG9zaXRpb24obmV3IFRIUkVFLlZlY3RvcjMoKSkuZGlzdGFuY2VUbyhiZXN0SW50ZXJzZWN0LnBvaW50KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlQm9uZS5pbmRleCA9IHNwcmluZ0JvbmVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpbmdCb25lSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGlmIChhcHAuY2hhcmFjdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLnNlcXVlbmNlUXVldWUucHVzaChhcHAucHJlcGFyZShhcHAuY2hhcmFjdGVyLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJUb3VjaFN0YXJ0XCIpLCBiZXN0SW50ZXJzZWN0Lm9iamVjdC5uYW1lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9Ki9cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZXZlbnQgPT4ge1xyXG5cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGV2ZW50ID0+IHtcclxuICAgICAgICAvKmlmIChldmVudC5idXR0b24gPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGFwcC5jaGFyYWN0ZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFwcC5zZXF1ZW5jZVF1ZXVlLnB1c2goYXBwLnByZXBhcmUoYXBwLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiVG91Y2hFbmRcIikpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0qL1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBpZiAodGFwQ291bnQgPT0gMCkge1xyXG4gICAgICAgICAgICB0YXBDb3VudCsrO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YXBDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcblxyXG4gICAgICAgICAgICAvKmxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgICAgICAgICBsZXQgYmVzdEludGVyc2VjdCA9IG51bGw7XHJcbiAgICBcclxuICAgICAgICAgICAgbW91c2UueCA9IChldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC8gd2luZG93LmlubmVyV2lkdGgpICogMi4wIC0gMS4wO1xyXG4gICAgICAgICAgICBtb3VzZS55ID0gLShldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC8gd2luZG93Lm91dGVySGVpZ2h0KSAqIDIuMCArIDEuMDtcclxuICAgIFxyXG4gICAgICAgICAgICByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShtb3VzZSwgY2FtZXJhKTtcclxuICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbnRlcnNlY3Qgb2YgcmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHMoc2NlbmUuY2hpbGRyZW4sIHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0LmRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBiZXN0SW50ZXJzZWN0ID0gaW50ZXJzZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gaW50ZXJzZWN0LmRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKGJlc3RJbnRlcnNlY3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzcHJpbmdCb25lSW5kZXggPSAwO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGVCb25lID0geyBwb2ludDogeyB4OiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLCB5OiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIH0sIGRpcmVjdGlvbjogeyB4OiAwLCB5OiAwLCB9LCBkaXN0YW5jZTogMCwgaW5kZXg6IC0xIH07XHJcbiAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcmluZ0JvbmVHcm91cCBvZiB2cm1Nb2RlbC5zcHJpbmdCb25lTWFuYWdlci5zcHJpbmdCb25lR3JvdXBMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpbmdCb25lIG9mIHNwcmluZ0JvbmVHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHNwcmluZ0JvbmUuYm9uZS5nZXRXb3JsZFBvc2l0aW9uKG5ldyBUSFJFRS5WZWN0b3IzKCkpLmRpc3RhbmNlVG8oYmVzdEludGVyc2VjdC5wb2ludCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZUJvbmUuaW5kZXggPSBzcHJpbmdCb25lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaW5nQm9uZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwLmNoYXJhY3RlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5zZXF1ZW5jZVF1ZXVlLnB1c2goYXBwLnByZXBhcmUoYXBwLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiVG91Y2hTdGFydFwiKSwgYmVzdEludGVyc2VjdC5vYmplY3QubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgbG9va0FuaW1hdGlvbiA9IHsgdGltZTogMC4wLCBkdXJhdGlvbjogMC41LCBzb3VyY2U6IHsgeDogbG9va0F0VGFyZ2V0LnBvc2l0aW9uLngsIHk6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi55IH0sIHRhcmdldDogeyB4OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIDAuNSAqIHdpbmRvdy5pbm5lcldpZHRoKSAvIHdpbmRvdy5vdXRlckhlaWdodCAqIDEwLjAsIHk6IChldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gMC41ICogd2luZG93Lm91dGVySGVpZ2h0KSAvIHdpbmRvdy5vdXRlckhlaWdodCAqIC0xMC4wIH0gfTtcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL3JheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKG1vdXNlLCBjYW1lcmEpO1xyXG5cclxuICAgICAgICAgICAgLy9pZiAocmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHMoc2NlbmUuY2hpbGRyZW4sIHRydWUpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy9hcHAudGFsayhhcHAudXNlci51aWQpO1xyXG4gICAgICAgICAgICAvL2FjdGl2YXRlVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgLy99XHJcblxyXG4gICAgICAgICAgICB0YXBDb3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIC8vbG9va0FuaW1hdGlvbiA9IHsgdGltZTogMC4wLCBkdXJhdGlvbjogMC41LCBzb3VyY2U6IHsgeDogbG9va0F0VGFyZ2V0LnBvc2l0aW9uLngsIHk6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi55IH0sIHRhcmdldDogeyB4OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIDAuNSAqIHdpbmRvdy5pbm5lcldpZHRoKSAvIHdpbmRvdy5vdXRlckhlaWdodCAqIDEwLjAsIHk6IChldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gMC41ICogd2luZG93Lm91dGVySGVpZ2h0KSAvIHdpbmRvdy5vdXRlckhlaWdodCAqIC0xMC4wIH0gfTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIC8qbG9va0FuaW1hdGlvbiA9IHsgdGltZTogMC4wLCBkdXJhdGlvbjogMC41LCBzb3VyY2U6IHsgeDogbG9va0F0VGFyZ2V0LnBvc2l0aW9uLngsIHk6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi55IH0sIHRhcmdldDogeyB4OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIDAuNSAqIHdpbmRvdy5pbm5lcldpZHRoKSAvIHdpbmRvdy5vdXRlckhlaWdodCAqIDEwLjAsIHk6IChldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gMC41ICogd2luZG93Lm91dGVySGVpZ2h0KSAvIHdpbmRvdy5vdXRlckhlaWdodCAqIC0xMC4wIH0gfTtcclxuICAgIFxyXG4gICAgICAgIGlmIChhcHAuY2hhcmFjdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFwcC5zZXF1ZW5jZVF1ZXVlLnB1c2goYXBwLnByZXBhcmUoYXBwLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiVG91Y2hFbmRcIikpKTtcclxuICAgICAgICB9Ki9cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGNhbmNlbFwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGUgPT4ge1xyXG4gICAgICAgIGlmIChlLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgYXBwLmlzRGFya01vZGUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC5pc0RhcmtNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=