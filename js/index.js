!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js",n(n.s=1)}([function(e,t,n){var i;e.exports=((i=function(){function e(e){return r.appendChild(e.dom),e}function t(e){for(var t=0;t<r.children.length;t++)r.children[t].style.display=t===e?"block":"none";n=e}var n=0,r=document.createElement("div");r.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",r.addEventListener("click",(function(e){e.preventDefault(),t(++n%r.children.length)}),!1);var a=(performance||Date).now(),s=a,o=0,c=e(new i.Panel("FPS","#0ff","#002")),u=e(new i.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var l=e(new i.Panel("MB","#f08","#201"));return t(0),{REVISION:16,dom:r,addPanel:e,showPanel:t,begin:function(){a=(performance||Date).now()},end:function(){o++;var e=(performance||Date).now();if(u.update(e-a,200),e>s+1e3&&(c.update(1e3*o/(e-s),100),s=e,o=0,l)){var t=performance.memory;l.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){a=this.end()},domElement:r,setMode:t}}).Panel=function(e,t,n){var i=1/0,r=0,a=Math.round,s=a(window.devicePixelRatio||1),o=80*s,c=48*s,u=3*s,l=2*s,h=3*s,d=15*s,f=74*s,p=30*s,m=document.createElement("canvas");m.width=o,m.height=c,m.style.cssText="width:80px;height:48px";var g=m.getContext("2d");return g.font="bold "+9*s+"px Helvetica,Arial,sans-serif",g.textBaseline="top",g.fillStyle=n,g.fillRect(0,0,o,c),g.fillStyle=t,g.fillText(e,u,l),g.fillRect(h,d,f,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(h,d,f,p),{dom:m,update:function(c,v){i=Math.min(i,c),r=Math.max(r,c),g.fillStyle=n,g.globalAlpha=1,g.fillRect(0,0,o,d),g.fillStyle=t,g.fillText(a(c)+" "+e+" ("+a(i)+"-"+a(r)+")",u,l),g.drawImage(m,h+s,d,f-s,p,h,d,f-s,p),g.fillRect(h+f-s,d,s,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(h+f-s,d,s,a((1-c/v)*p))}}},i)},function(e,t,n){"use strict";n.r(t);var i=n(0),r={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},a={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},s=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],o={CSS:{},springs:{}};function c(e,t,n){return Math.min(Math.max(e,t),n)}function u(e,t){return e.indexOf(t)>-1}function l(e,t){return e.apply(null,t)}var h={arr:function(e){return Array.isArray(e)},obj:function(e){return u(Object.prototype.toString.call(e),"Object")},pth:function(e){return h.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||h.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return h.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return h.hex(e)||h.rgb(e)||h.hsl(e)},key:function(e){return!r.hasOwnProperty(e)&&!a.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function d(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function f(e,t){var n=d(e),i=c(h.und(n[0])?1:n[0],.1,100),r=c(h.und(n[1])?100:n[1],.1,100),a=c(h.und(n[2])?10:n[2],.1,100),s=c(h.und(n[3])?0:n[3],.1,100),u=Math.sqrt(r/i),l=a/(2*Math.sqrt(r*i)),f=l<1?u*Math.sqrt(1-l*l):0,p=l<1?(l*u-s)/f:-s+u;function m(e){var n=t?t*e/1e3:e;return n=l<1?Math.exp(-n*l*u)*(1*Math.cos(f*n)+p*Math.sin(f*n)):(1+p*n)*Math.exp(-n*u),0===e||1===e?e:1-n}return t?m:function(){var t=o.springs[e];if(t)return t;for(var n=0,i=0;;)if(1===m(n+=1/6)){if(++i>=16)break}else i=0;var r=n*(1/6)*1e3;return o.springs[e]=r,r}}function p(e){return void 0===e&&(e=10),function(t){return Math.ceil(c(t,1e-6,1)*e)*(1/e)}}var m,g,v=function(){function e(e,t){return 1-3*t+3*e}function t(e,t){return 3*t-6*e}function n(e){return 3*e}function i(i,r,a){return((e(r,a)*i+t(r,a))*i+n(r))*i}function r(i,r,a){return 3*e(r,a)*i*i+2*t(r,a)*i+n(r)}return function(e,t,n,a){if(0<=e&&e<=1&&0<=n&&n<=1){var s=new Float32Array(11);if(e!==t||n!==a)for(var o=0;o<11;++o)s[o]=i(.1*o,e,n);return function(r){return e===t&&n===a||0===r||1===r?r:i(c(r),t,a)}}function c(t){for(var a=0,o=1;10!==o&&s[o]<=t;++o)a+=.1;--o;var c=a+.1*((t-s[o])/(s[o+1]-s[o])),u=r(c,e,n);return u>=.001?function(e,t,n,a){for(var s=0;s<4;++s){var o=r(t,n,a);if(0===o)return t;t-=(i(t,n,a)-e)/o}return t}(t,c,e,n):0===u?c:function(e,t,n,r,a){var s,o,c=0;do{(s=i(o=t+(n-t)/2,r,a)-e)>0?n=o:t=o}while(Math.abs(s)>1e-7&&++c<10);return o}(t,a,a+.1,e,n)}}}(),y=(m={linear:function(){return function(e){return e}}},g={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var n=c(e,1,10),i=c(t,.1,2);return function(e){return 0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-i/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/i)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){g[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(g).forEach((function(e){var t=g[e];m["easeIn"+e]=t,m["easeOut"+e]=function(e,n){return function(i){return 1-t(e,n)(1-i)}},m["easeInOut"+e]=function(e,n){return function(i){return i<.5?t(e,n)(2*i)/2:1-t(e,n)(-2*i+2)/2}},m["easeOutIn"+e]=function(e,n){return function(i){return i<.5?(1-t(e,n)(1-2*i))/2:(t(e,n)(2*i-1)+1)/2}}})),m);function w(e,t){if(h.fnc(e))return e;var n=e.split("(")[0],i=y[n],r=d(e);switch(n){case"spring":return f(e,t);case"cubicBezier":return l(v,r);case"steps":return l(p,r);default:return l(i,r)}}function b(e){try{return document.querySelectorAll(e)}catch(e){return}}function x(e,t){for(var n=e.length,i=arguments.length>=2?arguments[1]:void 0,r=[],a=0;a<n;a++)if(a in e){var s=e[a];t.call(i,s,a,e)&&r.push(s)}return r}function M(e){return e.reduce((function(e,t){return e.concat(h.arr(t)?M(t):t)}),[])}function k(e){return h.arr(e)?e:(h.str(e)&&(e=b(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function I(e,t){return e.some((function(e){return e===t}))}function S(e){var t={};for(var n in e)t[n]=e[n];return t}function T(e,t){var n=S(e);for(var i in e)n[i]=t.hasOwnProperty(i)?t[i]:e[i];return n}function D(e,t){var n=S(e);for(var i in t)n[i]=h.und(e[i])?t[i]:e[i];return n}function L(e){return h.rgb(e)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+n[1]+",1)":t:h.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,i){return t+t+n+n+i+i})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(e):h.hsl(e)?function(e){var t,n,i,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),a=parseInt(r[1],10)/360,s=parseInt(r[2],10)/100,o=parseInt(r[3],10)/100,c=r[4]||1;function u(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(0==s)t=n=i=o;else{var l=o<.5?o*(1+s):o+s-o*s,h=2*o-l;t=u(h,l,a+1/3),n=u(h,l,a),i=u(h,l,a-1/3)}return"rgba("+255*t+","+255*n+","+255*i+","+c+")"}(e):void 0;var t,n}function P(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function A(e,t){return h.fnc(e)?e(t.target,t.id,t.total):e}function C(e,t){return e.getAttribute(t)}function q(e,t,n){if(I([n,"deg","rad","turn"],P(t)))return t;var i=o.CSS[t+n];if(!h.und(i))return i;var r=document.createElement(e.tagName),a=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;a.appendChild(r),r.style.position="absolute",r.style.width=100+n;var s=100/r.offsetWidth;a.removeChild(r);var c=s*parseFloat(t);return o.CSS[t+n]=c,c}function E(e,t,n){if(t in e.style){var i=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=e.style[t]||getComputedStyle(e).getPropertyValue(i)||"0";return n?q(e,r,n):r}}function O(e,t){return h.dom(e)&&!h.inp(e)&&(!h.nil(C(e,t))||h.svg(e)&&e[t])?"attribute":h.dom(e)&&I(s,t)?"transform":h.dom(e)&&"transform"!==t&&E(e,t)?"css":null!=e[t]?"object":void 0}function R(e){if(h.dom(e)){for(var t,n=e.style.transform||"",i=/(\w+)\(([^)]*)\)/g,r=new Map;t=i.exec(n);)r.set(t[1],t[2]);return r}}function j(e,t,n,i){var r=u(t,"scale")?1:0+function(e){return u(e,"translate")||"perspective"===e?"px":u(e,"rotate")||u(e,"skew")?"deg":void 0}(t),a=R(e).get(t)||r;return n&&(n.transforms.list.set(t,a),n.transforms.last=t),i?q(e,a,i):a}function W(e,t,n,i){switch(O(e,t)){case"transform":return j(e,t,i,n);case"css":return E(e,t,n);case"attribute":return C(e,t);default:return e[t]||0}}function B(e,t){var n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;var i=P(e)||0,r=parseFloat(t),a=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return r+a+i;case"-":return r-a+i;case"*":return r*a+i}}function H(e,t){if(h.col(e))return L(e);if(/\s/g.test(e))return e;var n=P(e),i=n?e.substr(0,e.length-n.length):e;return t?i+t:i}function $(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function N(e){for(var t,n=e.points,i=0,r=0;r<n.numberOfItems;r++){var a=n.getItem(r);r>0&&(i+=$(t,a)),t=a}return i}function Q(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*C(e,"r")}(e);case"rect":return function(e){return 2*C(e,"width")+2*C(e,"height")}(e);case"line":return function(e){return $({x:C(e,"x1"),y:C(e,"y1")},{x:C(e,"x2"),y:C(e,"y2")})}(e);case"polyline":return N(e);case"polygon":return function(e){var t=e.points;return N(e)+$(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function z(e,t){var n=t||{},i=n.el||function(e){for(var t=e.parentNode;h.svg(t)&&h.svg(t.parentNode);)t=t.parentNode;return t}(e),r=i.getBoundingClientRect(),a=C(i,"viewBox"),s=r.width,o=r.height,c=n.viewBox||(a?a.split(" "):[0,0,s,o]);return{el:i,viewBox:c,x:c[0]/1,y:c[1]/1,w:s,h:o,vW:c[2],vH:c[3]}}function F(e,t,n){function i(n){void 0===n&&(n=0);var i=t+n>=1?t+n:0;return e.el.getPointAtLength(i)}var r=z(e.el,e.svg),a=i(),s=i(-1),o=i(1),c=n?1:r.w/r.vW,u=n?1:r.h/r.vH;switch(e.property){case"x":return(a.x-r.x)*c;case"y":return(a.y-r.y)*u;case"angle":return 180*Math.atan2(o.y-s.y,o.x-s.x)/Math.PI}}function U(e,t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,i=H(h.pth(e)?e.totalLength:e,t)+"";return{original:i,numbers:i.match(n)?i.match(n).map(Number):[0],strings:h.str(e)||t?i.split(n):[]}}function G(e){return x(e?M(h.arr(e)?e.map(k):k(e)):[],(function(e,t,n){return n.indexOf(e)===t}))}function _(e){var t=G(e);return t.map((function(e,n){return{target:e,id:n,total:t.length,transforms:{list:R(e)}}}))}function V(e,t){var n=S(t);if(/^spring/.test(n.easing)&&(n.duration=f(n.easing)),h.arr(e)){var i=e.length;2===i&&!h.obj(e[0])?e={value:e}:h.fnc(t.duration)||(n.duration=t.duration/i)}var r=h.arr(e)?e:[e];return r.map((function(e,n){var i=h.obj(e)&&!h.pth(e)?e:{value:e};return h.und(i.delay)&&(i.delay=n?0:t.delay),h.und(i.endDelay)&&(i.endDelay=n===r.length-1?t.endDelay:0),i})).map((function(e){return D(e,n)}))}function Z(e,t){var n=[],i=t.keyframes;for(var r in i&&(t=D(function(e){for(var t=x(M(e.map((function(e){return Object.keys(e)}))),(function(e){return h.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),n={},i=function(i){var r=t[i];n[r]=e.map((function(e){var t={};for(var n in e)h.key(n)?n==r&&(t.value=e[n]):t[n]=e[n];return t}))},r=0;r<t.length;r++)i(r);return n}(i),t)),t)h.key(r)&&n.push({name:r,tweens:V(t[r],e)});return n}function J(e,t){var n;return e.tweens.map((function(i){var r=function(e,t){var n={};for(var i in e){var r=A(e[i],t);h.arr(r)&&1===(r=r.map((function(e){return A(e,t)}))).length&&(r=r[0]),n[i]=r}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(i,t),a=r.value,s=h.arr(a)?a[1]:a,o=P(s),c=W(t.target,e.name,o,t),u=n?n.to.original:c,l=h.arr(a)?a[0]:u,d=P(l)||P(c),f=o||d;return h.und(s)&&(s=u),r.from=U(l,f),r.to=U(B(s,l),f),r.start=n?n.end:0,r.end=r.start+r.delay+r.duration+r.endDelay,r.easing=w(r.easing,r.duration),r.isPath=h.pth(a),r.isPathTargetInsideSVG=r.isPath&&h.svg(t.target),r.isColor=h.col(r.from.original),r.isColor&&(r.round=1),n=r,r}))}var Y={css:function(e,t,n){return e.style[t]=n},attribute:function(e,t,n){return e.setAttribute(t,n)},object:function(e,t,n){return e[t]=n},transform:function(e,t,n,i,r){if(i.list.set(t,n),t===i.last||r){var a="";i.list.forEach((function(e,t){a+=t+"("+e+") "})),e.style.transform=a}}};function X(e,t){_(e).forEach((function(e){for(var n in t){var i=A(t[n],e),r=e.target,a=P(i),s=W(r,n,a,e),o=B(H(i,a||P(s)),s),c=O(r,n);Y[c](r,n,o,e.transforms,!0)}}))}function K(e,t){return x(M(e.map((function(e){return t.map((function(t){return function(e,t){var n=O(e.target,t.name);if(n){var i=J(t,e),r=i[i.length-1];return{type:n,property:t.name,animatable:e,tweens:i,duration:r.end,delay:i[0].delay,endDelay:r.endDelay}}}(e,t)}))}))),(function(e){return!h.und(e)}))}function ee(e,t){var n=e.length,i=function(e){return e.timelineOffset?e.timelineOffset:0},r={};return r.duration=n?Math.max.apply(Math,e.map((function(e){return i(e)+e.duration}))):t.duration,r.delay=n?Math.min.apply(Math,e.map((function(e){return i(e)+e.delay}))):t.delay,r.endDelay=n?r.duration-Math.max.apply(Math,e.map((function(e){return i(e)+e.duration-e.endDelay}))):t.endDelay,r}var te=0;var ne=[],ie=function(){var e;function t(n){for(var i=ne.length,r=0;r<i;){var a=ne[r];a.paused?(ne.splice(r,1),i--):(a.tick(n),r++)}e=r>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){ae.suspendWhenDocumentHidden&&(re()?e=cancelAnimationFrame(e):(ne.forEach((function(e){return e._onDocumentVisibility()})),ie()))})),function(){e||re()&&ae.suspendWhenDocumentHidden||!(ne.length>0)||(e=requestAnimationFrame(t))}}();function re(){return!!document&&document.hidden}function ae(e){void 0===e&&(e={});var t,n=0,i=0,s=0,o=0,u=null;function l(e){var t=window.Promise&&new Promise((function(e){return u=e}));return e.finished=t,t}var h=function(e){var t=T(r,e),n=T(a,e),i=Z(n,e),s=_(e.targets),o=K(s,i),c=ee(o,n),u=te;return te++,D(t,{id:u,children:[],animatables:s,animations:o,duration:c.duration,delay:c.delay,endDelay:c.endDelay})}(e);l(h);function d(){var e=h.direction;"alternate"!==e&&(h.direction="normal"!==e?"normal":"reverse"),h.reversed=!h.reversed,t.forEach((function(e){return e.reversed=h.reversed}))}function f(e){return h.reversed?h.duration-e:e}function p(){n=0,i=f(h.currentTime)*(1/ae.speed)}function m(e,t){t&&t.seek(e-t.timelineOffset)}function g(e){for(var t=0,n=h.animations,i=n.length;t<i;){var r=n[t],a=r.animatable,s=r.tweens,o=s.length-1,u=s[o];o&&(u=x(s,(function(t){return e<t.end}))[0]||u);for(var l=c(e-u.start-u.delay,0,u.duration)/u.duration,d=isNaN(l)?1:u.easing(l),f=u.to.strings,p=u.round,m=[],g=u.to.numbers.length,v=void 0,y=0;y<g;y++){var w=void 0,b=u.to.numbers[y],M=u.from.numbers[y]||0;w=u.isPath?F(u.value,d*b,u.isPathTargetInsideSVG):M+d*(b-M),p&&(u.isColor&&y>2||(w=Math.round(w*p)/p)),m.push(w)}var k=f.length;if(k){v=f[0];for(var I=0;I<k;I++){f[I];var S=f[I+1],T=m[I];isNaN(T)||(v+=S?T+S:T+" ")}}else v=m[0];Y[r.type](a.target,r.property,v,a.transforms),r.currentValue=v,t++}}function v(e){h[e]&&!h.passThrough&&h[e](h)}function y(e){var r=h.duration,a=h.delay,p=r-h.endDelay,y=f(e);h.progress=c(y/r*100,0,100),h.reversePlayback=y<h.currentTime,t&&function(e){if(h.reversePlayback)for(var n=o;n--;)m(e,t[n]);else for(var i=0;i<o;i++)m(e,t[i])}(y),!h.began&&h.currentTime>0&&(h.began=!0,v("begin")),!h.loopBegan&&h.currentTime>0&&(h.loopBegan=!0,v("loopBegin")),y<=a&&0!==h.currentTime&&g(0),(y>=p&&h.currentTime!==r||!r)&&g(r),y>a&&y<p?(h.changeBegan||(h.changeBegan=!0,h.changeCompleted=!1,v("changeBegin")),v("change"),g(y)):h.changeBegan&&(h.changeCompleted=!0,h.changeBegan=!1,v("changeComplete")),h.currentTime=c(y,0,r),h.began&&v("update"),e>=r&&(i=0,h.remaining&&!0!==h.remaining&&h.remaining--,h.remaining?(n=s,v("loopComplete"),h.loopBegan=!1,"alternate"===h.direction&&d()):(h.paused=!0,h.completed||(h.completed=!0,v("loopComplete"),v("complete"),!h.passThrough&&"Promise"in window&&(u(),l(h)))))}return h.reset=function(){var e=h.direction;h.passThrough=!1,h.currentTime=0,h.progress=0,h.paused=!0,h.began=!1,h.loopBegan=!1,h.changeBegan=!1,h.completed=!1,h.changeCompleted=!1,h.reversePlayback=!1,h.reversed="reverse"===e,h.remaining=h.loop,t=h.children;for(var n=o=t.length;n--;)h.children[n].reset();(h.reversed&&!0!==h.loop||"alternate"===e&&1===h.loop)&&h.remaining++,g(h.reversed?h.duration:0)},h._onDocumentVisibility=p,h.set=function(e,t){return X(e,t),h},h.tick=function(e){s=e,n||(n=s),y((s+(i-n))*ae.speed)},h.seek=function(e){y(f(e))},h.pause=function(){h.paused=!0,p()},h.play=function(){h.paused&&(h.completed&&h.reset(),h.paused=!1,ne.push(h),p(),ie())},h.reverse=function(){d(),h.completed=!h.reversed,p()},h.restart=function(){h.reset(),h.play()},h.remove=function(e){oe(G(e),h)},h.reset(),h.autoplay&&h.play(),h}function se(e,t){for(var n=t.length;n--;)I(e,t[n].animatable.target)&&t.splice(n,1)}function oe(e,t){var n=t.animations,i=t.children;se(e,n);for(var r=i.length;r--;){var a=i[r],s=a.animations;se(e,s),s.length||a.children.length||i.splice(r,1)}n.length||i.length||t.pause()}ae.version="3.2.1",ae.speed=1,ae.suspendWhenDocumentHidden=!0,ae.running=ne,ae.remove=function(e){for(var t=G(e),n=ne.length;n--;){oe(t,ne[n])}},ae.get=W,ae.set=X,ae.convertPx=q,ae.path=function(e,t){var n=h.str(e)?b(e)[0]:e,i=t||100;return function(e){return{property:e,el:n,svg:z(n),totalLength:Q(n)*(i/100)}}},ae.setDashoffset=function(e){var t=Q(e);return e.setAttribute("stroke-dasharray",t),t},ae.stagger=function(e,t){void 0===t&&(t={});var n=t.direction||"normal",i=t.easing?w(t.easing):null,r=t.grid,a=t.axis,s=t.from||0,o="first"===s,c="center"===s,u="last"===s,l=h.arr(e),d=l?parseFloat(e[0]):parseFloat(e),f=l?parseFloat(e[1]):0,p=P(l?e[1]:e)||0,m=t.start||0+(l?d:0),g=[],v=0;return function(e,t,h){if(o&&(s=0),c&&(s=(h-1)/2),u&&(s=h-1),!g.length){for(var y=0;y<h;y++){if(r){var w=c?(r[0]-1)/2:s%r[0],b=c?(r[1]-1)/2:Math.floor(s/r[0]),x=w-y%r[0],M=b-Math.floor(y/r[0]),k=Math.sqrt(x*x+M*M);"x"===a&&(k=-x),"y"===a&&(k=-M),g.push(k)}else g.push(Math.abs(s-y));v=Math.max.apply(Math,g)}i&&(g=g.map((function(e){return i(e/v)*v}))),"reverse"===n&&(g=g.map((function(e){return a?e<0?-1*e:-e:Math.abs(v-e)})))}return m+(l?(f-d)/v:d)*(Math.round(100*g[t])/100)+p}},ae.timeline=function(e){void 0===e&&(e={});var t=ae(e);return t.duration=0,t.add=function(n,i){var r=ne.indexOf(t),s=t.children;function o(e){e.passThrough=!0}r>-1&&ne.splice(r,1);for(var c=0;c<s.length;c++)o(s[c]);var u=D(n,T(a,e));u.targets=u.targets||e.targets;var l=t.duration;u.autoplay=!1,u.direction=t.direction,u.timelineOffset=h.und(i)?l:B(i,l),o(t),t.seek(u.timelineOffset);var d=ae(u);o(d),s.push(d);var f=ee(s,e);return t.delay=f.delay,t.endDelay=f.endDelay,t.duration=f.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},ae.easing=w,ae.penner=y,ae.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};var ce=ae;firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();const ue="debug"===decodeURIComponent(window.location.hash.substring(1));let le=firebase.database(),he=firebase.storage();const de=new i;de.domElement.style.position="fixed",de.domElement.style.top="auto",de.domElement.style.bottom="0",de.domElement.style.left="auto",de.domElement.style.right="0",ue||de.domElement.classList.add("is-hidden");let fe=0;let pe=0;let me=0;window.addEventListener("load",e=>{"serviceWorker"in navigator&&(navigator.serviceWorker.register("sw.js").then(e=>{e.onupdatefound=function(){e.update()}}).catch(e=>{console.error(e.code,e.message)}),navigator.serviceWorker.addEventListener("message",e=>{null!==navigator.serviceWorker.controller&&"command"in e.data&&"caches"===e.data.command&&navigator.serviceWorker.controller.postMessage({command:"clear",caches:e.data.caches})}));var t=Vue.createApp({data:()=>({isDebug:ue,isDarkMode:!1,isMuted:!0,isLoading:!1,isUpdating:!1,isLocating:!1,isRevealed:!1,isOverlayed:!1,isBlinded:!1,isPopup:!1,isExpanded:!1,isLearning:!1,isAnimating:!1,isHangingOn:!1,isSubmitting:!1,isDiscovering:!1,isStared:!1,isLocked:!1,canvasSize:{width:0,height:0,deviceWidth:0,deviceHeight:0,alternative:{width:0,height:0,deviceWidth:0,deviceHeight:0}},cachedImages:{},cachedSprites:[],alternativeCachedSprites:[],animationQueue:[],elapsed:0,map:null,layer:null,mode:null,queryQueue:[],queryCache:{},cachedTracks:{},cachedDocuments:[],documentQueue:[],sequenceQueue:[],progress:null,user:null,input:"",animatedInputLength:0,maxInputLength:100,inputHasError:!1,messages:[],maxMessages:10,word:null,recentWords:[],tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,stars:-1,animatedStars:0,steps:0,isStepping:!1,animatedSteps:0,deviceMotion:null,stats:[],screenshot:null,notifications:[],notificationHeight:0,animatedNotificationHeight:0,inputHeight:0,animatedInputHeight:0,recentImages:[],backgroundImagesQueue:[],backgroundImages:[],preloadImages:[],isUploading:!1,animations:null,currentAnimations:[],blendShapeAnimations:[],insetTop:0,insetBottom:0,text:[],popupTextHeight:0,animatedPopupTextHeight:0,tickerWidth:0,animatedTickerWidth:0,leaderboard:[],leaderboardHeight:0,animatedLeaderboardHeight:0,message:null,states:{},character:null,alternative:null,wordDictionary:{},reverseWordDictionary:{},attributes:["名前","所属","時間","場所","する事","生き物","食べ物","飲み物","聞くもの","見るもの","読むもの","使う物","身につけるもの","乗り物","部位","病気"],chars:[]}),watch:{isMuted(e){try{localStorage.setItem("character",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("character")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},deep:!0},tickerWidth(e){const t=this,n={width:this.animatedTickerWidth};ce({targets:n,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=n.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll("#app>.background>div");if(e.length>1){const t=e.length-1,n=15;let i=0,r=null;for(const a of e){const s=[];for(let t=0;t<e.length;t++)t===i?s.push({visibility:"visible"}):s.push({visibility:"hidden"});const o=a.animate(s,{fill:"forwards",easing:"steps("+t+")",duration:1e3/n*e.length,iterations:1/0});null===r?r=o.startTime:o.startTime=r,i++}}})},deep:!0},text:{handler:()=>{t.$nextTick(()=>{t.isPopup&&(t.popupTextHeight=t.$refs.popupText.getBoundingClientRect().height)})},deep:!0},popupTextHeight(e){const t={height:this.animatedPopupTextHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedPopupTextHeight=t.height}})},notifications:{handler:()=>{t.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationHeight(e){const t={height:this.animatedNotificationHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationHeight=t.height}})},leaderboard:{handler:()=>{t.$nextTick(()=>{t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height})},deep:!0},leaderboardHeight(e){const t={height:this.animatedLeaderboardHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedLeaderboardHeight=t.height}})},inputHeight(e){const t={height:this.animatedInputHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedInputHeight=t.height}})},stars(e){const t={count:this.animatedStars};ce({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},steps(e){const t={count:this.animatedSteps};ce({targets:t,count:e,round:100,duration:500,easing:"linear",update:()=>{this.animatedSteps=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};ce({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0},chars:{handler:()=>{const e=[];for(const n of t.chars)for(const t of n)t.count>0&&e.push({set:t.set,count:t.count,timestamp:t.timestamp,checksum:[...String(t.timestamp)].reduce((e,t)=>e+t,0)+[...String(t.count)].reduce((e,t)=>e+t,0)});try{localStorage.setItem("fragments",JSON.stringify(e))}catch(e){localStorage.removeItem("fragments")}},deep:!0}},methods:{signIn:function(e){if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}le.ref("wonderland/users/"+e.user.uid).transaction((function(e){return e?(e.name=data.displayName,e.timestamp=timestamp):e={name:data.displayName,timestamp:timestamp},e}));try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,idToken:t.idToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}le.ref("wonderland/users/"+e.user.uid).transaction((function(e){return e?(e.name=data.displayName,e.timestamp=timestamp):e={name:data.displayName,timestamp:timestamp},e}));try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;const n=Math.floor(new Date/1e3);for(const t of e.user.providerData){const i=t.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:i}).catch((function(e){console.error(e.code,e.message)})),le.ref("wonderland/users/"+e.user.uid).transaction((function(i){return i?(i.name=t.displayName,i.link="https://twitter.com/"+e.additionalUserInfo.username,i.timestamp=n):i={name:t.displayName,link:"https://twitter.com/"+e.additionalUserInfo.username,timestamp:n},i}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),"serviceWorker"in navigator&&null!==navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({command:"caches"})}).catch(e=>{console.error(e.code,e.message)})},refresh:function(e){this.update(!0)},update:async function(e=!1){this.isLoading=!0;const t=this,n=this.map.getCenter(),i=await this.fetch(e,n.latitude,n.longitude);if(e&&Object.keys(this.cachedTracks).forEach((function(e){for(const n of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(n);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e]})),null!==i){const e=Math.floor(new Date/1e3);let n=!1;for(const r in i)for(const a of i[r]){let i=null;for(const e in this.cachedTracks)if(a.id===this.cachedTracks[e].id){i=e;break}if(null===i){const i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(a.location.latitude,a.location.longitude),{title:a.name,subTitle:this.formatTime(e-a.timestamp),icon:"/images/Marker-Star.svg"});this.setImage(i,a.user),this.cachedTracks[i.id]=a,this.cachedTracks[i.id].pushpin=i,this.cachedTracks[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async e=>{t.mode=this.cachedTracks[e.target.id],t.isRevealed=!0}),Microsoft.Maps.Events.addHandler(i,"dblclick",e=>{window.location.hash=t.cachedTracks[e.target.id].id})],this.map.entities.push(i),n=!0}else if(a.timestamp>this.cachedTracks[i].timestamp){const t=this.cachedTracks[i].pushpin,r=this.cachedTracks[i].handlers;t.setLocation(new Microsoft.Maps.Location(a.location.latitude,a.location.longitude)),t.setOptions({title:a.name,subTitle:this.formatTime(e-a.timestamp)}),this.setImage(t,a.user),this.cachedTracks[i]=a,this.cachedTracks[i].pushpin=t,this.cachedTracks[i].handlers=r,n=!0}}const r=[];for(const e in i)for(const t of i[e])r.push(t.id);if(Object.keys(this.cachedTracks).forEach((function(e){if(!r.some(n=>n===t.cachedTracks[e].id)){for(const n of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(n);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e],n=!0}})),n){const e=10;this.isUpdating=!0;const t=await new Promise(e=>{const t={},n=[];for(const e in i)for(const n of i[e])if(n.user.id in t)t[n.user.id].count++;else{const e=Object.assign({},n.user);e.count=1,t[n.user.id]=e}for(const e in t)n.push(t[e]);n.sort((e,t)=>t.count-e.count),e(n)});this.leaderboard.splice(0);for(const e of t)this.leaderboard.push(e);try{const t=await new Promise(t=>{const n=Math.pow(10,-6);let r=[],a=[],s={},o={},c=[],u=n;for(const e in i){let t=[],n=[];for(const r of i[e])t.push(r.name),n.includes(r.name)||(r.name in s?s[r.name]+=1:s[r.name]=1,n.push(r.name));r.push(t)}for(const e in s)s[e]=Math.log(r.length/(s[e]+n));for(const e of r){let t={};for(const n of e)n in t?t[n]+=1:t[n]=1;for(const n in t)t[n]/=e.length,n in o||(o[n]=0);a.push(t)}for(const e in o)for(const t of a)if(e in t){const n=t[e]*s[e];n>o[e]&&(o[e]=n)}for(const e in o)e.length>1&&"..."!=e&&c.push({term:e,value:o[e]});c.sort((e,t)=>t.value-e.value),c.length>e&&c.splice(e);for(const e of c)e.value>u&&(u=e.value);for(const e of c)e.value/=u;c.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),t([r,c])});this.cachedDocuments.splice(0),this.tags.splice(0);for(const e of t[0])this.cachedDocuments.push(e);for(let e=0;e<t[1].length;e++)this.tags.push({index:e,name:t[1][e].term,score:t[1][e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isUpdating=!1}}this.isLoading=!1},fetch:async function(e,t,n){const i=this,r=this.encodeGeohash(t,n,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]);let a=[r];const s=[],o={};let c=[],u=this.decodeGeohash(r);const l=Math.floor(new Date/1e3),h={};if(c.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude),new Microsoft.Maps.Location(u.topright.latitude,u.topright.longitude),new Microsoft.Maps.Location(u.bottomright.latitude,u.bottomright.longitude),new Microsoft.Maps.Location(u.bottomleft.latitude,u.bottomleft.longitude),new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1})),r.length>2){const e=this.getNeighbors(r);for(const t in e)a.push(e[t]),u=this.decodeGeohash(e[t]),c.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude),new Microsoft.Maps.Location(u.topright.latitude,u.topright.longitude),new Microsoft.Maps.Location(u.bottomright.latitude,u.bottomright.longitude),new Microsoft.Maps.Location(u.bottomleft.latitude,u.bottomleft.longitude),new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}))}this.layer.setPrimitives(c),this.queryQueue.push(r);for(const t of a){if(!e&&t in this.queryCache&&l-this.queryCache[t].timestamp<60){for(const e of this.queryCache[t].data)s.push(e),t in o?o[t].push(e):o[t]=[e];continue}const n=await le.ref("wonderland/tracks").orderByChild("key").limitToLast(50).startAt(t).endAt(t.padEnd(12,"z")+"").once("value");if(h[t]={timestamp:l,data:[]},n.exists()){const e=n.val();for(const n in e)e[n].id=n,s.push(e[n]),h[t].data.push(e[n]),t in o?o[t].push(e[n]):o[t]=[e[n]]}}if(this.queryQueue.shift(),this.queryQueue.length>0)return null;for(const e in h)this.queryCache[e]=h[e];Object.keys(this.queryCache).forEach((function(e){l-i.queryCache[e].timestamp>=60&&delete i.queryCache[e]}));const d=this.take(s.sort((e,t)=>t.timestamp-e.timestamp),100);return Object.keys(o).forEach((function(e){for(let t=o[e].length-1;t>0;t--)d.includes(o[e][t])||o[e].splice(t,1);0===o[e].length&&delete o[e]})),o},startPedometer:async function(){const e=this;if(DeviceMotionEvent.requestPermission){if("granted"!==await DeviceMotionEvent.requestPermission())return}this.deviceMotion=t=>{if(t.accelerationIncludingGravity){const a=t.accelerationIncludingGravity,s=Math.sqrt(a.x*a.x+a.y*a.y+a.z*a.z);if(e.isStepping){if(s<9.8){const t=new Date,a=t.getTime()-6048e5,s=[];e.steps++,e.isStepping=!1;for(let n=e.stats.length-1;n>0;n--)e.stats[n].date.getTime()<=a?e.stats.splice(n,1):e.stats[n].date.getFullYear()!==t.getFullYear()&&e.stats[n].date.getMonth()!==t.getMonth()&&e.stats[n].date.getDate()!==t.getDate()&&s.push({date:e.stats[n].date.toISOString(),steps:e.stats[n].steps});s.unshift({date:new Date(t.getFullYear(),t.getMonth(),t.getDate(),0,0,0).toISOString(),steps:e.steps});try{localStorage.setItem("stats",JSON.stringify(s))}catch(e){localStorage.removeItem("stats")}if(e.steps%10==0){const t=[];let a=0,s=Number.MAX_SAFE_INTEGER;function n(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}for(const n of e.chars){let e=0;for(const i of n)t.push({path:{row:a,column:e},data:i}),e++,i.count<s&&(s=i.count);a++}for(let e=t.length-1;e>0;e--)t[e].data.count>s&&t.splice(e,1);const o=t[(i=0,r=t.length,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i)].path,c=[];e.chars[o.row][o.column].count++,e.chars[o.row][o.column].timestamp=Math.floor(new Date/1e3);for(const t of this.prepare(this.character.sequences.filter(e=>"Capture"===e.name),e.chars[o.row][o.column].set[0],this.character.sequences))"Message"===t.type?c.push({type:t.type,speed:t.speed,duration:t.duration,character:this.character,text:n(t.text,e.chars[o.row][o.column].set[0])}):(t.character=this.character,c.push(t));c.length>0&&this.sequenceQueue.push(c)}}}else s>12&&(e.isStepping=!0)}var i,r},window.addEventListener("devicemotion",this.deviceMotion,!0)},stopPedometer:function(){window.removeEventListener("devicemotion",this.deviceMotion,!0),this.deviceMotion=null},locate:async function(e){if("permissions"in navigator){const e=await navigator.permissions.query({name:"geolocation"});if("granted"==e.state||"prompt"==e.state){const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}}else{const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}},send:async function(e){if(this.isDebug)if(this.input.length>0){let e=[],t=[];for(const n of this.input.split(/\s/))this.backgroundImages.some(e=>e.id===n)?e.push(n):t.push(n);if(e.length>0&&t.length>0){for(const n of e)le.ref("wonderland/images/"+n).transaction((function(e){return e.tags=t,e}));this.isLearning=!1}else if(this.input.length<=this.maxInputLength){const e=this.map.getCenter();this.learn({name:this.input,location:{latitude:e.latitude,longitude:e.longitude}}),this.input="",this.isLearning=!1}}else for(const e of this.backgroundImages){this.input=e.id;break}else if(this.input.length>0&&this.input.length<=this.maxInputLength){const e=this.map.getCenter();this.learn({name:this.input,location:{latitude:e.latitude,longitude:e.longitude}}),this.input="",this.isLearning=!1}else this.shake(this.$refs.input)},setImage:async function(e,t,n=!1){if("image"in t){let n;try{n=await new Promise(async(e,n)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{n(e)},t.image.startsWith("gs://")?i.src=await he.refFromURL(t.image).getDownloadURL():(i.crossOrigin="Anonymous",i.src=t.image)})}catch(t){return e.setOptions({icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                            <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                                <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                    <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                                </g>\n                                <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                    <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                    <g transform="matrix(0.410574,0,0,0.410574,34.0498,26.7694)">\n                                        <path d="M0,-7.29C-0.311,-8.247 -1.138,-8.944 -2.133,-9.089L-9.21,-10.117L-12.375,-16.529C-12.819,-17.432 -13.738,-18.003 -14.744,-18.003C-15.75,-18.003 -16.67,-17.432 -17.114,-16.53L-20.279,-10.117L-27.355,-9.089C-28.352,-8.944 -29.179,-8.247 -29.49,-7.29C-29.801,-6.333 -29.541,-5.283 -28.82,-4.581L-23.7,0.41L-24.908,7.459C-25.078,8.45 -24.672,9.452 -23.857,10.043C-23.043,10.635 -21.965,10.713 -21.074,10.244L-14.744,6.917L-8.415,10.244C-8.028,10.447 -7.606,10.548 -7.186,10.548C-6.638,10.548 -6.092,10.377 -5.632,10.043C-4.818,9.452 -4.41,8.45 -4.58,7.458L-5.789,0.41L-0.668,-4.581C0.052,-5.283 0.312,-6.333 0,-7.29" style="fill:white;fill-rule:nonzero;"/>\n                                    </g>\n                                </g>\n                            </svg>'}),void console.error(t)}const i=document.createElement("canvas"),r=i.getContext("2d");i.width=n.width,i.height=n.height,r.drawImage(n,0,0,n.width,n.height);const a='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                        <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                        <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                            <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                            </g>\n                            <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                <clipPath id="_clip1">\n                                    <circle cx="27.996" cy="25.239" r="12.214"/>\n                                </clipPath>\n                                <g clip-path="url(#_clip1)">\n                                    <g transform="matrix(0.791667,0,0,0.791667,5.83249,5.2582)">\n                                        <circle cx="27.996" cy="25.239" r="12.214" style="fill:white;"/>\n                                        <clipPath id="_clip2">\n                                            <circle cx="27.996" cy="25.239" r="12.214"/>\n                                        </clipPath>\n                                        <g clip-path="url(#_clip2)">\n                                            <g id="Background" transform="matrix(0.023856,0,0,0.023856,-2.53964,-5.29658)">\n                                                <use xlink:href="#_Image3" x="767" y="767" width="1026px" height="1026px"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <defs>\n                                <image id="_Image3" width="1026px" height="1026px" xlink:href="'+i.toDataURL()+'"/>\n                            </defs>\n                        </svg>';e.setOptions({icon:a})}},change:function(e){this.input.length<=this.maxInputLength?this.inputHasError=!1:this.inputHasError=!0},upload:async function(e){function t(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,n=e.length;t<n;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")}const n=this,i=he.ref(),r=[],a=[];for(const t of e.target.files)r.push(t);this.isUploading=!0;for(const e of r.sort((e,t)=>e.name>t.name?1:e.name<t.name?-1:0)){const s=i.child("images/"+t()).put(e);try{await new Promise((function(e,t){s.on("state_changed",(function(e){n.progress=e.bytesTransferred/e.totalBytes/r.length+a.length/r.length}),(function(e){t(e)}),(function(){e()}))}))}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}a.push(s.snapshot.ref.fullPath)}le.ref("wonderland/images").push({paths:a,timestamp:Math.floor(new Date/1e3)}),this.progress=null,this.isUploading=!1},learn:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}const n=[],i=[];if("attributes"in e)for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}));else{const t=await le.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).once("value");if(t.exists()){const e=t.val();for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}))}else for(const e of this.attributes)i.push({name:e,value:!1})}this.word={name:e.name,attributes:i},"location"in e&&(this.word.location=e.location),"user"in e&&(this.word.user=e.user);for(const i of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===i.type?n.push({type:i.type,speed:i.speed,duration:i.duration,text:t(i.text,e.name)}):n.push(i);n.length>0&&this.sequenceQueue.push(n)},check:function(e){for(const t of this.word.attributes)t===e.target.dataset.attribute&&(t.value=e.target.checked)},share:async function(e){const t=this,n="location"in e?e.location:this.map.getCenter(),i=this.encodeGeohash(n.latitude,n.longitude),r={id:this.user.uid,name:this.user.displayName,image:this.user.photoURL},a=Math.floor(new Date/1e3);if(e.name in this.wordDictionary&&delete this.wordDictionary[e.name],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.name)&&delete this.reverseWordDictionary[t]}),this.isSubmitting=!0,this.user.providerData[0].providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID){const e=await le.ref(`wonderland/users/${this.user.uid}/link`).once("value");e.exists()&&(r.link=e.val())}le.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).transaction((function(t){if(!t){t={attributes:{},timestamp:a};for(const n of e.attributes)n.value?t.attributes[n.name]=a:t.attributes[n.name]=0;return"user"in e&&(t.user={id:e.user.id,name:e.user.name,image:e.user.image}),t}{let n=!1;for(const i of e.attributes){if(!(i.name in t.attributes)){n=!0;break}if(t.attributes[i.name]>0){if(!i.value){n=!0;break}}else if(i.value){n=!0;break}}if(n){let n=!0;const i={attributes:{}};for(const r of e.attributes)r.value?(r.name in t.attributes&&t.attributes[r.name]>0?i.attributes[r.name]=t.attributes[r.name]:i.attributes[r.name]=a-1,n=!1):i.attributes[r.name]=0;return n?null:(i.timestamp=a,i)}}}),(async function(s,o,c){if(o)if(c.exists()){const s=c.val(),o=[];for(const e in s.attributes)"number"==typeof s.attributes[e]&&s.attributes[e]>0&&t.attributes.includes(e)&&o.push(s.attributes[e]);if(1===o.length&&o[0]===s.timestamp){function u(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}le.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return(e||0)+1}));for(const n of t.prepare(t.character.sequences.filter(e=>"Learned"===e.name)))"Message"===n.type&&t.notify({text:u(n.text,e.name),accent:t.character.accent,image:t.character.image});t.isStared=!0,window.setTimeout(()=>{t.isStared=!1},3e3),t.isMuted||t.$refs.twinkle.play()}"user"in e==!1||e.user.id===t.user.uid?le.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(o){const c={};o?(o.key=`${i}${a}`,o.location={latitude:n.latitude,longitude:n.longitude},o.geohash=i,o.timestamp=a):o={key:`${i}${a}`,name:e.name,location:{latitude:n.latitude,longitude:n.longitude},geohash:i,user:r,timestamp:a};for(const e in s.attributes)t.attributes.includes(e)&&(c[e]=s.attributes[e]);return o.attributes=c,o}),(function(e,n,i){n?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}else le.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return e&&e>1?e-1:null})),le.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(e){return null}),(function(e,n,i){n?i.exists()||t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1}));else s?(t.notify({text:s.message,accent:t.character.accent,image:t.character.image}),console.error(s),t.isSubmitting=!1):"user"in e==!1||e.user.id===t.user.uid?le.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(t){if(t){t.key=`${i}${a}`,t.location={latitude:n.latitude,longitude:n.longitude},t.geohash=i,t.user=r,t.timestamp=a;for(const n of e.attributes)n.value?t.attributes[n.name]=a-1:t.attributes[n.name]=0}else{t={key:`${i}${a}`,name:e.name,location:{latitude:n.latitude,longitude:n.longitude},geohash:i,attributes:{},user:r,timestamp:a};for(const n of e.attributes)n.value?t.attributes[n.name]=a:t.attributes[n.name]=0}return t}),(function(e,n,i){n?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}))},next:async function(e,t,n=50){let i;if(i=null===t?await le.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().limitToFirst(n+1).once("value"):await le.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(n+1).once("value"),"words"in this.mode&&i.exists()){const e=i.val();null!==this.mode.words&&this.mode.words.length>0&&this.mode.indexes.push(this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes});this.mode.words.length===n+1?this.mode.next=this.mode.words.pop():this.mode.next=null}},previous:async function(e,t,n=50){let i=await le.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(n).once("value");if("words"in this.mode&&i.exists()){const e=i.val();null!==this.mode.words&&this.mode.words.length>0&&(this.mode.next=this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes})}},discover:async function(){const e=this,t=[],n={},i=[];for(const e of this.recentWords)this.user.uid!==e.user.id&&(t.push(e),n[e.name]=e);for(const e in this.cachedTracks)this.user.uid!==this.cachedTracks[e].user.id&&this.cachedTracks[e].name in n==!1&&t.push(this.cachedTracks[e]);this.isDiscovering=!0;for(const n of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(t))try{if(null!==await new Promise((t,i)=>{le.ref("wonderland/users/"+e.user.uid+"/dictionary/words/"+n.name).transaction((function(e){if(!e)return e}),(function(e,n,r){n?t(r):e?i(e):t(null)}))})){function r(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),n.name,this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:r(e.text,n.name)}):(e.character=this.character.alternative,i.push(e));return i.length>0&&this.sequenceQueue.push(i),this.learn({name:n.name,attributes:n.attributes,location:n.location,user:n.user}),void this.map.setView({center:new Microsoft.Maps.Location(n.location.latitude,n.location.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})}}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),"",this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:e.text}):(e.character=this.character.alternative,i.push(e));i.length>0&&this.sequenceQueue.push(i)},digestMessage:async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")},activate:async function(){if(fe=pe=0,this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();await this.talk(this.user.uid,e.filter(e=>e!==this.character.name))||this.talk(this.user.uid)}else this.talk(this.user.uid)},talk:async function(e,t=[]){let n=this.character.sequences.filter(e=>"Activate"===e.name),i=[];if(this.isLoading=!0,t.length>0){const r=Math.floor(new Date/1e3),a=3600,s=Object.assign({},this.states),o=new TinySegmenter,c=[],u=[];for(const n of t){if(n in this.wordDictionary==!1||r-this.wordDictionary[n].timestamp>=a){const t=await le.ref("wonderland/users/"+e+"/dictionary/words/"+n).once("value");if(this.wordDictionary[n]={attributes:[],timestamp:r},t.exists()){const e=t.val();for(let t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[n].attributes.push(t)}}for(const e of this.wordDictionary[n].attributes)c.includes(e)||c.push(e)}for(const l of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(n)){const n=this.prepare([l]);let h=!1;for(const s of n){if("Message"==s.type)for(const l of Array.isArray(s.text)?s.text:o.segment(s.text)){if(Array.isArray(l)){for(const r of n)if("Message"==r.type){const n=await this.generate(e,r.text,t);if(null===n){h=!0;break}{let e,t;[e,t]=n,i.push({type:r.type,speed:r.speed,duration:r.duration,text:e})}}else i.push(r);if(h)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}if(l.length>1&&!u.includes(l)){if(l in this.wordDictionary==!1||r-this.wordDictionary[l].timestamp>=a){const t=await le.ref("wonderland/users/"+e+"/dictionary/words/"+l).once("value");if(this.wordDictionary[l]={attributes:[],timestamp:r},t.exists()){const e=t.val();for(const t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[l].attributes.push(t)}}for(const r of this.wordDictionary[l].attributes)if(c.includes(r)){for(const r of n)if("Message"==r.type){const n=await this.generate(e,r.text,t);if(null===n){h=!0;break}{let e,t;[e,t]=n,i.push({type:r.type,speed:r.speed,duration:r.duration,text:e})}}else i.push(r);if(h)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}u.push(l)}}if(h){i.splice(0);break}}this.states=s}return this.isLoading=!1,!1}for(const t of this.prepare(n))if("Message"===t.type){const n=await this.generate(e,t.text);if(null===n)return this.isLoading=!1,!1;{let e,r;[e,r]=n,i.push({type:t.type,speed:t.speed,duration:t.duration,text:e})}}else i.push(t);return i.length>0?(this.sequenceQueue.push(i),this.isLoading=!1,!0):(this.isLoading=!1,!1)},generate:async function(e,t,n=[]){function i(e){let t=[],n=Number.MIN_VALUE,i=0;for(let t=0;t<e.length;t++)e[t]>n&&(n=e[t]);for(let t=0;t<e.length;t++)i+=Math.exp(e[t]-n);for(let r=0;r<e.length;r++)t.push(Math.exp(e[r]-n)/i);return t}const r=Math.floor(new Date/1e3);let a=new TinySegmenter,s=Array.isArray(t)?t:a.segment(t),o={},c=[],u=new RegExp("[.#$\\[\\]]"),l={},h="",d=0;const f=Math.pow(10,-6);let p=[{sequence:[],score:1}];for(const t of n){if(t in this.wordDictionary==!1||r-this.wordDictionary[t].timestamp>=3600){const n=await le.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:r},n.exists()){const e=n.val();for(const n in e.attributes)"number"==typeof e.attributes[n]&&e.attributes[n]>0&&this.attributes.includes(n)&&this.wordDictionary[t].attributes.push(n)}}for(const e of this.wordDictionary[t].attributes)e in o?o[e].push(t):o[e]=[t]}for(const t of s){if(!c.includes(t)){if(Array.isArray(t)){let n=[],a=[];for(const i of t)if(i in o){for(const e of o[i])if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e===n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}else{if(i in this.reverseWordDictionary==!1||r-this.reverseWordDictionary[i].timestamp>=3600){const t=await le.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:r},t.exists()){const e=t.val();for(const t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(s.includes(e)&&!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e==n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}if(n.length>0&&a.length>0){const e=i(a);let t=[];for(let i=0;i<p.length;i++)for(let r=0;r<e.length;r++){let a=[].concat(p[i].sequence);a.push({index:d,term:n[r]}),t.push({sequence:a,score:p[i].score*e[r]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}else if(!u.test(t)){let n=[],a=[];if(t in this.wordDictionary==!1||r-this.wordDictionary[t].timestamp>=3600){const n=await le.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:r},n.exists()){const e=n.val();for(const n in e.attributes)"number"==typeof e.attributes[n]&&e.attributes[n]>0&&this.attributes.includes(n)&&this.wordDictionary[t].attributes.push(n)}}for(const i of this.wordDictionary[t].attributes)if(i in o){for(const e of o[i])if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e===n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}else{if(i in this.reverseWordDictionary==!1||r-this.reverseWordDictionary[i].timestamp>=3600){const t=await le.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:r},t.exists()){const e=t.val();for(let t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(s.includes(e)&&!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e==n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}if(n.length>0&&a.length>0){const e=i(a);let t=[];for(let i=0;i<p.length;i++)for(let r=0;r<e.length;r++){let a=[].concat(p[i].sequence);a.push({index:d,term:n[r]}),t.push({sequence:a,score:p[i].score*e[r]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}c.push(t)}d++}const m=p[function(e){const t=Math.random();let n=0,i=0;for(let r of e){if(n<=t&&t<n+r)break;n+=r,i++}return i}(i(p.map(e=>e.score)))];for(let e=0;e<s.length;e++)if(s[e]in l)void 0===l[s[e]]?h+=s[e]:h+=l[s[e]];else{let t=!0;for(let n=0;n<m.sequence.length;n++)if(m.sequence[n].index==e){s[e]==m.sequence[n].term?l[s[e]]=void 0:(l[s[e]]=m.sequence[n].term,h+=m.sequence[n].term,t=!1);break}if(t){if(Array.isArray(s[e]))return null;h+=s[e]}}return[h,l]},notify:function(e,t=3e3){const n=this;e.id=window.setTimeout(e=>{for(let t=0;t<n.notifications.length;t++)if(n.notifications[t].id===e.id){n.notifications.splice(t,1);break}},t,e),this.notifications.unshift(e)},blinded:async function(){if(0==this.backgroundImagesQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(this.recentImages))this.backgroundImagesQueue.push(e)}const e=this.backgroundImagesQueue.shift();this.preloadImages.splice(0),this.backgroundImages.splice(0);for(const t of e.paths)try{this.preloadImages.push({id:e.id,url:await he.ref().child(t).getDownloadURL(),timestamp:e.timestamp})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}"tags"in e&&this.talk(this.user.uid,e.tags.filter(e=>e!==this.character.name))},load:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},error:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},shake:function(e){e.animate([{transform:"translate3d(0, 0, 0)"},{transform:"translate3d(8px, 0, 0)"},{transform:"translate3d(-8px, 0, 0)"},{transform:"translate3d(7px, 0, 0)"},{transform:"translate3d(-7px, 0, 0)"},{transform:"translate3d(6px, 0, 0)"},{transform:"translate3d(-6px, 0, 0)"},{transform:"translate3d(5px, 0, 0)"},{transform:"translate3d(-5px, 0, 0)"},{transform:"translate3d(4px, 0, 0)"},{transform:"translate3d(-4px, 0, 0)"},{transform:"translate3d(3px, 0, 0)"},{transform:"translate3d(-3px, 0, 0)"},{transform:"translate3d(2px, 0, 0)"},{transform:"translate3d(-2px, 0, 0)"},{transform:"translate3d(1px, 0, 0)"},{transform:"translate3d(-1px, 0, 0)"},{transform:"translate3d(0, 0, 0)"}],{duration:1e3,iterations:1})},scrollToTop(){this.$nextTick(()=>{window.scroll(0,0)})},scrollToEnd:function(){"number"==typeof this.scrollTimeoutID&&clearTimeout(this.scrollTimeoutID),this.scrollTimeoutID=setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),500)},formatDate:function(e){return moment.locale(window.navigator.language),moment(e).format("LT")},animationStart:function(e){this.isAnimating=!0},animationEnd:function(e){const t=this;this.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height,t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height}),this.isPopup||(this.message=null),this.isAnimating=!1},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},range:function(e,t){const n=[];for(const i of t)n.push(new Date(new Date(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()).getTime()+24*i*60*60*1e3));return n},arrange:function(e,t){let n=[],i=[];for(const r of e)i.length<t?i.push(r):(n.push(i),i=[r]);return n.push(i),n},take:function(e,t){if(e.length>t){let n=[].concat(e);return n.splice(t),n}return e},reverse:function(e){return[].concat(e).reverse()},formatTime:function(e){const t=Math.floor(e),n=Math.floor(t/86400),i=Math.floor(t/3600),r=Math.floor(t/60);return n>0?n+"d":r>0?i>0?i+"h":r+"m":t%60+"s"},digestMessage:async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")},getDistance:function(e,t,n,i){var r=this.deg2rad(n-e),a=this.deg2rad(i-t),s=Math.sin(r/2)*Math.sin(r/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(n))*Math.sin(a/2)*Math.sin(a/2);return 6371*(2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,n=12){const i=[16,8,4,2,1];var r=1,a=[],s=[],o=0,c=0;let u="";for(a[0]=-90,a[1]=90,s[0]=-180,s[1]=180;u.length<n;){if(r){const e=(s[0]+s[1])/2;t>e?(c|=i[o],s[0]=e):s[1]=e}else{const t=(a[0]+a[1])/2;e>t?(c|=i[o],a[0]=t):a[1]=t}r=!r,o<4?o++:(u+="0123456789bcdefghjkmnpqrstuvwxyz"[c],o=0,c=0)}return u},decodeGeohash:function(e){const t=[16,8,4,2,1];var n=1,i=[],r=[];i[0]=-90,i[1]=90,r[0]=-180,r[1]=180;for(var a=0;a<e.length;a++)for(var s=e[a],o="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(s),c=0;c<5;c++){const e=t[c];n?(2,o&e?r[0]=(r[0]+r[1])/2:r[1]=(r[0]+r[1])/2):(2,o&e?i[0]=(i[0]+i[1])/2:i[1]=(i[0]+i[1])/2),n=!n}return i[2]=(i[0]+i[1])/2,r[2]=(r[0]+r[1])/2,{latitude:i[2],longitude:r[2],topleft:{latitude:i[0],longitude:r[0]},topright:{latitude:i[1],longitude:r[0]},bottomright:{latitude:i[1],longitude:r[1]},bottomleft:{latitude:i[0],longitude:r[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),n=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:n,topleft:this.calculateAdjacent(n,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(n,"bottom")}},calculateAdjacent:function(e,t){const n={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},i={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};n.bottom.odd=n.left.even,n.top.odd=n.right.even,n.left.odd=n.bottom.even,n.right.odd=n.top.even,i.bottom.odd=i.left.even,i.top.odd=i.right.even,i.left.odd=i.bottom.even,i.right.odd=i.top.even;var r=(e=e.toLowerCase()).charAt(e.length-1),a=e.length%2?"odd":"even",s=e.substring(0,e.length-1);return-1!=i[t][a].indexOf(r)&&(s=this.calculateAdjacent(s,t)),s+"0123456789bcdefghjkmnpqrstuvwxyz"[n[t][a].indexOf(r)]},prepare:function(e,t=null,n=null){function i(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let r=[],a=[];for(const n of e){const e=t;if(null===t&&n.name in this.states&&(e=this.states[n.name]),null!==e&&"state"in n&&null!==n.state){new RegExp(n.state).test(e)&&r.push(n)}}if(0===r.length){for(const t of e)"state"in t!=!1&&null!==t.state||r.push(t);t=null}if(r.length>0){let e=[];for(const n of r[i(0,r.length)].sequence)null!==t&&(this.states[n.name]=t),e.push(n);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let r=[],a=[];for(const e of null===n?this.character.sequences:n){let n=this.getSequenceStack(e,t);if(n.length>0){let e=[];do{let t=n.pop();if(n.length>0){let i=[];for(const r of n[n.length-1].sequence)if("Sequence"==r.type){if("sequence"in r){let t=!0;for(const n of e)if(n===r){t=!1;break}t&&i.push(r)}if(r===t)break}for(;i.length>0;)e.push(i.pop())}if("sequence"in t){let n=!0;for(const i of e)if(i===t){n=!1;break}n&&e.push(t)}}while(n.length>0);for(;e.length>0;)r.push(e.pop())}else r.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of r)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;a.push(e)}}else for(const e of r)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}a.push(e)}if(a.length>0){let t=0;for(const n of a[i(0,a.length)].sequence)e.splice(t,0,n),t++}}}else a.push(t)}}return a},getSequenceStack:function(e,t){let n=[];if(n.push(e),n[n.length-1]!==t){if("sequence"in e)for(const i of e.sequence)if("Sequence"==i.type){let e=this.getSequenceStack(i,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{n.push(t.pop())}while(t.length>0);return n}}n.pop()}return n},animate:async function(e){if(requestAnimationFrame(this.animate),null!==this.character){const i=(e-this.elapsed)/1e3;if(this.elapsed=e,this.sequenceQueue.length>0)fe=0;else if(fe+=i,this.isLoading||(pe+=i),0==this.sequenceQueue.length)if(pe>=10){if(this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();this.talk(this.user.uid,e.filter(e=>e!==this.character.name))}fe=pe=0}else fe>=5&&(this.sequenceQueue.push(this.prepare(this.character.sequences.filter(e=>"Idle"===e.name))),fe=0);if(!this.isLocked&&this.sequenceQueue.length>0){const e=this.sequenceQueue[0];if(e.length>0)if("Animation"==e[0].type){if("frames"in e[0])for(const t of e[0].frames)if(Array.isArray(t))"character"in e[0]?this.animationQueue.push({character:e[0].character,images:t}):this.animationQueue.push({character:this.character,images:t});else if("object"==typeof t&&"iterations"in t)if("images"in t){const n="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:n,images:t.images})}else if("sprites"in t){const n="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:n,images:t.sprites})}e.shift()}else"Message"==e[0].type&&null===this.message&&0===this.animationQueue.length&&("character"in e[0]?this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:e[0].character,text:e[0].text}:this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:{name:this.character.name,accent:this.character.accent,image:this.character.image},text:e[0].text},e.shift());else if(null===this.message&&0===this.animationQueue.length){const e=this;return Object.keys(this.cachedImages).forEach((function(t){e.cachedSprites.some(e=>e.source===t)||delete e.cachedImages[t]})),this.sequenceQueue.shift(),void(this.alternative=null)}}if(null!==this.message){if(this.message.type.reverse)if(this.message.type.count>0){if(this.message.type.elapsed+=2*i,this.message.type.elapsed>=1/this.message.type.speed){if(this.message.type.count-1<this.message.text.length){let e=Math.floor(this.message.text.length/2);this.message.type.buffer.length<=e&&this.message.type.count>0&&(this.message.type.count-=1),this.message.type.buffer.length>0&&(this.message.type.buffer=this.message.type.buffer.substring(0,this.message.type.buffer.length-1))}this.message.type.elapsed=0}}else this.isPopup=!1;else if(this.message.type.buffer.length<this.message.text.length){if(this.message.type.elapsed>=0?this.message.type.elapsed+=i:this.isAnimating||(this.isPopup?this.message.type.elapsed=i:this.isPopup=!0),this.message.type.elapsed>=1/this.message.type.speed){let e=this.message.type.buffer.length,t=Math.floor(this.message.text.length/2),n=this.message.text.length;this.message.type.count>=t&&(this.message.type.buffer+=this.message.text.charAt(e)),this.message.type.count<n&&(this.message.type.count+=1),this.message.type.elapsed=0}}else this.message.time+=i,this.message.time>=this.message.duration&&(this.message.type.reverse=!0);if(this.message.text.length===this.message.type.buffer.length){const e=this.message.text.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else{let e=new Array,i="";for(let t=0;t<this.message.text.length;t++)-1==e.indexOf(this.message.text.charAt(t))&&"\n"!=this.message.text.charAt(t)&&null==this.message.text.charAt(t).match(/\s/)&&e.push(this.message.text.charAt(t));if(e.length>0)for(let r=0;r<this.message.type.count;r++)"\n"==this.message.text.charAt(r)?i+="\n":i+=e[(t=0,n=e.length,t=Math.ceil(t),n=Math.floor(n),~~(Math.floor(Math.random()*(n-t))+t))];if(i.length>this.message.type.buffer.length){const e=(this.message.type.buffer+i.substring(this.message.type.buffer.length,i.length)).split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else if(this.text.length!==this.message.type.buffer.length){const e=this.message.type.buffer.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}}}if(this.animationQueue.length>0){const e=this.animationQueue[0];if(!this.isLocked){const t=[];for(const e of this.animationQueue)t.push(e);this.isLocked=!0;for(const e of t)for(const t of e.images)if(t.source in this.cachedImages==!1)try{const e=await new Promise(async(e,n)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{n(e)},i.crossOrigin="Anonymous",i.src=t.source});this.cachedImages[t.source]=e}catch(e){console.error(e)}if(this.isLocked=!1,e.character.name===this.character.name){this.cachedSprites.splice(0);for(const t of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,e.images))this.cachedSprites.push(t)}else{this.alternative=this.character.alternative,this.alternativeCachedSprites.splice(0);for(const t of this.render(this.$refs.alternative.getContext("2d"),this.alternativeCanvasWidth,this.alternativeCanvasHeight,e.images))this.alternativeCachedSprites.push(t)}this.animationQueue.shift()}}}var t,n},render:function(e,t,n,i){const r=[];e.clearRect(0,0,t,n);for(const t of i)t.source in this.cachedImages&&(e.globalAlpha="opacity"in t?t.opacity:1,e.drawImage(this.cachedImages[t.source],t.x*window.devicePixelRatio,t.y*window.devicePixelRatio,t.width*window.devicePixelRatio,t.height*window.devicePixelRatio)),r.push(t);return r}},updated:function(){this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height},mounted:async function(){function e(e,t){const n=Math.random();let i=0,r=0;for(let a of e){const e=t(a);if(i<=n&&n<i+e)break;i+=e,r++}return e[r]}const t=this,n=localStorage.getItem("character"),i=localStorage.getItem("credential"),r=localStorage.getItem("stats"),a=localStorage.getItem("fragments");let s,o=null;const c=[{path:"/assets/milch.json",probability:1}],u=[{path:"/assets/merku.json",probability:1}];if(n)try{const e=JSON.parse(n);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("character")}if(i)try{o=JSON.parse(i)}catch(e){localStorage.removeItem("credential")}if(r){const e=(new Date).getTime()-6048e5;try{for(const t of JSON.parse(r)){const n=new Date(t.date);n.getTime()>e&&this.stats.push({date:n,steps:t.steps})}}catch(e){localStorage.removeItem("stats")}}if(a)try{s=JSON.parse(a)}catch(e){localStorage.removeItem("fragments"),s=[]}else s=[];this.$refs.container.after(de.domElement),this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height,this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.canvasLight}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1,supportedMapTypes:[Microsoft.Maps.MapTypeId.grayscale,Microsoft.Maps.MapTypeId.canvasLight,Microsoft.Maps.MapTypeId.canvasDark]}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==t.user&&t.update()});try{this.progress=1;const t=await fetch(e(c,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(t.statusText);{const n=await t.json(),i=this.prepare(n.sequences.filter(e=>"Start"===e.name),null,n.sequences),r=await fetch(e(u,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});let a;if(!r.ok)throw new Error(r.statusText);a=await r.json();const o=await fetch("/assets/fragments.json",{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!o.ok)throw new Error(o.statusText);{const e=Math.floor(new Date/1e3),t=(new Date).getTime()-864e5;for(const n of await o.json()){const i=[];for(const r of n){const n=s.find(e=>r.some(t=>e.set.includes(t))&&e.count>0&&1e3*e.timestamp>t&&e.checksum===[...String(e.timestamp)].reduce((e,t)=>e+t,0)+[...String(e.count)].reduce((e,t)=>e+t,0));void 0===n?i.push({set:r,index:0,count:0,timestamp:e}):i.push({set:r,index:0,count:n.count,timestamp:n.timestamp})}this.chars.push(i)}}this.progress=null,this.canvasSize.width=n.width,this.canvasSize.height=n.height,this.canvasSize.deviceWidth=n.width*window.devicePixelRatio,this.canvasSize.deviceHeight=n.height*window.devicePixelRatio,this.canvasSize.alternative.width=a.width,this.canvasSize.alternative.height=a.height,this.canvasSize.alternative.deviceWidth=a.width*window.devicePixelRatio,this.canvasSize.alternative.deviceHeight=a.height*window.devicePixelRatio;for(const e of i)if("Animation"==e.type&&"frames"in e&&e.frames.length>0){let t=null;if(Array.isArray(e.frames[0])?t=e.frames[0]:"object"==typeof e.frames[0]&&"iterations"in e.frames[0]&&("images"in e.frames[0]&&e.frames[0].images.length>0?t=e.frames[0].images:"sprites"in e.frames[0]&&e.frames[0].sprites.length>0&&(t=e.frames[0].sprites)),null!==t){for(const e of t)if(e.source in this.cachedImages==!1)try{const t=await new Promise(async(t,n)=>{const i=new Image;i.onload=()=>{t(i)},i.onerror=e=>{n(e)},i.crossOrigin="Anonymous",i.src=e.source});this.cachedImages[e.source]=t}catch(e){console.error(e)}this.cachedSprites.splice(0);for(const e of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,t))this.cachedSprites.push(e)}break}this.character=n,this.character.alternative=a,this.sequenceQueue.push(i)}}catch(e){this.progress=null,this.notify({text:e.message}),console.error(e)}this.animate(),null===o?(this.mode="sign-in",this.isRevealed=!0):o.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(o.idToken)).catch(e=>{console.error(e.code,e.message)}):o.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(o.accessToken)).catch(e=>{console.error(e.code,e.message)}):o.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(o.accessToken,o.secret)).catch(e=>{console.error(e.code,e.message)}):(this.mode="sign-in",this.isRevealed=!0),firebase.auth().onAuthStateChanged((function(e){if(e){const n=new Date;t.user=e,t.update();for(const e of t.stats)e.date.getFullYear()===n.getFullYear()&&e.date.getMonth()===n.getMonth()&&e.date.getDate()===n.getDate()&&(t.steps=e.steps);le.ref("wonderland/users/"+e.uid+"/dictionary/count").on("value",e=>{const n=e.val();t.stars=null===n?0:n}),le.ref("wonderland/tracks").orderByChild("timestamp").limitToLast(10).on("value",e=>{if(e.exists()){const n=e.val(),i=[];let r=0;for(const e in n)n[e].id=e,i.push(n[e]);for(const e of i.sort((e,t)=>t.timestamp-e.timestamp)){let n=-1;for(let i=0;i<t.recentWords.length;i++)if(t.recentWords[i].name==e.name){n=i;break}n>=0&&t.recentWords.splice(n,1),t.recentWords.splice(r,0,e),r++}for(let e=t.recentWords.length-1;e>=r;e--)t.recentWords.splice(e,1)}})}else null!==t.user&&(le.ref("wonderland/users/"+t.user.uid+"/dictionary/count").off("value"),le.ref("wonderland/tracks").off("value"),t.user=null,t.stars=0)}))},unmounted:function(){"number"==typeof this.tickIntervalID&&clearInterval(this.tickIntervalID),null!==vrmModel&&(scene.remove(vrmModel.scene),vrmModel=null)}}).mount("#app");window.addEventListener("resize",e=>{t.insetTop=t.$refs.indicator.getBoundingClientRect().height,t.insetBottom=t.$refs.blank.getBoundingClientRect().height,t.canvasSize.width=t.character.width,t.canvasSize.height=t.character.height,t.canvasSize.deviceWidth=t.character.width*window.devicePixelRatio,t.canvasSize.deviceHeight=t.character.height*window.devicePixelRatio,t.canvasSize.alternative.width=t.character.alternative.width,t.canvasSize.alternative.height=t.character.alternative.height,t.canvasSize.alternative.deviceWidth=t.character.alternative.width*window.devicePixelRatio,t.canvasSize.alternative.deviceHeight=t.character.alternative.height*window.devicePixelRatio,t.animationQueue.unshift({character:t.character,images:[].concat(t.cachedSprites)}),null!==t.alternative&&t.animationQueue.unshift({character:t.character.alternative,images:[].concat(t.alternativeCachedSprites)})}),window.addEventListener("click",e=>{}),window.addEventListener("dblclick",e=>{}),window.addEventListener("mousedown",e=>{}),window.addEventListener("mousemove",e=>{}),window.addEventListener("mouseup",e=>{}),window.addEventListener("touchstart",e=>{e.stopPropagation(),0==me?(me++,setTimeout(()=>{me=0},500)):me=0}),window.addEventListener("touchmove",e=>{e.stopPropagation()}),window.addEventListener("touchend",e=>{e.stopPropagation()}),window.addEventListener("touchcancel",e=>{e.stopPropagation()}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5pbWVqcy9saWIvYW5pbWUuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJmIiwiZSIsImEiLCJhcHBlbmRDaGlsZCIsImRvbSIsInUiLCJjaGlsZHJlbiIsImxlbmd0aCIsInN0eWxlIiwiZGlzcGxheSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNzc1RleHQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJrIiwicGVyZm9ybWFuY2UiLCJEYXRlIiwibm93IiwiZyIsIlBhbmVsIiwiaCIsInNlbGYiLCJtZW1vcnkiLCJSRVZJU0lPTiIsImFkZFBhbmVsIiwic2hvd1BhbmVsIiwiYmVnaW4iLCJlbmQiLCJ1cGRhdGUiLCJ1c2VkSlNIZWFwU2l6ZSIsImpzSGVhcFNpemVMaW1pdCIsInRoaXMiLCJkb21FbGVtZW50Iiwic2V0TW9kZSIsIkluZmluaXR5IiwiTWF0aCIsInJvdW5kIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInYiLCJxIiwid2lkdGgiLCJoZWlnaHQiLCJiIiwiZ2V0Q29udGV4dCIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImZpbGxUZXh0IiwiZ2xvYmFsQWxwaGEiLCJ3IiwibWluIiwibWF4IiwiZHJhd0ltYWdlIiwiZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MiLCJsb29wQmVnaW4iLCJjaGFuZ2VCZWdpbiIsImNoYW5nZSIsImNoYW5nZUNvbXBsZXRlIiwibG9vcENvbXBsZXRlIiwiY29tcGxldGUiLCJsb29wIiwiZGlyZWN0aW9uIiwiYXV0b3BsYXkiLCJ0aW1lbGluZU9mZnNldCIsImRlZmF1bHRUd2VlblNldHRpbmdzIiwiZHVyYXRpb24iLCJkZWxheSIsImVuZERlbGF5IiwiZWFzaW5nIiwidmFsaWRUcmFuc2Zvcm1zIiwiY2FjaGUiLCJDU1MiLCJzcHJpbmdzIiwibWluTWF4IiwidmFsIiwic3RyaW5nQ29udGFpbnMiLCJzdHIiLCJ0ZXh0IiwiaW5kZXhPZiIsImFwcGx5QXJndW1lbnRzIiwiZnVuYyIsImFyZ3MiLCJhcHBseSIsImlzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5Iiwib2JqIiwidG9TdHJpbmciLCJwdGgiLCJzdmciLCJTVkdFbGVtZW50IiwiaW5wIiwiSFRNTElucHV0RWxlbWVudCIsIm5vZGVUeXBlIiwiZm5jIiwidW5kIiwibmlsIiwiaGV4IiwidGVzdCIsInJnYiIsImhzbCIsImNvbCIsInBhcnNlRWFzaW5nUGFyYW1ldGVycyIsInN0cmluZyIsIm1hdGNoIiwiZXhlYyIsInNwbGl0IiwibWFwIiwicGFyc2VGbG9hdCIsInNwcmluZyIsInBhcmFtcyIsIm1hc3MiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwidmVsb2NpdHkiLCJ3MCIsInNxcnQiLCJ6ZXRhIiwid2QiLCJzb2x2ZXIiLCJwcm9ncmVzcyIsImV4cCIsImNvcyIsInNpbiIsImNhY2hlZCIsImVsYXBzZWQiLCJyZXN0Iiwic3RlcHMiLCJjZWlsIiwiZWFzZXMiLCJmdW5jdGlvbkVhc2luZ3MiLCJiZXppZXIiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsIm1YMSIsIm1ZMSIsIm1YMiIsIm1ZMiIsInNhbXBsZVZhbHVlcyIsIkZsb2F0MzJBcnJheSIsIngiLCJnZXRURm9yWCIsImFYIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJrU3BsaW5lVGFibGVTaXplIiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUEiLCJhQiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJhYnMiLCJiaW5hcnlTdWJkaXZpZGUiLCJwZW5uZXIiLCJsaW5lYXIiLCJTaW5lIiwiUEkiLCJDaXJjIiwiQmFjayIsIkJvdW5jZSIsInBvdzIiLCJwb3ciLCJFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiYXNpbiIsImZvckVhY2giLCJrZXlzIiwiZWFzZUluIiwicGFyc2VFYXNpbmdzIiwiZWFzZSIsInNlbGVjdFN0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXJBcnJheSIsImNhbGxiYWNrIiwibGVuIiwidGhpc0FyZyIsImFyZ3VtZW50cyIsInJlc3VsdCIsInB1c2giLCJmbGF0dGVuQXJyYXkiLCJyZWR1Y2UiLCJjb25jYXQiLCJ0b0FycmF5IiwiTm9kZUxpc3QiLCJIVE1MQ29sbGVjdGlvbiIsInNsaWNlIiwiYXJyYXlDb250YWlucyIsInNvbWUiLCJjbG9uZU9iamVjdCIsImNsb25lIiwicmVwbGFjZU9iamVjdFByb3BzIiwibzEiLCJvMiIsIm1lcmdlT2JqZWN0cyIsImNvbG9yVG9SZ2IiLCJyZ2JWYWx1ZSIsImhleFZhbHVlIiwicmVwbGFjZSIsInBhcnNlSW50IiwiaGV4VG9SZ2JhIiwiaHNsVmFsdWUiLCJodWUycmdiIiwiaHNsVG9SZ2JhIiwiZ2V0VW5pdCIsImdldEZ1bmN0aW9uVmFsdWUiLCJhbmltYXRhYmxlIiwidGFyZ2V0IiwiaWQiLCJ0b3RhbCIsImdldEF0dHJpYnV0ZSIsImVsIiwicHJvcCIsImNvbnZlcnRQeFRvVW5pdCIsInVuaXQiLCJ0ZW1wRWwiLCJ0YWdOYW1lIiwicGFyZW50RWwiLCJwYXJlbnROb2RlIiwiYm9keSIsInBvc2l0aW9uIiwiZmFjdG9yIiwib2Zmc2V0V2lkdGgiLCJyZW1vdmVDaGlsZCIsImNvbnZlcnRlZFVuaXQiLCJnZXRDU1NWYWx1ZSIsInVwcGVyY2FzZVByb3BOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldEFuaW1hdGlvblR5cGUiLCJnZXRFbGVtZW50VHJhbnNmb3JtcyIsInRyYW5zZm9ybSIsInJlZyIsInRyYW5zZm9ybXMiLCJNYXAiLCJzZXQiLCJnZXRUcmFuc2Zvcm1WYWx1ZSIsInByb3BOYW1lIiwiZGVmYXVsdFZhbCIsImdldFRyYW5zZm9ybVVuaXQiLCJsaXN0IiwiZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZSIsImdldFJlbGF0aXZlVmFsdWUiLCJ0byIsImZyb20iLCJvcGVyYXRvciIsInkiLCJ2YWxpZGF0ZVZhbHVlIiwib3JpZ2luYWxVbml0IiwidW5pdExlc3MiLCJzdWJzdHIiLCJnZXREaXN0YW5jZSIsInAxIiwicDIiLCJnZXRQb2x5bGluZUxlbmd0aCIsInByZXZpb3VzUG9zIiwicG9pbnRzIiwidG90YWxMZW5ndGgiLCJudW1iZXJPZkl0ZW1zIiwiY3VycmVudFBvcyIsImdldEl0ZW0iLCJnZXRUb3RhbExlbmd0aCIsImdldENpcmNsZUxlbmd0aCIsImdldFJlY3RMZW5ndGgiLCJnZXRMaW5lTGVuZ3RoIiwiZ2V0UG9seWdvbkxlbmd0aCIsImdldFBhcmVudFN2ZyIsInBhdGhFbCIsInN2Z0RhdGEiLCJwYXJlbnRTdmdFbCIsImdldFBhcmVudFN2Z0VsIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInZpZXdCb3hBdHRyIiwidmlld0JveCIsInZXIiwidkgiLCJnZXRQYXRoUHJvZ3Jlc3MiLCJwYXRoIiwiaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHIiwicG9pbnQiLCJvZmZzZXQiLCJnZXRQb2ludEF0TGVuZ3RoIiwicDAiLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuMiIsImRlY29tcG9zZVZhbHVlIiwicmd4Iiwib3JpZ2luYWwiLCJudW1iZXJzIiwiTnVtYmVyIiwic3RyaW5ncyIsInBhcnNlVGFyZ2V0cyIsInRhcmdldHMiLCJpdGVtIiwicG9zIiwiZ2V0QW5pbWF0YWJsZXMiLCJwYXJzZWQiLCJub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyIsInR3ZWVuU2V0dGluZ3MiLCJzZXR0aW5ncyIsInByb3BBcnJheSIsImdldFByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwia2V5ZnJhbWVzIiwicHJvcGVydHlOYW1lcyIsIm5ld0tleSIsImZsYXR0ZW5LZXlmcmFtZXMiLCJ0d2VlbnMiLCJub3JtYWxpemVUd2VlbnMiLCJwcmV2aW91c1R3ZWVuIiwidHdlZW4iLCJub3JtYWxpemVUd2VlblZhbHVlcyIsInR3ZWVuVmFsdWUiLCJ0b1VuaXQiLCJvcmlnaW5hbFZhbHVlIiwicHJldmlvdXNWYWx1ZSIsImZyb21Vbml0Iiwic3RhcnQiLCJpc1BhdGgiLCJpc0NvbG9yIiwic2V0UHJvZ3Jlc3NWYWx1ZSIsImNzcyIsImF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIm1hbnVhbCIsImxhc3QiLCJzZXRUYXJnZXRzVmFsdWUiLCJ2YWx1ZVVuaXQiLCJhbmltVHlwZSIsImdldEFuaW1hdGlvbnMiLCJhbmltYXRhYmxlcyIsImxhc3RUd2VlbiIsInR5cGUiLCJjcmVhdGVBbmltYXRpb24iLCJnZXRJbnN0YW5jZVRpbWluZ3MiLCJhbmltYXRpb25zIiwiYW5pbUxlbmd0aCIsImdldFRsT2Zmc2V0IiwiYW5pbSIsInRpbWluZ3MiLCJpbnN0YW5jZUlEIiwiYWN0aXZlSW5zdGFuY2VzIiwiZW5naW5lIiwicmFmIiwic3RlcCIsImFjdGl2ZUluc3RhbmNlc0xlbmd0aCIsImFjdGl2ZUluc3RhbmNlIiwicGF1c2VkIiwic3BsaWNlIiwidGljayIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVuZGVmaW5lZCIsImFuaW1lIiwic3VzcGVuZFdoZW5Eb2N1bWVudEhpZGRlbiIsImlzRG9jdW1lbnRIaWRkZW4iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImluc3RhbmNlIiwiX29uRG9jdW1lbnRWaXNpYmlsaXR5IiwiaGlkZGVuIiwic3RhcnRUaW1lIiwibGFzdFRpbWUiLCJjaGlsZHJlbkxlbmd0aCIsInJlc29sdmUiLCJtYWtlUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwiX3Jlc29sdmUiLCJmaW5pc2hlZCIsImluc3RhbmNlU2V0dGluZ3MiLCJjcmVhdGVOZXdJbnN0YW5jZSIsInRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uIiwicmV2ZXJzZWQiLCJjaGlsZCIsImFkanVzdFRpbWUiLCJ0aW1lIiwicmVzZXRUaW1lIiwiY3VycmVudFRpbWUiLCJzcGVlZCIsInNlZWtDaGlsZCIsInNlZWsiLCJzZXRBbmltYXRpb25zUHJvZ3Jlc3MiLCJpbnNUaW1lIiwiYW5pbWF0aW9uc0xlbmd0aCIsInR3ZWVuTGVuZ3RoIiwiZWFzZWQiLCJpc05hTiIsInRvTnVtYmVyc0xlbmd0aCIsInRvTnVtYmVyIiwiZnJvbU51bWJlciIsInN0cmluZ3NMZW5ndGgiLCJuJDEiLCJjdXJyZW50VmFsdWUiLCJzZXRDYWxsYmFjayIsImNiIiwicGFzc1Rocm91Z2giLCJzZXRJbnN0YW5jZVByb2dyZXNzIiwiZW5naW5lVGltZSIsImluc0R1cmF0aW9uIiwiaW5zRGVsYXkiLCJpbnNFbmREZWxheSIsInJldmVyc2VQbGF5YmFjayIsImkkMSIsInN5bmNJbnN0YW5jZUNoaWxkcmVuIiwiYmVnYW4iLCJsb29wQmVnYW4iLCJjaGFuZ2VCZWdhbiIsImNoYW5nZUNvbXBsZXRlZCIsInJlbWFpbmluZyIsImNvbXBsZXRlZCIsInJlc2V0IiwicGF1c2UiLCJwbGF5IiwicmV2ZXJzZSIsInJlc3RhcnQiLCJyZW1vdmUiLCJyZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlIiwicmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zIiwidGFyZ2V0c0FycmF5IiwiY2hpbGRBbmltYXRpb25zIiwidmVyc2lvbiIsInJ1bm5pbmciLCJjb252ZXJ0UHgiLCJwZXJjZW50Iiwic2V0RGFzaG9mZnNldCIsInBhdGhMZW5ndGgiLCJzdGFnZ2VyIiwiZ3JpZCIsImF4aXMiLCJmcm9tSW5kZXgiLCJmcm9tRmlyc3QiLCJmcm9tQ2VudGVyIiwiZnJvbUxhc3QiLCJpc1JhbmdlIiwidmFsMSIsInZhbDIiLCJ2YWx1ZXMiLCJtYXhWYWx1ZSIsImluZGV4IiwiZnJvbVgiLCJmcm9tWSIsImZsb29yIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwidGltZWxpbmUiLCJ0bCIsImFkZCIsImluc3RhbmNlUGFyYW1zIiwidGxJbmRleCIsImlucyIsImluc1BhcmFtcyIsInRsRHVyYXRpb24iLCJyYW5kb20iLCJmaXJlYmFzZSIsImluaXRpYWxpemVBcHAiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJwcm9qZWN0SWQiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJhbmFseXRpY3MiLCJkZWJ1ZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsImRhdGFiYXNlIiwic3RvcmFnZSIsInN0YXRzIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiY2xhc3NMaXN0IiwiaWRsZVRpbWUiLCJhY3RpdmF0ZVRpbWUiLCJ0YXBDb3VudCIsImV2ZW50IiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsIm9udXBkYXRlZm91bmQiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImNvZGUiLCJtZXNzYWdlIiwiY29udHJvbGxlciIsImRhdGEiLCJjb21tYW5kIiwicG9zdE1lc3NhZ2UiLCJjYWNoZXMiLCJhcHAiLCJWdWUiLCJjcmVhdGVBcHAiLCJpc0RlYnVnIiwiaXNEYXJrTW9kZSIsImlzTXV0ZWQiLCJpc0xvYWRpbmciLCJpc1VwZGF0aW5nIiwiaXNMb2NhdGluZyIsImlzUmV2ZWFsZWQiLCJpc092ZXJsYXllZCIsImlzQmxpbmRlZCIsImlzUG9wdXAiLCJpc0V4cGFuZGVkIiwiaXNMZWFybmluZyIsImlzQW5pbWF0aW5nIiwiaXNIYW5naW5nT24iLCJpc1N1Ym1pdHRpbmciLCJpc0Rpc2NvdmVyaW5nIiwiaXNTdGFyZWQiLCJpc0xvY2tlZCIsImNhbnZhc1NpemUiLCJkZXZpY2VXaWR0aCIsImRldmljZUhlaWdodCIsImFsdGVybmF0aXZlIiwiY2FjaGVkSW1hZ2VzIiwiY2FjaGVkU3ByaXRlcyIsImFsdGVybmF0aXZlQ2FjaGVkU3ByaXRlcyIsImFuaW1hdGlvblF1ZXVlIiwibGF5ZXIiLCJxdWVyeVF1ZXVlIiwicXVlcnlDYWNoZSIsImNhY2hlZFRyYWNrcyIsImNhY2hlZERvY3VtZW50cyIsImRvY3VtZW50UXVldWUiLCJzZXF1ZW5jZVF1ZXVlIiwidXNlciIsImlucHV0IiwiYW5pbWF0ZWRJbnB1dExlbmd0aCIsIm1heElucHV0TGVuZ3RoIiwiaW5wdXRIYXNFcnJvciIsIm1lc3NhZ2VzIiwibWF4TWVzc2FnZXMiLCJ3b3JkIiwicmVjZW50V29yZHMiLCJ0YWdzIiwibWF4VGFncyIsInNjcm9sbFRpbWVvdXRJRCIsInRpY2tJbnRlcnZhbElEIiwic3RhcnMiLCJhbmltYXRlZFN0YXJzIiwiaXNTdGVwcGluZyIsImFuaW1hdGVkU3RlcHMiLCJkZXZpY2VNb3Rpb24iLCJzY3JlZW5zaG90Iiwibm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvbkhlaWdodCIsImFuaW1hdGVkTm90aWZpY2F0aW9uSGVpZ2h0IiwiaW5wdXRIZWlnaHQiLCJhbmltYXRlZElucHV0SGVpZ2h0IiwicmVjZW50SW1hZ2VzIiwiYmFja2dyb3VuZEltYWdlc1F1ZXVlIiwiYmFja2dyb3VuZEltYWdlcyIsInByZWxvYWRJbWFnZXMiLCJpc1VwbG9hZGluZyIsImN1cnJlbnRBbmltYXRpb25zIiwiYmxlbmRTaGFwZUFuaW1hdGlvbnMiLCJpbnNldFRvcCIsImluc2V0Qm90dG9tIiwicG9wdXBUZXh0SGVpZ2h0IiwiYW5pbWF0ZWRQb3B1cFRleHRIZWlnaHQiLCJ0aWNrZXJXaWR0aCIsImFuaW1hdGVkVGlja2VyV2lkdGgiLCJsZWFkZXJib2FyZCIsImxlYWRlcmJvYXJkSGVpZ2h0IiwiYW5pbWF0ZWRMZWFkZXJib2FyZEhlaWdodCIsInN0YXRlcyIsImNoYXJhY3RlciIsIndvcmREaWN0aW9uYXJ5IiwicmV2ZXJzZVdvcmREaWN0aW9uYXJ5IiwiYXR0cmlidXRlcyIsImNoYXJzIiwid2F0Y2giLCJuZXdWYWx1ZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwibXV0ZSIsInJlbW92ZUl0ZW0iLCJ3b3JkcyIsImhhbmRsZXIiLCIkbmV4dFRpY2siLCJjbGlwIiwiZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkZWVwIiwiZWxlbWVudHMiLCJmcmFtZVJhdGUiLCJ2aXNpYmlsaXR5IiwiYW5pbWF0aW9uIiwiYW5pbWF0ZSIsImZpbGwiLCJpdGVyYXRpb25zIiwiJHJlZnMiLCJwb3B1cFRleHQiLCJjb3VudCIsImZyYWdtZW50cyIsInJvdyIsImNvbHVtbiIsInRpbWVzdGFtcCIsImNoZWNrc3VtIiwiU3RyaW5nIiwibWV0aG9kcyIsInNpZ25JbiIsImF1dGgiLCJHb29nbGVBdXRoUHJvdmlkZXIiLCJQUk9WSURFUl9JRCIsInNpZ25JbldpdGhQb3B1cCIsImNyZWRlbnRpYWwiLCJwcm92aWRlckRhdGEiLCJjdXJyZW50VXNlciIsInVwZGF0ZVByb2ZpbGUiLCJkaXNwbGF5TmFtZSIsInBob3RvVVJMIiwicmVmIiwidWlkIiwidHJhbnNhY3Rpb24iLCJjdXJyZW50IiwicHJvdmlkZXJJZCIsImFjY2Vzc1Rva2VuIiwiaWRUb2tlbiIsIkZhY2Vib29rQXV0aFByb3ZpZGVyIiwicHJvdmlkZXIiLCJhZGRTY29wZSIsIlR3aXR0ZXJBdXRoUHJvdmlkZXIiLCJwaG90b1VybCIsImFkZGl0aW9uYWxVc2VySW5mbyIsInVzZXJuYW1lIiwibGluayIsInNlY3JldCIsInNpZ25PdXQiLCJyZWZyZXNoIiwiYXN5bmMiLCJpZ25vcmUiLCJjZW50ZXJMb2NhdGlvbiIsImdldENlbnRlciIsInRyYWNrcyIsImZldGNoIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJoYW5kbGVySWQiLCJoYW5kbGVycyIsIk1pY3Jvc29mdCIsIk1hcHMiLCJFdmVudHMiLCJyZW1vdmVIYW5kbGVyIiwiZW50aXRpZXMiLCJwdXNocGluIiwiaXNVcGRhdGVkIiwiZ2VvaGFzaCIsInRyYWNrIiwicHVzaHBpbklkIiwiUHVzaHBpbiIsIkxvY2F0aW9uIiwidGl0bGUiLCJzdWJUaXRsZSIsImZvcm1hdFRpbWUiLCJpY29uIiwic2V0SW1hZ2UiLCJhZGRIYW5kbGVyIiwic2V0TG9jYXRpb24iLCJzZXRPcHRpb25zIiwiaWRzIiwidHJhY2tEaWN0aW9uYXJ5IiwidHJhY2tSYW5raW5nIiwiYXNzaWduIiwic29ydCIsInJlc3VsdHMiLCJlcHNpbG9uIiwiZG9jdW1lbnRzIiwidGVybUZyZXF1ZW5jaWVzIiwiaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5Iiwic2NvcmVEaWN0aW9uYXJ5Iiwic2NvcmVzIiwibWF4U2NvcmUiLCJ0b2tlbnMiLCJ0ZXJtU2V0IiwiaW5jbHVkZXMiLCJsb2ciLCJ0ZiIsInRva2VuIiwidGVybUZyZXF1ZW5jeSIsInRmaWRmIiwidGVybSIsInNjb3JlIiwibm90aWZ5IiwiYWNjZW50IiwiaW1hZ2UiLCJjZW50ZXJHZW9oYXNoIiwiZW5jb2RlR2VvaGFzaCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCJnZXRab29tIiwiZ2VvaGFzaGVzIiwidGVtcFJlY2VudCIsInByaW1pdGl2ZXMiLCJkZWNvZGVHZW9oYXNoIiwidGVtcENhY2hlIiwiUG9seWdvbiIsInRvcGxlZnQiLCJ0b3ByaWdodCIsImJvdHRvbXJpZ2h0IiwiYm90dG9tbGVmdCIsImZpbGxDb2xvciIsInN0cm9rZUNvbG9yIiwic3Ryb2tlVGhpY2tuZXNzIiwibmVpZ2hib3JzIiwiZ2V0TmVpZ2hib3JzIiwic2V0UHJpbWl0aXZlcyIsInNuYXBzaG90IiwiZGF0YWJhc2VSb290Iiwib3JkZXJCeUNoaWxkIiwibGltaXRUb0xhc3QiLCJzdGFydEF0IiwiZW5kQXQiLCJwYWRFbmQiLCJvbmNlIiwiZXhpc3RzIiwiZGljdGlvbmFyeSIsInNoaWZ0IiwicmVjZW50IiwidGFrZSIsInN0YXJ0UGVkb21ldGVyIiwiRGV2aWNlTW90aW9uRXZlbnQiLCJyZXF1ZXN0UGVybWlzc2lvbiIsImFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkiLCJhZyIsInoiLCJub3dEYXRlIiwiYmFzZURhdGUiLCJnZXRUaW1lIiwiZGF5cyIsImRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInRvSVNPU3RyaW5nIiwidW5zaGlmdCIsIm1pbkNvdW50IiwiTUFYX1NBRkVfSU5URUdFUiIsImZvcm1hdCIsImdyb3VwIiwiaiIsImluZGV4UGF0aCIsInNlcXVlbmNlIiwicHJlcGFyZSIsInNlcXVlbmNlcyIsImZpbHRlciIsInN0b3BQZWRvbWV0ZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibG9jYXRlIiwicGVybWlzc2lvblN0YXR1cyIsInBlcm1pc3Npb25zIiwicXVlcnkiLCJzdGF0ZSIsImdlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwic2V0VmlldyIsImNlbnRlciIsImNvb3JkcyIsInpvb20iLCJlbmFibGVIaWdoQWNjdXJhY3kiLCJ0aW1lb3V0IiwibWF4aW11bUFnZSIsInNlbmQiLCJsZWFybiIsInNoYWtlIiwic2VsZWN0ZWQiLCJyZWplY3QiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzdGFydHNXaXRoIiwic3JjIiwicmVmRnJvbVVSTCIsImdldERvd25sb2FkVVJMIiwiY3Jvc3NPcmlnaW4iLCJjdHgiLCJpbmxpbmVTdmciLCJ0b0RhdGFVUkwiLCJ1cGxvYWQiLCJnZW5lcmF0ZVV1aWQiLCJqb2luIiwic3RvcmFnZVJlZiIsImZpbGVzIiwicGF0aHMiLCJmaWxlIiwidXBsb2FkVGFzayIsInB1dCIsIm9uIiwiYnl0ZXNUcmFuc2ZlcnJlZCIsInRvdGFsQnl0ZXMiLCJmdWxsUGF0aCIsImNoZWNrIiwiZGF0YXNldCIsImNoZWNrZWQiLCJzaGFyZSIsInVwZGF0ZVJlcXVpcmVkIiwiZGVsZXRlUmVxdWlyZWQiLCJjb21taXR0ZWQiLCJ0aW1lc3RhbXBzIiwic2V0VGltZW91dCIsInR3aW5rbGUiLCJkaWdlc3RNZXNzYWdlIiwibmV4dCIsInVzZXJJZCIsImxpbWl0Iiwib3JkZXJCeUtleSIsImxpbWl0VG9GaXJzdCIsImluZGV4ZXMiLCJwb3AiLCJwcmV2aW91cyIsImRpc2NvdmVyIiwid29yZFNldCIsImFycmF5IiwidGVtcCIsInNodWZmbGUiLCJtc2dVaW50OCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiaGFzaEJ1ZmZlciIsImNyeXB0byIsInN1YnRsZSIsImRpZ2VzdCIsIlVpbnQ4QXJyYXkiLCJwYWRTdGFydCIsImFjdGl2YXRlIiwidGFsayIsInRlbXBTdGF0ZXMiLCJzZWdtZW50ZXIiLCJUaW55U2VnbWVudGVyIiwidG9rZW5TZXQiLCJwcmVwYXJlZFNlcXVlbmNlIiwiaXNBYm9ydGVkIiwic2VnbWVudCIsImdlbmVyYXRlIiwiaGludHMiLCJzb2Z0bWF4IiwiTUlOX1ZBTFVFIiwic3VtIiwiaGludERpY3Rpb25hcnkiLCJyZWdleCIsIlJlZ0V4cCIsImNhY2hEaWN0aW9uYXJ5IiwidGVybXMiLCJpc05ldyIsInRhZyIsInByb2JhYmlsaXRpZXMiLCJjYW5kaWRhdGVzIiwiY2FuZGlkYXRlIiwicHJvYmFiaWxpdHkiLCJjaG9pY2UiLCJibGluZGVkIiwidXJsIiwibG9hZCIsImlzQ29tcGxldGVkIiwiaXNMb2FkZWQiLCJzY3JvbGwiLCJzY3JvbGxUb0VuZCIsImNsZWFyVGltZW91dCIsInNjcm9sbFRvIiwic2Nyb2xsSGVpZ2h0IiwiZm9ybWF0RGF0ZSIsIm1vbWVudCIsImxvY2FsZSIsImxhbmd1YWdlIiwiYW5pbWF0aW9uU3RhcnQiLCJhbmltYXRpb25FbmQiLCJ0aWNrZXJVcGRhdGVkIiwicmFuZ2UiLCJjb2xsZWN0aW9uIiwiZGF5IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImFycmFuZ2UiLCJyb3dzIiwiY29sdW1ucyIsImhvdXJzIiwibWludXRlcyIsImxhdDEiLCJsb24xIiwibGF0MiIsImxvbjIiLCJkTGF0IiwiZGVnMnJhZCIsImRMb24iLCJkZWciLCJwcmVjaXNpb24iLCJCSVRTIiwiaXNfZXZlbiIsImxhdCIsImxvbiIsImJpdCIsImNoIiwibWlkIiwiY2QiLCJtYXNrIiwicmlnaHRHZW9oYXNoIiwiY2FsY3VsYXRlQWRqYWNlbnQiLCJsZWZ0R2VvaGFzaCIsInNyY0hhc2giLCJkaXIiLCJORUlHSEJPUlMiLCJldmVuIiwiQk9SREVSUyIsIm9kZCIsImxhc3RDaHIiLCJjaGFyQXQiLCJiYXNlIiwic2VsZWN0ZWRTZXF1ZW5jZXMiLCJfcmFuZG9tIiwiY2hvb3NlZFNlcXVlbmNlcyIsImZsYXR0ZW5lZFNlcXVlbmNlIiwidGVtcFN0YXRlIiwicXVldWUiLCJ0cmFjZWRTZXF1ZW5jZXMiLCJjYWxsYWJsZVNlcXVlbmNlcyIsInNlcXVlbmNlU3RhY2siLCJnZXRTZXF1ZW5jZVN0YWNrIiwic3RhY2siLCJwb3BwZWRTZXF1ZW5jZSIsInRlbXBTdGFjayIsInRlbXBTZXF1ZW5jZSIsInNvdXJjZVNlcXVlbmNlIiwidGFyZ2V0U2VxdWVuY2UiLCJkZWx0YVRpbWUiLCJmcmFtZXMiLCJpbWFnZXMiLCJzcHJpdGVzIiwiYnVmZmVyIiwic291cmNlIiwiY2hhcmFjdGVycyIsImNoYXJBcnJheSIsInJhbmRvbUJ1ZmZlciIsInNwcml0ZSIsInJlbmRlciIsImNhbnZhcyIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiYWx0ZXJuYXRpdmVDYW52YXNXaWR0aCIsImFsdGVybmF0aXZlQ2FudmFzSGVpZ2h0IiwiY2xlYXJSZWN0Iiwib3BhY2l0eSIsInVwZGF0ZWQiLCJpbmRpY2F0b3IiLCJibGFuayIsIm1vdW50ZWQiLCJib3RTdG9yYWdlSXRlbSIsImNyZWRlbnRpYWxTdG9yYWdlSXRlbSIsInN0YXRzU3RvcmFnZUl0ZW0iLCJmcmFnbWVudHNTdG9yYWdlSXRlbSIsImFsdGVybmF0aXZlcyIsImJvdCIsInBhcnNlIiwiY29udGFpbmVyIiwiYWZ0ZXIiLCJtYXBUeXBlSWQiLCJNYXBUeXBlSWQiLCJjYW52YXNMaWdodCIsImVuYWJsZUhpZ2hEcGkiLCJzaG93TG9jYXRlTWVCdXR0b24iLCJzaG93TWFwVHlwZVNlbGVjdG9yIiwic2hvd1pvb21CdXR0b25zIiwic2hvd1NjYWxlYmFyIiwic3VwcG9ydGVkTWFwVHlwZXMiLCJncmF5c2NhbGUiLCJjYW52YXNEYXJrIiwiTGF5ZXIiLCJzZXRWaXNpYmxlIiwibGF5ZXJzIiwiaW5zZXJ0IiwicmVzcG9uc2UxIiwibWV0aG9kIiwiaGVhZGVycyIsIm9rIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwianNvbiIsInJlc3BvbnNlMiIsInJlc3BvbnNlMyIsImJhc2VUaW1lIiwiZmluZCIsInNpZ25JbldpdGhDcmVkZW50aWFsIiwib25BdXRoU3RhdGVDaGFuZ2VkIiwidGVtcFdvcmRzIiwicmVtb3ZlSW5kZXgiLCJvZmYiLCJ1bm1vdW50ZWQiLCJjbGVhckludGVydmFsIiwidnJtTW9kZWwiLCJzY2VuZSIsIm1vdW50Iiwic3RvcFByb3BhZ2F0aW9uIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNK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QU96QixpQkFBaUIsWUFBYW1lLElBQ2pDQSxFQUFNNGhCLG9CQUlWdCtCLE9BQU96QixpQkFBaUIsV0FBWW1lLElBQ2hDQSxFQUFNNGhCLG9CQVFWdCtCLE9BQU96QixpQkFBaUIsY0FBZW1lLElBQ25DQSxFQUFNNGhCLG9CQUVWdCtCLE9BQU91K0IsV0FBVyxnQ0FBZ0NoZ0MsaUJBQWlCLFNBQVVaLElBQ3JFQSxFQUFFNmdDLFFBQ0Y3Z0IsRUFBSUksWUFBYSxFQUVqQkosRUFBSUksWUFBYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2pzXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG4oZnVuY3Rpb24oZixlKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpmLlN0YXRzPWUoKX0pKHRoaXMsZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Yy5hcHBlbmRDaGlsZChhLmRvbSk7cmV0dXJuIGF9ZnVuY3Rpb24gdShhKXtmb3IodmFyIGQ9MDtkPGMuY2hpbGRyZW4ubGVuZ3RoO2QrKyljLmNoaWxkcmVuW2RdLnN0eWxlLmRpc3BsYXk9ZD09PWE/XCJibG9ja1wiOlwibm9uZVwiO2w9YX12YXIgbD0wLGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMFwiO2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xudSgrK2wlYy5jaGlsZHJlbi5sZW5ndGgpfSwhMSk7dmFyIGs9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKSxnPWssYT0wLHI9ZShuZXcgZi5QYW5lbChcIkZQU1wiLFwiIzBmZlwiLFwiIzAwMlwiKSksaD1lKG5ldyBmLlBhbmVsKFwiTVNcIixcIiMwZjBcIixcIiMwMjBcIikpO2lmKHNlbGYucGVyZm9ybWFuY2UmJnNlbGYucGVyZm9ybWFuY2UubWVtb3J5KXZhciB0PWUobmV3IGYuUGFuZWwoXCJNQlwiLFwiI2YwOFwiLFwiIzIwMVwiKSk7dSgwKTtyZXR1cm57UkVWSVNJT046MTYsZG9tOmMsYWRkUGFuZWw6ZSxzaG93UGFuZWw6dSxiZWdpbjpmdW5jdGlvbigpe2s9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7YSsrO3ZhciBjPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCk7aC51cGRhdGUoYy1rLDIwMCk7aWYoYz5nKzFFMyYmKHIudXBkYXRlKDFFMyphLyhjLWcpLDEwMCksZz1jLGE9MCx0KSl7dmFyIGQ9cGVyZm9ybWFuY2UubWVtb3J5O3QudXBkYXRlKGQudXNlZEpTSGVhcFNpemUvXG4xMDQ4NTc2LGQuanNIZWFwU2l6ZUxpbWl0LzEwNDg1NzYpfXJldHVybiBjfSx1cGRhdGU6ZnVuY3Rpb24oKXtrPXRoaXMuZW5kKCl9LGRvbUVsZW1lbnQ6YyxzZXRNb2RlOnV9fTtmLlBhbmVsPWZ1bmN0aW9uKGUsZixsKXt2YXIgYz1JbmZpbml0eSxrPTAsZz1NYXRoLnJvdW5kLGE9Zyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkscj04MCphLGg9NDgqYSx0PTMqYSx2PTIqYSxkPTMqYSxtPTE1KmEsbj03NCphLHA9MzAqYSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cS53aWR0aD1yO3EuaGVpZ2h0PWg7cS5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtoZWlnaHQ6NDhweFwiO3ZhciBiPXEuZ2V0Q29udGV4dChcIjJkXCIpO2IuZm9udD1cImJvbGQgXCIrOSphK1wicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtiLnRleHRCYXNlbGluZT1cInRvcFwiO2IuZmlsbFN0eWxlPWw7Yi5maWxsUmVjdCgwLDAscixoKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZSx0LHYpO1xuYi5maWxsUmVjdChkLG0sbixwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkLG0sbixwKTtyZXR1cm57ZG9tOnEsdXBkYXRlOmZ1bmN0aW9uKGgsdyl7Yz1NYXRoLm1pbihjLGgpO2s9TWF0aC5tYXgoayxoKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9MTtiLmZpbGxSZWN0KDAsMCxyLG0pO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChnKGgpK1wiIFwiK2UrXCIgKFwiK2coYykrXCItXCIrZyhrKStcIilcIix0LHYpO2IuZHJhd0ltYWdlKHEsZCthLG0sbi1hLHAsZCxtLG4tYSxwKTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkK24tYSxtLGEsZygoMS1oL3cpKnApKX19fTtyZXR1cm4gZn0pO1xuIiwiLypcbiAqIGFuaW1lLmpzIHYzLjIuMVxuICogKGMpIDIwMjAgSnVsaWFuIEdhcm5pZXJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogYW5pbWVqcy5jb21cbiAqL1xuXG4vLyBEZWZhdWx0c1xuXG52YXIgZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MgPSB7XG4gIHVwZGF0ZTogbnVsbCxcbiAgYmVnaW46IG51bGwsXG4gIGxvb3BCZWdpbjogbnVsbCxcbiAgY2hhbmdlQmVnaW46IG51bGwsXG4gIGNoYW5nZTogbnVsbCxcbiAgY2hhbmdlQ29tcGxldGU6IG51bGwsXG4gIGxvb3BDb21wbGV0ZTogbnVsbCxcbiAgY29tcGxldGU6IG51bGwsXG4gIGxvb3A6IDEsXG4gIGRpcmVjdGlvbjogJ25vcm1hbCcsXG4gIGF1dG9wbGF5OiB0cnVlLFxuICB0aW1lbGluZU9mZnNldDogMFxufTtcblxudmFyIGRlZmF1bHRUd2VlblNldHRpbmdzID0ge1xuICBkdXJhdGlvbjogMTAwMCxcbiAgZGVsYXk6IDAsXG4gIGVuZERlbGF5OiAwLFxuICBlYXNpbmc6ICdlYXNlT3V0RWxhc3RpYygxLCAuNSknLFxuICByb3VuZDogMFxufTtcblxudmFyIHZhbGlkVHJhbnNmb3JtcyA9IFsndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJywgJ3RyYW5zbGF0ZVonLCAncm90YXRlJywgJ3JvdGF0ZVgnLCAncm90YXRlWScsICdyb3RhdGVaJywgJ3NjYWxlJywgJ3NjYWxlWCcsICdzY2FsZVknLCAnc2NhbGVaJywgJ3NrZXcnLCAnc2tld1gnLCAnc2tld1knLCAncGVyc3BlY3RpdmUnLCAnbWF0cml4JywgJ21hdHJpeDNkJ107XG5cbi8vIENhY2hpbmdcblxudmFyIGNhY2hlID0ge1xuICBDU1M6IHt9LFxuICBzcHJpbmdzOiB7fVxufTtcblxuLy8gVXRpbHNcblxuZnVuY3Rpb24gbWluTWF4KHZhbCwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbCwgbWluKSwgbWF4KTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nQ29udGFpbnMoc3RyLCB0ZXh0KSB7XG4gIHJldHVybiBzdHIuaW5kZXhPZih0ZXh0KSA+IC0xO1xufVxuXG5mdW5jdGlvbiBhcHBseUFyZ3VtZW50cyhmdW5jLCBhcmdzKSB7XG4gIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xufVxuXG52YXIgaXMgPSB7XG4gIGFycjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSk7IH0sXG4gIG9iajogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHN0cmluZ0NvbnRhaW5zKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSwgJ09iamVjdCcpOyB9LFxuICBwdGg6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBpcy5vYmooYSkgJiYgYS5oYXNPd25Qcm9wZXJ0eSgndG90YWxMZW5ndGgnKTsgfSxcbiAgc3ZnOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7IH0sXG4gIGlucDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50OyB9LFxuICBkb206IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm5vZGVUeXBlIHx8IGlzLnN2ZyhhKTsgfSxcbiAgc3RyOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICdzdHJpbmcnOyB9LFxuICBmbmM6IGZ1bmN0aW9uIChhKSB7IHJldHVybiB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJzsgfSxcbiAgdW5kOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnOyB9LFxuICBuaWw6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBpcy51bmQoYSkgfHwgYSA9PT0gbnVsbDsgfSxcbiAgaGV4OiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gLyheI1swLTlBLUZdezZ9JCl8KF4jWzAtOUEtRl17M30kKS9pLnRlc3QoYSk7IH0sXG4gIHJnYjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIC9ecmdiLy50ZXN0KGEpOyB9LFxuICBoc2w6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXmhzbC8udGVzdChhKTsgfSxcbiAgY29sOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gKGlzLmhleChhKSB8fCBpcy5yZ2IoYSkgfHwgaXMuaHNsKGEpKTsgfSxcbiAga2V5OiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gIWRlZmF1bHRJbnN0YW5jZVNldHRpbmdzLmhhc093blByb3BlcnR5KGEpICYmICFkZWZhdWx0VHdlZW5TZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiBhICE9PSAndGFyZ2V0cycgJiYgYSAhPT0gJ2tleWZyYW1lcyc7IH0sXG59O1xuXG4vLyBFYXNpbmdzXG5cbmZ1bmN0aW9uIHBhcnNlRWFzaW5nUGFyYW1ldGVycyhzdHJpbmcpIHtcbiAgdmFyIG1hdGNoID0gL1xcKChbXildKylcXCkvLmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHBhcnNlRmxvYXQocCk7IH0pIDogW107XG59XG5cbi8vIFNwcmluZyBzb2x2ZXIgaW5zcGlyZWQgYnkgV2Via2l0IENvcHlyaWdodCDCqSAyMDE2IEFwcGxlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gaHR0cHM6Ly93ZWJraXQub3JnL2RlbW9zL3NwcmluZy9zcHJpbmcuanNcblxuZnVuY3Rpb24gc3ByaW5nKHN0cmluZywgZHVyYXRpb24pIHtcblxuICB2YXIgcGFyYW1zID0gcGFyc2VFYXNpbmdQYXJhbWV0ZXJzKHN0cmluZyk7XG4gIHZhciBtYXNzID0gbWluTWF4KGlzLnVuZChwYXJhbXNbMF0pID8gMSA6IHBhcmFtc1swXSwgLjEsIDEwMCk7XG4gIHZhciBzdGlmZm5lc3MgPSBtaW5NYXgoaXMudW5kKHBhcmFtc1sxXSkgPyAxMDAgOiBwYXJhbXNbMV0sIC4xLCAxMDApO1xuICB2YXIgZGFtcGluZyA9IG1pbk1heChpcy51bmQocGFyYW1zWzJdKSA/IDEwIDogcGFyYW1zWzJdLCAuMSwgMTAwKTtcbiAgdmFyIHZlbG9jaXR5ID0gIG1pbk1heChpcy51bmQocGFyYW1zWzNdKSA/IDAgOiBwYXJhbXNbM10sIC4xLCAxMDApO1xuICB2YXIgdzAgPSBNYXRoLnNxcnQoc3RpZmZuZXNzIC8gbWFzcyk7XG4gIHZhciB6ZXRhID0gZGFtcGluZyAvICgyICogTWF0aC5zcXJ0KHN0aWZmbmVzcyAqIG1hc3MpKTtcbiAgdmFyIHdkID0gemV0YSA8IDEgPyB3MCAqIE1hdGguc3FydCgxIC0gemV0YSAqIHpldGEpIDogMDtcbiAgdmFyIGEgPSAxO1xuICB2YXIgYiA9IHpldGEgPCAxID8gKHpldGEgKiB3MCArIC12ZWxvY2l0eSkgLyB3ZCA6IC12ZWxvY2l0eSArIHcwO1xuXG4gIGZ1bmN0aW9uIHNvbHZlcih0KSB7XG4gICAgdmFyIHByb2dyZXNzID0gZHVyYXRpb24gPyAoZHVyYXRpb24gKiB0KSAvIDEwMDAgOiB0O1xuICAgIGlmICh6ZXRhIDwgMSkge1xuICAgICAgcHJvZ3Jlc3MgPSBNYXRoLmV4cCgtcHJvZ3Jlc3MgKiB6ZXRhICogdzApICogKGEgKiBNYXRoLmNvcyh3ZCAqIHByb2dyZXNzKSArIGIgKiBNYXRoLnNpbih3ZCAqIHByb2dyZXNzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzID0gKGEgKyBiICogcHJvZ3Jlc3MpICogTWF0aC5leHAoLXByb2dyZXNzICogdzApO1xuICAgIH1cbiAgICBpZiAodCA9PT0gMCB8fCB0ID09PSAxKSB7IHJldHVybiB0OyB9XG4gICAgcmV0dXJuIDEgLSBwcm9ncmVzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgIHZhciBjYWNoZWQgPSBjYWNoZS5zcHJpbmdzW3N0cmluZ107XG4gICAgaWYgKGNhY2hlZCkgeyByZXR1cm4gY2FjaGVkOyB9XG4gICAgdmFyIGZyYW1lID0gMS82O1xuICAgIHZhciBlbGFwc2VkID0gMDtcbiAgICB2YXIgcmVzdCA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgZWxhcHNlZCArPSBmcmFtZTtcbiAgICAgIGlmIChzb2x2ZXIoZWxhcHNlZCkgPT09IDEpIHtcbiAgICAgICAgcmVzdCsrO1xuICAgICAgICBpZiAocmVzdCA+PSAxNikgeyBicmVhazsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdCA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBkdXJhdGlvbiA9IGVsYXBzZWQgKiBmcmFtZSAqIDEwMDA7XG4gICAgY2FjaGUuc3ByaW5nc1tzdHJpbmddID0gZHVyYXRpb247XG4gICAgcmV0dXJuIGR1cmF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGR1cmF0aW9uID8gc29sdmVyIDogZ2V0RHVyYXRpb247XG5cbn1cblxuLy8gQmFzaWMgc3RlcHMgZWFzaW5nIGltcGxlbWVudGF0aW9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2ZyL2RvY3MvV2ViL0NTUy90cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblxuXG5mdW5jdGlvbiBzdGVwcyhzdGVwcykge1xuICBpZiAoIHN0ZXBzID09PSB2b2lkIDAgKSBzdGVwcyA9IDEwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gTWF0aC5jZWlsKChtaW5NYXgodCwgMC4wMDAwMDEsIDEpKSAqIHN0ZXBzKSAqICgxIC8gc3RlcHMpOyB9O1xufVxuXG4vLyBCZXppZXJFYXNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXG5cbnZhciBiZXppZXIgPSAoZnVuY3Rpb24gKCkge1xuXG4gIHZhciBrU3BsaW5lVGFibGVTaXplID0gMTE7XG4gIHZhciBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5cbiAgZnVuY3Rpb24gQShhQTEsIGFBMikgeyByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExIH1cbiAgZnVuY3Rpb24gQihhQTEsIGFBMikgeyByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExIH1cbiAgZnVuY3Rpb24gQyhhQTEpICAgICAgeyByZXR1cm4gMy4wICogYUExIH1cblxuICBmdW5jdGlvbiBjYWxjQmV6aWVyKGFULCBhQTEsIGFBMikgeyByZXR1cm4gKChBKGFBMSwgYUEyKSAqIGFUICsgQihhQTEsIGFBMikpICogYVQgKyBDKGFBMSkpICogYVQgfVxuICBmdW5jdGlvbiBnZXRTbG9wZShhVCwgYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpICogYVQgKiBhVCArIDIuMCAqIEIoYUExLCBhQTIpICogYVQgKyBDKGFBMSkgfVxuXG4gIGZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICAgIHZhciBjdXJyZW50WCwgY3VycmVudFQsIGkgPSAwO1xuICAgIGRvIHtcbiAgICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7IGFCID0gY3VycmVudFQ7IH0gZWxzZSB7IGFBID0gY3VycmVudFQ7IH1cbiAgICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiAwLjAwMDAwMDEgJiYgKytpIDwgMTApO1xuICAgIHJldHVybiBjdXJyZW50VDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICB2YXIgY3VycmVudFNsb3BlID0gZ2V0U2xvcGUoYUd1ZXNzVCwgbVgxLCBtWDIpO1xuICAgICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSB7IHJldHVybiBhR3Vlc3NUOyB9XG4gICAgICB2YXIgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYO1xuICAgICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiAgICB9XG4gICAgcmV0dXJuIGFHdWVzc1Q7XG4gIH1cblxuICBmdW5jdGlvbiBiZXppZXIobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG5cbiAgICBpZiAoISgwIDw9IG1YMSAmJiBtWDEgPD0gMSAmJiAwIDw9IG1YMiAmJiBtWDIgPD0gMSkpIHsgcmV0dXJuOyB9XG4gICAgdmFyIHNhbXBsZVZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG5cbiAgICBpZiAobVgxICE9PSBtWTEgfHwgbVgyICE9PSBtWTIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgICAgIHNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRGb3JYKGFYKSB7XG5cbiAgICAgIHZhciBpbnRlcnZhbFN0YXJ0ID0gMDtcbiAgICAgIHZhciBjdXJyZW50U2FtcGxlID0gMTtcbiAgICAgIHZhciBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG5cbiAgICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDsgKytjdXJyZW50U2FtcGxlKSB7XG4gICAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgfVxuXG4gICAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAgIHZhciBkaXN0ID0gKGFYIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvIChzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZSArIDFdIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKTtcbiAgICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgIHZhciBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcblxuICAgICAgaWYgKGluaXRpYWxTbG9wZSA+PSAwLjAwMSkge1xuICAgICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgICAgfSBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpIHsgcmV0dXJuIHg7IH1cbiAgICAgIGlmICh4ID09PSAwIHx8IHggPT09IDEpIHsgcmV0dXJuIHg7IH1cbiAgICAgIHJldHVybiBjYWxjQmV6aWVyKGdldFRGb3JYKHgpLCBtWTEsIG1ZMik7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gYmV6aWVyO1xuXG59KSgpO1xuXG52YXIgcGVubmVyID0gKGZ1bmN0aW9uICgpIHtcblxuICAvLyBCYXNlZCBvbiBqUXVlcnkgVUkncyBpbXBsZW1lbmF0aW9uIG9mIGVhc2luZyBlcXVhdGlvbnMgZnJvbSBSb2JlcnQgUGVubmVyIChodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nKVxuXG4gIHZhciBlYXNlcyA9IHsgbGluZWFyOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfTsgfSB9O1xuXG4gIHZhciBmdW5jdGlvbkVhc2luZ3MgPSB7XG4gICAgU2luZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogTWF0aC5QSSAvIDIpOyB9OyB9LFxuICAgIENpcmM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCk7IH07IH0sXG4gICAgQmFjazogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgKiB0ICogKDMgKiB0IC0gMik7IH07IH0sXG4gICAgQm91bmNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIHBvdzIsIGIgPSA0O1xuICAgICAgd2hpbGUgKHQgPCAoKCBwb3cyID0gTWF0aC5wb3coMiwgLS1iKSkgLSAxKSAvIDExKSB7fVxuICAgICAgcmV0dXJuIDEgLyBNYXRoLnBvdyg0LCAzIC0gYikgLSA3LjU2MjUgKiBNYXRoLnBvdygoIHBvdzIgKiAzIC0gMiApIC8gMjIgLSB0LCAyKVxuICAgIH07IH0sXG4gICAgRWxhc3RpYzogZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgICBpZiAoIGFtcGxpdHVkZSA9PT0gdm9pZCAwICkgYW1wbGl0dWRlID0gMTtcbiAgICAgIGlmICggcGVyaW9kID09PSB2b2lkIDAgKSBwZXJpb2QgPSAuNTtcblxuICAgICAgdmFyIGEgPSBtaW5NYXgoYW1wbGl0dWRlLCAxLCAxMCk7XG4gICAgICB2YXIgcCA9IG1pbk1heChwZXJpb2QsIC4xLCAyKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gKHQgPT09IDAgfHwgdCA9PT0gMSkgPyB0IDogXG4gICAgICAgICAgLWEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpICogTWF0aC5zaW4oKCgodCAtIDEpIC0gKHAgLyAoTWF0aC5QSSAqIDIpICogTWF0aC5hc2luKDEgLyBhKSkpICogKE1hdGguUEkgKiAyKSkgLyBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGJhc2VFYXNpbmdzID0gWydRdWFkJywgJ0N1YmljJywgJ1F1YXJ0JywgJ1F1aW50JywgJ0V4cG8nXTtcblxuICBiYXNlRWFzaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gICAgZnVuY3Rpb25FYXNpbmdzW25hbWVdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIE1hdGgucG93KHQsIGkgKyAyKTsgfTsgfTtcbiAgfSk7XG5cbiAgT2JqZWN0LmtleXMoZnVuY3Rpb25FYXNpbmdzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGVhc2VJbiA9IGZ1bmN0aW9uRWFzaW5nc1tuYW1lXTtcbiAgICBlYXNlc1snZWFzZUluJyArIG5hbWVdID0gZWFzZUluO1xuICAgIGVhc2VzWydlYXNlT3V0JyArIG5hbWVdID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiAxIC0gZWFzZUluKGEsIGIpKDEgLSB0KTsgfTsgfTtcbiAgICBlYXNlc1snZWFzZUluT3V0JyArIG5hbWVdID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0IDwgMC41ID8gZWFzZUluKGEsIGIpKHQgKiAyKSAvIDIgOiBcbiAgICAgIDEgLSBlYXNlSW4oYSwgYikodCAqIC0yICsgMikgLyAyOyB9OyB9O1xuICAgIGVhc2VzWydlYXNlT3V0SW4nICsgbmFtZV0gPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgPCAwLjUgPyAoMSAtIGVhc2VJbihhLCBiKSgxIC0gdCAqIDIpKSAvIDIgOiBcbiAgICAgIChlYXNlSW4oYSwgYikodCAqIDIgLSAxKSArIDEpIC8gMjsgfTsgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVhc2VzO1xuXG59KSgpO1xuXG5mdW5jdGlvbiBwYXJzZUVhc2luZ3MoZWFzaW5nLCBkdXJhdGlvbikge1xuICBpZiAoaXMuZm5jKGVhc2luZykpIHsgcmV0dXJuIGVhc2luZzsgfVxuICB2YXIgbmFtZSA9IGVhc2luZy5zcGxpdCgnKCcpWzBdO1xuICB2YXIgZWFzZSA9IHBlbm5lcltuYW1lXTtcbiAgdmFyIGFyZ3MgPSBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoZWFzaW5nKTtcbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSAnc3ByaW5nJyA6IHJldHVybiBzcHJpbmcoZWFzaW5nLCBkdXJhdGlvbik7XG4gICAgY2FzZSAnY3ViaWNCZXppZXInIDogcmV0dXJuIGFwcGx5QXJndW1lbnRzKGJlemllciwgYXJncyk7XG4gICAgY2FzZSAnc3RlcHMnIDogcmV0dXJuIGFwcGx5QXJndW1lbnRzKHN0ZXBzLCBhcmdzKTtcbiAgICBkZWZhdWx0IDogcmV0dXJuIGFwcGx5QXJndW1lbnRzKGVhc2UsIGFyZ3MpO1xuICB9XG59XG5cbi8vIFN0cmluZ3NcblxuZnVuY3Rpb24gc2VsZWN0U3RyaW5nKHN0cikge1xuICB0cnkge1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc3RyKTtcbiAgICByZXR1cm4gbm9kZXM7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vLyBBcnJheXNcblxuZnVuY3Rpb24gZmlsdGVyQXJyYXkoYXJyLCBjYWxsYmFjaykge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID49IDIgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpIGluIGFycikge1xuICAgICAgdmFyIHZhbCA9IGFycltpXTtcbiAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbCwgaSwgYXJyKSkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmNvbmNhdChpcy5hcnIoYikgPyBmbGF0dGVuQXJyYXkoYikgOiBiKTsgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG8pIHtcbiAgaWYgKGlzLmFycihvKSkgeyByZXR1cm4gbzsgfVxuICBpZiAoaXMuc3RyKG8pKSB7IG8gPSBzZWxlY3RTdHJpbmcobykgfHwgbzsgfVxuICBpZiAobyBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8IG8gaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbikgeyByZXR1cm4gW10uc2xpY2UuY2FsbChvKTsgfVxuICByZXR1cm4gW29dO1xufVxuXG5mdW5jdGlvbiBhcnJheUNvbnRhaW5zKGFyciwgdmFsKSB7XG4gIHJldHVybiBhcnIuc29tZShmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSA9PT0gdmFsOyB9KTtcbn1cblxuLy8gT2JqZWN0c1xuXG5mdW5jdGlvbiBjbG9uZU9iamVjdChvKSB7XG4gIHZhciBjbG9uZSA9IHt9O1xuICBmb3IgKHZhciBwIGluIG8pIHsgY2xvbmVbcF0gPSBvW3BdOyB9XG4gIHJldHVybiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZU9iamVjdFByb3BzKG8xLCBvMikge1xuICB2YXIgbyA9IGNsb25lT2JqZWN0KG8xKTtcbiAgZm9yICh2YXIgcCBpbiBvMSkgeyBvW3BdID0gbzIuaGFzT3duUHJvcGVydHkocCkgPyBvMltwXSA6IG8xW3BdOyB9XG4gIHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdHMobzEsIG8yKSB7XG4gIHZhciBvID0gY2xvbmVPYmplY3QobzEpO1xuICBmb3IgKHZhciBwIGluIG8yKSB7IG9bcF0gPSBpcy51bmQobzFbcF0pID8gbzJbcF0gOiBvMVtwXTsgfVxuICByZXR1cm4gbztcbn1cblxuLy8gQ29sb3JzXG5cbmZ1bmN0aW9uIHJnYlRvUmdiYShyZ2JWYWx1ZSkge1xuICB2YXIgcmdiID0gL3JnYlxcKChcXGQrLFxccypbXFxkXSssXFxzKltcXGRdKylcXCkvZy5leGVjKHJnYlZhbHVlKTtcbiAgcmV0dXJuIHJnYiA/IChcInJnYmEoXCIgKyAocmdiWzFdKSArIFwiLDEpXCIpIDogcmdiVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGhleFRvUmdiYShoZXhWYWx1ZSkge1xuICB2YXIgcmd4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcbiAgdmFyIGhleCA9IGhleFZhbHVlLnJlcGxhY2Uocmd4LCBmdW5jdGlvbiAobSwgciwgZywgYikgeyByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiOyB9ICk7XG4gIHZhciByZ2IgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgdmFyIHIgPSBwYXJzZUludChyZ2JbMV0sIDE2KTtcbiAgdmFyIGcgPSBwYXJzZUludChyZ2JbMl0sIDE2KTtcbiAgdmFyIGIgPSBwYXJzZUludChyZ2JbM10sIDE2KTtcbiAgcmV0dXJuIChcInJnYmEoXCIgKyByICsgXCIsXCIgKyBnICsgXCIsXCIgKyBiICsgXCIsMSlcIik7XG59XG5cbmZ1bmN0aW9uIGhzbFRvUmdiYShoc2xWYWx1ZSkge1xuICB2YXIgaHNsID0gL2hzbFxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJVxcKS9nLmV4ZWMoaHNsVmFsdWUpIHx8IC9oc2xhXFwoKFxcZCspLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKylcXCkvZy5leGVjKGhzbFZhbHVlKTtcbiAgdmFyIGggPSBwYXJzZUludChoc2xbMV0sIDEwKSAvIDM2MDtcbiAgdmFyIHMgPSBwYXJzZUludChoc2xbMl0sIDEwKSAvIDEwMDtcbiAgdmFyIGwgPSBwYXJzZUludChoc2xbM10sIDEwKSAvIDEwMDtcbiAgdmFyIGEgPSBoc2xbNF0gfHwgMTtcbiAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7IHQgKz0gMTsgfVxuICAgIGlmICh0ID4gMSkgeyB0IC09IDE7IH1cbiAgICBpZiAodCA8IDEvNikgeyByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDsgfVxuICAgIGlmICh0IDwgMS8yKSB7IHJldHVybiBxOyB9XG4gICAgaWYgKHQgPCAyLzMpIHsgcmV0dXJuIHAgKyAocSAtIHApICogKDIvMyAtIHQpICogNjsgfVxuICAgIHJldHVybiBwO1xuICB9XG4gIHZhciByLCBnLCBiO1xuICBpZiAocyA9PSAwKSB7XG4gICAgciA9IGcgPSBiID0gbDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEvMyk7XG4gICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEvMyk7XG4gIH1cbiAgcmV0dXJuIChcInJnYmEoXCIgKyAociAqIDI1NSkgKyBcIixcIiArIChnICogMjU1KSArIFwiLFwiICsgKGIgKiAyNTUpICsgXCIsXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBjb2xvclRvUmdiKHZhbCkge1xuICBpZiAoaXMucmdiKHZhbCkpIHsgcmV0dXJuIHJnYlRvUmdiYSh2YWwpOyB9XG4gIGlmIChpcy5oZXgodmFsKSkgeyByZXR1cm4gaGV4VG9SZ2JhKHZhbCk7IH1cbiAgaWYgKGlzLmhzbCh2YWwpKSB7IHJldHVybiBoc2xUb1JnYmEodmFsKTsgfVxufVxuXG4vLyBVbml0c1xuXG5mdW5jdGlvbiBnZXRVbml0KHZhbCkge1xuICB2YXIgc3BsaXQgPSAvWystXT9cXGQqXFwuP1xcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT8oJXxweHxwdHxlbXxyZW18aW58Y218bW18ZXh8Y2h8cGN8dnd8dmh8dm1pbnx2bWF4fGRlZ3xyYWR8dHVybik/JC8uZXhlYyh2YWwpO1xuICBpZiAoc3BsaXQpIHsgcmV0dXJuIHNwbGl0WzFdOyB9XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpIHtcbiAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAndHJhbnNsYXRlJykgfHwgcHJvcE5hbWUgPT09ICdwZXJzcGVjdGl2ZScpIHsgcmV0dXJuICdweCc7IH1cbiAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAncm90YXRlJykgfHwgc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdza2V3JykpIHsgcmV0dXJuICdkZWcnOyB9XG59XG5cbi8vIFZhbHVlc1xuXG5mdW5jdGlvbiBnZXRGdW5jdGlvblZhbHVlKHZhbCwgYW5pbWF0YWJsZSkge1xuICBpZiAoIWlzLmZuYyh2YWwpKSB7IHJldHVybiB2YWw7IH1cbiAgcmV0dXJuIHZhbChhbmltYXRhYmxlLnRhcmdldCwgYW5pbWF0YWJsZS5pZCwgYW5pbWF0YWJsZS50b3RhbCk7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbCwgcHJvcCkge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHByb3ApO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSB7XG4gIHZhciB2YWx1ZVVuaXQgPSBnZXRVbml0KHZhbHVlKTtcbiAgaWYgKGFycmF5Q29udGFpbnMoW3VuaXQsICdkZWcnLCAncmFkJywgJ3R1cm4nXSwgdmFsdWVVbml0KSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgdmFyIGNhY2hlZCA9IGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdO1xuICBpZiAoIWlzLnVuZChjYWNoZWQpKSB7IHJldHVybiBjYWNoZWQ7IH1cbiAgdmFyIGJhc2VsaW5lID0gMTAwO1xuICB2YXIgdGVtcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbC50YWdOYW1lKTtcbiAgdmFyIHBhcmVudEVsID0gKGVsLnBhcmVudE5vZGUgJiYgKGVsLnBhcmVudE5vZGUgIT09IGRvY3VtZW50KSkgPyBlbC5wYXJlbnROb2RlIDogZG9jdW1lbnQuYm9keTtcbiAgcGFyZW50RWwuYXBwZW5kQ2hpbGQodGVtcEVsKTtcbiAgdGVtcEVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgdGVtcEVsLnN0eWxlLndpZHRoID0gYmFzZWxpbmUgKyB1bml0O1xuICB2YXIgZmFjdG9yID0gYmFzZWxpbmUgLyB0ZW1wRWwub2Zmc2V0V2lkdGg7XG4gIHBhcmVudEVsLnJlbW92ZUNoaWxkKHRlbXBFbCk7XG4gIHZhciBjb252ZXJ0ZWRVbml0ID0gZmFjdG9yICogcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdID0gY29udmVydGVkVW5pdDtcbiAgcmV0dXJuIGNvbnZlcnRlZFVuaXQ7XG59XG5cbmZ1bmN0aW9uIGdldENTU1ZhbHVlKGVsLCBwcm9wLCB1bml0KSB7XG4gIGlmIChwcm9wIGluIGVsLnN0eWxlKSB7XG4gICAgdmFyIHVwcGVyY2FzZVByb3BOYW1lID0gcHJvcC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciB2YWx1ZSA9IGVsLnN0eWxlW3Byb3BdIHx8IGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUodXBwZXJjYXNlUHJvcE5hbWUpIHx8ICcwJztcbiAgICByZXR1cm4gdW5pdCA/IGNvbnZlcnRQeFRvVW5pdChlbCwgdmFsdWUsIHVuaXQpIDogdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVHlwZShlbCwgcHJvcCkge1xuICBpZiAoaXMuZG9tKGVsKSAmJiAhaXMuaW5wKGVsKSAmJiAoIWlzLm5pbChnZXRBdHRyaWJ1dGUoZWwsIHByb3ApKSB8fCAoaXMuc3ZnKGVsKSAmJiBlbFtwcm9wXSkpKSB7IHJldHVybiAnYXR0cmlidXRlJzsgfVxuICBpZiAoaXMuZG9tKGVsKSAmJiBhcnJheUNvbnRhaW5zKHZhbGlkVHJhbnNmb3JtcywgcHJvcCkpIHsgcmV0dXJuICd0cmFuc2Zvcm0nOyB9XG4gIGlmIChpcy5kb20oZWwpICYmIChwcm9wICE9PSAndHJhbnNmb3JtJyAmJiBnZXRDU1NWYWx1ZShlbCwgcHJvcCkpKSB7IHJldHVybiAnY3NzJzsgfVxuICBpZiAoZWxbcHJvcF0gIT0gbnVsbCkgeyByZXR1cm4gJ29iamVjdCc7IH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpIHtcbiAgaWYgKCFpcy5kb20oZWwpKSB7IHJldHVybjsgfVxuICB2YXIgc3RyID0gZWwuc3R5bGUudHJhbnNmb3JtIHx8ICcnO1xuICB2YXIgcmVnICA9IC8oXFx3KylcXCgoW14pXSopXFwpL2c7XG4gIHZhciB0cmFuc2Zvcm1zID0gbmV3IE1hcCgpO1xuICB2YXIgbTsgd2hpbGUgKG0gPSByZWcuZXhlYyhzdHIpKSB7IHRyYW5zZm9ybXMuc2V0KG1bMV0sIG1bMl0pOyB9XG4gIHJldHVybiB0cmFuc2Zvcm1zO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1WYWx1ZShlbCwgcHJvcE5hbWUsIGFuaW1hdGFibGUsIHVuaXQpIHtcbiAgdmFyIGRlZmF1bHRWYWwgPSBzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3NjYWxlJykgPyAxIDogMCArIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpO1xuICB2YXIgdmFsdWUgPSBnZXRFbGVtZW50VHJhbnNmb3JtcyhlbCkuZ2V0KHByb3BOYW1lKSB8fCBkZWZhdWx0VmFsO1xuICBpZiAoYW5pbWF0YWJsZSkge1xuICAgIGFuaW1hdGFibGUudHJhbnNmb3Jtcy5saXN0LnNldChwcm9wTmFtZSwgdmFsdWUpO1xuICAgIGFuaW1hdGFibGUudHJhbnNmb3Jtc1snbGFzdCddID0gcHJvcE5hbWU7XG4gIH1cbiAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcE5hbWUsIHVuaXQsIGFuaW1hdGFibGUpIHtcbiAgc3dpdGNoIChnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcE5hbWUpKSB7XG4gICAgY2FzZSAndHJhbnNmb3JtJzogcmV0dXJuIGdldFRyYW5zZm9ybVZhbHVlKHRhcmdldCwgcHJvcE5hbWUsIGFuaW1hdGFibGUsIHVuaXQpO1xuICAgIGNhc2UgJ2Nzcyc6IHJldHVybiBnZXRDU1NWYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCB1bml0KTtcbiAgICBjYXNlICdhdHRyaWJ1dGUnOiByZXR1cm4gZ2V0QXR0cmlidXRlKHRhcmdldCwgcHJvcE5hbWUpO1xuICAgIGRlZmF1bHQ6IHJldHVybiB0YXJnZXRbcHJvcE5hbWVdIHx8IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSkge1xuICB2YXIgb3BlcmF0b3IgPSAvXihcXCo9fFxcKz18LT0pLy5leGVjKHRvKTtcbiAgaWYgKCFvcGVyYXRvcikgeyByZXR1cm4gdG87IH1cbiAgdmFyIHUgPSBnZXRVbml0KHRvKSB8fCAwO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoZnJvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdCh0by5yZXBsYWNlKG9wZXJhdG9yWzBdLCAnJykpO1xuICBzd2l0Y2ggKG9wZXJhdG9yWzBdWzBdKSB7XG4gICAgY2FzZSAnKyc6IHJldHVybiB4ICsgeSArIHU7XG4gICAgY2FzZSAnLSc6IHJldHVybiB4IC0geSArIHU7XG4gICAgY2FzZSAnKic6IHJldHVybiB4ICogeSArIHU7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWwsIHVuaXQpIHtcbiAgaWYgKGlzLmNvbCh2YWwpKSB7IHJldHVybiBjb2xvclRvUmdiKHZhbCk7IH1cbiAgaWYgKC9cXHMvZy50ZXN0KHZhbCkpIHsgcmV0dXJuIHZhbDsgfVxuICB2YXIgb3JpZ2luYWxVbml0ID0gZ2V0VW5pdCh2YWwpO1xuICB2YXIgdW5pdExlc3MgPSBvcmlnaW5hbFVuaXQgPyB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSBvcmlnaW5hbFVuaXQubGVuZ3RoKSA6IHZhbDtcbiAgaWYgKHVuaXQpIHsgcmV0dXJuIHVuaXRMZXNzICsgdW5pdDsgfVxuICByZXR1cm4gdW5pdExlc3M7XG59XG5cbi8vIGdldFRvdGFsTGVuZ3RoKCkgZXF1aXZhbGVudCBmb3IgY2lyY2xlLCByZWN0LCBwb2x5bGluZSwgcG9seWdvbiBhbmQgbGluZSBzaGFwZXNcbi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9TZWJMYW1ibGEvM2UwNTUwYzQ5NmMyMzY3MDk3NDRcblxuZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocDIueCAtIHAxLngsIDIpICsgTWF0aC5wb3cocDIueSAtIHAxLnksIDIpKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2lyY2xlTGVuZ3RoKGVsKSB7XG4gIHJldHVybiBNYXRoLlBJICogMiAqIGdldEF0dHJpYnV0ZShlbCwgJ3InKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVjdExlbmd0aChlbCkge1xuICByZXR1cm4gKGdldEF0dHJpYnV0ZShlbCwgJ3dpZHRoJykgKiAyKSArIChnZXRBdHRyaWJ1dGUoZWwsICdoZWlnaHQnKSAqIDIpO1xufVxuXG5mdW5jdGlvbiBnZXRMaW5lTGVuZ3RoKGVsKSB7XG4gIHJldHVybiBnZXREaXN0YW5jZShcbiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDEnKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTEnKX0sIFxuICAgIHt4OiBnZXRBdHRyaWJ1dGUoZWwsICd4MicpLCB5OiBnZXRBdHRyaWJ1dGUoZWwsICd5MicpfVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRQb2x5bGluZUxlbmd0aChlbCkge1xuICB2YXIgcG9pbnRzID0gZWwucG9pbnRzO1xuICB2YXIgdG90YWxMZW5ndGggPSAwO1xuICB2YXIgcHJldmlvdXNQb3M7XG4gIGZvciAodmFyIGkgPSAwIDsgaSA8IHBvaW50cy5udW1iZXJPZkl0ZW1zOyBpKyspIHtcbiAgICB2YXIgY3VycmVudFBvcyA9IHBvaW50cy5nZXRJdGVtKGkpO1xuICAgIGlmIChpID4gMCkgeyB0b3RhbExlbmd0aCArPSBnZXREaXN0YW5jZShwcmV2aW91c1BvcywgY3VycmVudFBvcyk7IH1cbiAgICBwcmV2aW91c1BvcyA9IGN1cnJlbnRQb3M7XG4gIH1cbiAgcmV0dXJuIHRvdGFsTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBnZXRQb2x5Z29uTGVuZ3RoKGVsKSB7XG4gIHZhciBwb2ludHMgPSBlbC5wb2ludHM7XG4gIHJldHVybiBnZXRQb2x5bGluZUxlbmd0aChlbCkgKyBnZXREaXN0YW5jZShwb2ludHMuZ2V0SXRlbShwb2ludHMubnVtYmVyT2ZJdGVtcyAtIDEpLCBwb2ludHMuZ2V0SXRlbSgwKSk7XG59XG5cbi8vIFBhdGggYW5pbWF0aW9uXG5cbmZ1bmN0aW9uIGdldFRvdGFsTGVuZ3RoKGVsKSB7XG4gIGlmIChlbC5nZXRUb3RhbExlbmd0aCkgeyByZXR1cm4gZWwuZ2V0VG90YWxMZW5ndGgoKTsgfVxuICBzd2l0Y2goZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnY2lyY2xlJzogcmV0dXJuIGdldENpcmNsZUxlbmd0aChlbCk7XG4gICAgY2FzZSAncmVjdCc6IHJldHVybiBnZXRSZWN0TGVuZ3RoKGVsKTtcbiAgICBjYXNlICdsaW5lJzogcmV0dXJuIGdldExpbmVMZW5ndGgoZWwpO1xuICAgIGNhc2UgJ3BvbHlsaW5lJzogcmV0dXJuIGdldFBvbHlsaW5lTGVuZ3RoKGVsKTtcbiAgICBjYXNlICdwb2x5Z29uJzogcmV0dXJuIGdldFBvbHlnb25MZW5ndGgoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldERhc2hvZmZzZXQoZWwpIHtcbiAgdmFyIHBhdGhMZW5ndGggPSBnZXRUb3RhbExlbmd0aChlbCk7XG4gIGVsLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsIHBhdGhMZW5ndGgpO1xuICByZXR1cm4gcGF0aExlbmd0aDtcbn1cblxuLy8gTW90aW9uIHBhdGhcblxuZnVuY3Rpb24gZ2V0UGFyZW50U3ZnRWwoZWwpIHtcbiAgdmFyIHBhcmVudEVsID0gZWwucGFyZW50Tm9kZTtcbiAgd2hpbGUgKGlzLnN2ZyhwYXJlbnRFbCkpIHtcbiAgICBpZiAoIWlzLnN2ZyhwYXJlbnRFbC5wYXJlbnROb2RlKSkgeyBicmVhazsgfVxuICAgIHBhcmVudEVsID0gcGFyZW50RWwucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gcGFyZW50RWw7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudFN2ZyhwYXRoRWwsIHN2Z0RhdGEpIHtcbiAgdmFyIHN2ZyA9IHN2Z0RhdGEgfHwge307XG4gIHZhciBwYXJlbnRTdmdFbCA9IHN2Zy5lbCB8fCBnZXRQYXJlbnRTdmdFbChwYXRoRWwpO1xuICB2YXIgcmVjdCA9IHBhcmVudFN2Z0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdmlld0JveEF0dHIgPSBnZXRBdHRyaWJ1dGUocGFyZW50U3ZnRWwsICd2aWV3Qm94Jyk7XG4gIHZhciB3aWR0aCA9IHJlY3Qud2lkdGg7XG4gIHZhciBoZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgdmFyIHZpZXdCb3ggPSBzdmcudmlld0JveCB8fCAodmlld0JveEF0dHIgPyB2aWV3Qm94QXR0ci5zcGxpdCgnICcpIDogWzAsIDAsIHdpZHRoLCBoZWlnaHRdKTtcbiAgcmV0dXJuIHtcbiAgICBlbDogcGFyZW50U3ZnRWwsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICB4OiB2aWV3Qm94WzBdIC8gMSxcbiAgICB5OiB2aWV3Qm94WzFdIC8gMSxcbiAgICB3OiB3aWR0aCxcbiAgICBoOiBoZWlnaHQsXG4gICAgdlc6IHZpZXdCb3hbMl0sXG4gICAgdkg6IHZpZXdCb3hbM11cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXRoKHBhdGgsIHBlcmNlbnQpIHtcbiAgdmFyIHBhdGhFbCA9IGlzLnN0cihwYXRoKSA/IHNlbGVjdFN0cmluZyhwYXRoKVswXSA6IHBhdGg7XG4gIHZhciBwID0gcGVyY2VudCB8fCAxMDA7XG4gIHJldHVybiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9wZXJ0eTogcHJvcGVydHksXG4gICAgICBlbDogcGF0aEVsLFxuICAgICAgc3ZnOiBnZXRQYXJlbnRTdmcocGF0aEVsKSxcbiAgICAgIHRvdGFsTGVuZ3RoOiBnZXRUb3RhbExlbmd0aChwYXRoRWwpICogKHAgLyAxMDApXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhdGhQcm9ncmVzcyhwYXRoLCBwcm9ncmVzcywgaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHKSB7XG4gIGZ1bmN0aW9uIHBvaW50KG9mZnNldCkge1xuICAgIGlmICggb2Zmc2V0ID09PSB2b2lkIDAgKSBvZmZzZXQgPSAwO1xuXG4gICAgdmFyIGwgPSBwcm9ncmVzcyArIG9mZnNldCA+PSAxID8gcHJvZ3Jlc3MgKyBvZmZzZXQgOiAwO1xuICAgIHJldHVybiBwYXRoLmVsLmdldFBvaW50QXRMZW5ndGgobCk7XG4gIH1cbiAgdmFyIHN2ZyA9IGdldFBhcmVudFN2ZyhwYXRoLmVsLCBwYXRoLnN2Zyk7XG4gIHZhciBwID0gcG9pbnQoKTtcbiAgdmFyIHAwID0gcG9pbnQoLTEpO1xuICB2YXIgcDEgPSBwb2ludCgrMSk7XG4gIHZhciBzY2FsZVggPSBpc1BhdGhUYXJnZXRJbnNpZGVTVkcgPyAxIDogc3ZnLncgLyBzdmcudlc7XG4gIHZhciBzY2FsZVkgPSBpc1BhdGhUYXJnZXRJbnNpZGVTVkcgPyAxIDogc3ZnLmggLyBzdmcudkg7XG4gIHN3aXRjaCAocGF0aC5wcm9wZXJ0eSkge1xuICAgIGNhc2UgJ3gnOiByZXR1cm4gKHAueCAtIHN2Zy54KSAqIHNjYWxlWDtcbiAgICBjYXNlICd5JzogcmV0dXJuIChwLnkgLSBzdmcueSkgKiBzY2FsZVk7XG4gICAgY2FzZSAnYW5nbGUnOiByZXR1cm4gTWF0aC5hdGFuMihwMS55IC0gcDAueSwgcDEueCAtIHAwLngpICogMTgwIC8gTWF0aC5QSTtcbiAgfVxufVxuXG4vLyBEZWNvbXBvc2UgdmFsdWVcblxuZnVuY3Rpb24gZGVjb21wb3NlVmFsdWUodmFsLCB1bml0KSB7XG4gIC8vIGNvbnN0IHJneCA9IC8tP1xcZCpcXC4/XFxkKy9nOyAvLyBoYW5kbGVzIGJhc2ljIG51bWJlcnNcbiAgLy8gY29uc3Qgcmd4ID0gL1srLV0/XFxkKyg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPy9nOyAvLyBoYW5kbGVzIGV4cG9uZW50cyBub3RhdGlvblxuICB2YXIgcmd4ID0gL1srLV0/XFxkKlxcLj9cXGQrKD86XFwuXFxkKyk/KD86W2VFXVsrLV0/XFxkKyk/L2c7IC8vIGhhbmRsZXMgZXhwb25lbnRzIG5vdGF0aW9uXG4gIHZhciB2YWx1ZSA9IHZhbGlkYXRlVmFsdWUoKGlzLnB0aCh2YWwpID8gdmFsLnRvdGFsTGVuZ3RoIDogdmFsKSwgdW5pdCkgKyAnJztcbiAgcmV0dXJuIHtcbiAgICBvcmlnaW5hbDogdmFsdWUsXG4gICAgbnVtYmVyczogdmFsdWUubWF0Y2gocmd4KSA/IHZhbHVlLm1hdGNoKHJneCkubWFwKE51bWJlcikgOiBbMF0sXG4gICAgc3RyaW5nczogKGlzLnN0cih2YWwpIHx8IHVuaXQpID8gdmFsdWUuc3BsaXQocmd4KSA6IFtdXG4gIH1cbn1cblxuLy8gQW5pbWF0YWJsZXNcblxuZnVuY3Rpb24gcGFyc2VUYXJnZXRzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldHNBcnJheSA9IHRhcmdldHMgPyAoZmxhdHRlbkFycmF5KGlzLmFycih0YXJnZXRzKSA/IHRhcmdldHMubWFwKHRvQXJyYXkpIDogdG9BcnJheSh0YXJnZXRzKSkpIDogW107XG4gIHJldHVybiBmaWx0ZXJBcnJheSh0YXJnZXRzQXJyYXksIGZ1bmN0aW9uIChpdGVtLCBwb3MsIHNlbGYpIHsgcmV0dXJuIHNlbGYuaW5kZXhPZihpdGVtKSA9PT0gcG9zOyB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZXModGFyZ2V0cykge1xuICB2YXIgcGFyc2VkID0gcGFyc2VUYXJnZXRzKHRhcmdldHMpO1xuICByZXR1cm4gcGFyc2VkLm1hcChmdW5jdGlvbiAodCwgaSkge1xuICAgIHJldHVybiB7dGFyZ2V0OiB0LCBpZDogaSwgdG90YWw6IHBhcnNlZC5sZW5ndGgsIHRyYW5zZm9ybXM6IHsgbGlzdDogZ2V0RWxlbWVudFRyYW5zZm9ybXModCkgfSB9O1xuICB9KTtcbn1cblxuLy8gUHJvcGVydGllc1xuXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwcm9wLCB0d2VlblNldHRpbmdzKSB7XG4gIHZhciBzZXR0aW5ncyA9IGNsb25lT2JqZWN0KHR3ZWVuU2V0dGluZ3MpO1xuICAvLyBPdmVycmlkZSBkdXJhdGlvbiBpZiBlYXNpbmcgaXMgYSBzcHJpbmdcbiAgaWYgKC9ec3ByaW5nLy50ZXN0KHNldHRpbmdzLmVhc2luZykpIHsgc2V0dGluZ3MuZHVyYXRpb24gPSBzcHJpbmcoc2V0dGluZ3MuZWFzaW5nKTsgfVxuICBpZiAoaXMuYXJyKHByb3ApKSB7XG4gICAgdmFyIGwgPSBwcm9wLmxlbmd0aDtcbiAgICB2YXIgaXNGcm9tVG8gPSAobCA9PT0gMiAmJiAhaXMub2JqKHByb3BbMF0pKTtcbiAgICBpZiAoIWlzRnJvbVRvKSB7XG4gICAgICAvLyBEdXJhdGlvbiBkaXZpZGVkIGJ5IHRoZSBudW1iZXIgb2YgdHdlZW5zXG4gICAgICBpZiAoIWlzLmZuYyh0d2VlblNldHRpbmdzLmR1cmF0aW9uKSkgeyBzZXR0aW5ncy5kdXJhdGlvbiA9IHR3ZWVuU2V0dGluZ3MuZHVyYXRpb24gLyBsOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRyYW5zZm9ybSBbZnJvbSwgdG9dIHZhbHVlcyBzaG9ydGhhbmQgdG8gYSB2YWxpZCB0d2VlbiB2YWx1ZVxuICAgICAgcHJvcCA9IHt2YWx1ZTogcHJvcH07XG4gICAgfVxuICB9XG4gIHZhciBwcm9wQXJyYXkgPSBpcy5hcnIocHJvcCkgPyBwcm9wIDogW3Byb3BdO1xuICByZXR1cm4gcHJvcEFycmF5Lm1hcChmdW5jdGlvbiAodiwgaSkge1xuICAgIHZhciBvYmogPSAoaXMub2JqKHYpICYmICFpcy5wdGgodikpID8gdiA6IHt2YWx1ZTogdn07XG4gICAgLy8gRGVmYXVsdCBkZWxheSB2YWx1ZSBzaG91bGQgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBmaXJzdCB0d2VlblxuICAgIGlmIChpcy51bmQob2JqLmRlbGF5KSkgeyBvYmouZGVsYXkgPSAhaSA/IHR3ZWVuU2V0dGluZ3MuZGVsYXkgOiAwOyB9XG4gICAgLy8gRGVmYXVsdCBlbmREZWxheSB2YWx1ZSBzaG91bGQgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBsYXN0IHR3ZWVuXG4gICAgaWYgKGlzLnVuZChvYmouZW5kRGVsYXkpKSB7IG9iai5lbmREZWxheSA9IGkgPT09IHByb3BBcnJheS5sZW5ndGggLSAxID8gdHdlZW5TZXR0aW5ncy5lbmREZWxheSA6IDA7IH1cbiAgICByZXR1cm4gb2JqO1xuICB9KS5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIG1lcmdlT2JqZWN0cyhrLCBzZXR0aW5ncyk7IH0pO1xufVxuXG5cbmZ1bmN0aW9uIGZsYXR0ZW5LZXlmcmFtZXMoa2V5ZnJhbWVzKSB7XG4gIHZhciBwcm9wZXJ0eU5hbWVzID0gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGtleWZyYW1lcy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gT2JqZWN0LmtleXMoa2V5KTsgfSkpLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gaXMua2V5KHApOyB9KVxuICAucmVkdWNlKGZ1bmN0aW9uIChhLGIpIHsgaWYgKGEuaW5kZXhPZihiKSA8IDApIHsgYS5wdXNoKGIpOyB9IHJldHVybiBhOyB9LCBbXSk7XG4gIHZhciBwcm9wZXJ0aWVzID0ge307XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5TmFtZXNbaV07XG4gICAgcHJvcGVydGllc1twcm9wTmFtZV0gPSBrZXlmcmFtZXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBuZXdLZXkgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4ga2V5KSB7XG4gICAgICAgIGlmIChpcy5rZXkocCkpIHtcbiAgICAgICAgICBpZiAocCA9PSBwcm9wTmFtZSkgeyBuZXdLZXkudmFsdWUgPSBrZXlbcF07IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdLZXlbcF0gPSBrZXlbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdLZXk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7XG4gIHJldHVybiBwcm9wZXJ0aWVzO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKHR3ZWVuU2V0dGluZ3MsIHBhcmFtcykge1xuICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICB2YXIga2V5ZnJhbWVzID0gcGFyYW1zLmtleWZyYW1lcztcbiAgaWYgKGtleWZyYW1lcykgeyBwYXJhbXMgPSBtZXJnZU9iamVjdHMoZmxhdHRlbktleWZyYW1lcyhrZXlmcmFtZXMpLCBwYXJhbXMpOyB9XG4gIGZvciAodmFyIHAgaW4gcGFyYW1zKSB7XG4gICAgaWYgKGlzLmtleShwKSkge1xuICAgICAgcHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgbmFtZTogcCxcbiAgICAgICAgdHdlZW5zOiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwYXJhbXNbcF0sIHR3ZWVuU2V0dGluZ3MpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BlcnRpZXM7XG59XG5cbi8vIFR3ZWVuc1xuXG5mdW5jdGlvbiBub3JtYWxpemVUd2VlblZhbHVlcyh0d2VlbiwgYW5pbWF0YWJsZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHR3ZWVuKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0RnVuY3Rpb25WYWx1ZSh0d2VlbltwXSwgYW5pbWF0YWJsZSk7XG4gICAgaWYgKGlzLmFycih2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBnZXRGdW5jdGlvblZhbHVlKHYsIGFuaW1hdGFibGUpOyB9KTtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDEpIHsgdmFsdWUgPSB2YWx1ZVswXTsgfVxuICAgIH1cbiAgICB0W3BdID0gdmFsdWU7XG4gIH1cbiAgdC5kdXJhdGlvbiA9IHBhcnNlRmxvYXQodC5kdXJhdGlvbik7XG4gIHQuZGVsYXkgPSBwYXJzZUZsb2F0KHQuZGVsYXkpO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpIHtcbiAgdmFyIHByZXZpb3VzVHdlZW47XG4gIHJldHVybiBwcm9wLnR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgdHdlZW4gPSBub3JtYWxpemVUd2VlblZhbHVlcyh0LCBhbmltYXRhYmxlKTtcbiAgICB2YXIgdHdlZW5WYWx1ZSA9IHR3ZWVuLnZhbHVlO1xuICAgIHZhciB0byA9IGlzLmFycih0d2VlblZhbHVlKSA/IHR3ZWVuVmFsdWVbMV0gOiB0d2VlblZhbHVlO1xuICAgIHZhciB0b1VuaXQgPSBnZXRVbml0KHRvKTtcbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWUoYW5pbWF0YWJsZS50YXJnZXQsIHByb3AubmFtZSwgdG9Vbml0LCBhbmltYXRhYmxlKTtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVHdlZW4gPyBwcmV2aW91c1R3ZWVuLnRvLm9yaWdpbmFsIDogb3JpZ2luYWxWYWx1ZTtcbiAgICB2YXIgZnJvbSA9IGlzLmFycih0d2VlblZhbHVlKSA/IHR3ZWVuVmFsdWVbMF0gOiBwcmV2aW91c1ZhbHVlO1xuICAgIHZhciBmcm9tVW5pdCA9IGdldFVuaXQoZnJvbSkgfHwgZ2V0VW5pdChvcmlnaW5hbFZhbHVlKTtcbiAgICB2YXIgdW5pdCA9IHRvVW5pdCB8fCBmcm9tVW5pdDtcbiAgICBpZiAoaXMudW5kKHRvKSkgeyB0byA9IHByZXZpb3VzVmFsdWU7IH1cbiAgICB0d2Vlbi5mcm9tID0gZGVjb21wb3NlVmFsdWUoZnJvbSwgdW5pdCk7XG4gICAgdHdlZW4udG8gPSBkZWNvbXBvc2VWYWx1ZShnZXRSZWxhdGl2ZVZhbHVlKHRvLCBmcm9tKSwgdW5pdCk7XG4gICAgdHdlZW4uc3RhcnQgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi5lbmQgOiAwO1xuICAgIHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0ICsgdHdlZW4uZGVsYXkgKyB0d2Vlbi5kdXJhdGlvbiArIHR3ZWVuLmVuZERlbGF5O1xuICAgIHR3ZWVuLmVhc2luZyA9IHBhcnNlRWFzaW5ncyh0d2Vlbi5lYXNpbmcsIHR3ZWVuLmR1cmF0aW9uKTtcbiAgICB0d2Vlbi5pc1BhdGggPSBpcy5wdGgodHdlZW5WYWx1ZSk7XG4gICAgdHdlZW4uaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHID0gdHdlZW4uaXNQYXRoICYmIGlzLnN2ZyhhbmltYXRhYmxlLnRhcmdldCk7XG4gICAgdHdlZW4uaXNDb2xvciA9IGlzLmNvbCh0d2Vlbi5mcm9tLm9yaWdpbmFsKTtcbiAgICBpZiAodHdlZW4uaXNDb2xvcikgeyB0d2Vlbi5yb3VuZCA9IDE7IH1cbiAgICBwcmV2aW91c1R3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9KTtcbn1cblxuLy8gVHdlZW4gcHJvZ3Jlc3NcblxudmFyIHNldFByb2dyZXNzVmFsdWUgPSB7XG4gIGNzczogZnVuY3Rpb24gKHQsIHAsIHYpIHsgcmV0dXJuIHQuc3R5bGVbcF0gPSB2OyB9LFxuICBhdHRyaWJ1dGU6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnNldEF0dHJpYnV0ZShwLCB2KTsgfSxcbiAgb2JqZWN0OiBmdW5jdGlvbiAodCwgcCwgdikgeyByZXR1cm4gdFtwXSA9IHY7IH0sXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gKHQsIHAsIHYsIHRyYW5zZm9ybXMsIG1hbnVhbCkge1xuICAgIHRyYW5zZm9ybXMubGlzdC5zZXQocCwgdik7XG4gICAgaWYgKHAgPT09IHRyYW5zZm9ybXMubGFzdCB8fCBtYW51YWwpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIHRyYW5zZm9ybXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgcHJvcCkgeyBzdHIgKz0gcHJvcCArIFwiKFwiICsgdmFsdWUgKyBcIikgXCI7IH0pO1xuICAgICAgdC5zdHlsZS50cmFuc2Zvcm0gPSBzdHI7XG4gICAgfVxuICB9XG59O1xuXG4vLyBTZXQgVmFsdWUgaGVscGVyXG5cbmZ1bmN0aW9uIHNldFRhcmdldHNWYWx1ZSh0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBhbmltYXRhYmxlcyA9IGdldEFuaW1hdGFibGVzKHRhcmdldHMpO1xuICBhbmltYXRhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbmltYXRhYmxlKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0RnVuY3Rpb25WYWx1ZShwcm9wZXJ0aWVzW3Byb3BlcnR5XSwgYW5pbWF0YWJsZSk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYW5pbWF0YWJsZS50YXJnZXQ7XG4gICAgICB2YXIgdmFsdWVVbml0ID0gZ2V0VW5pdCh2YWx1ZSk7XG4gICAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWVVbml0LCBhbmltYXRhYmxlKTtcbiAgICAgIHZhciB1bml0ID0gdmFsdWVVbml0IHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7XG4gICAgICB2YXIgdG8gPSBnZXRSZWxhdGl2ZVZhbHVlKHZhbGlkYXRlVmFsdWUodmFsdWUsIHVuaXQpLCBvcmlnaW5hbFZhbHVlKTtcbiAgICAgIHZhciBhbmltVHlwZSA9IGdldEFuaW1hdGlvblR5cGUodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBzZXRQcm9ncmVzc1ZhbHVlW2FuaW1UeXBlXSh0YXJnZXQsIHByb3BlcnR5LCB0bywgYW5pbWF0YWJsZS50cmFuc2Zvcm1zLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBBbmltYXRpb25zXG5cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbihhbmltYXRhYmxlLCBwcm9wKSB7XG4gIHZhciBhbmltVHlwZSA9IGdldEFuaW1hdGlvblR5cGUoYW5pbWF0YWJsZS50YXJnZXQsIHByb3AubmFtZSk7XG4gIGlmIChhbmltVHlwZSkge1xuICAgIHZhciB0d2VlbnMgPSBub3JtYWxpemVUd2VlbnMocHJvcCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIGxhc3RUd2VlbiA9IHR3ZWVuc1t0d2VlbnMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGFuaW1UeXBlLFxuICAgICAgcHJvcGVydHk6IHByb3AubmFtZSxcbiAgICAgIGFuaW1hdGFibGU6IGFuaW1hdGFibGUsXG4gICAgICB0d2VlbnM6IHR3ZWVucyxcbiAgICAgIGR1cmF0aW9uOiBsYXN0VHdlZW4uZW5kLFxuICAgICAgZGVsYXk6IHR3ZWVuc1swXS5kZWxheSxcbiAgICAgIGVuZERlbGF5OiBsYXN0VHdlZW4uZW5kRGVsYXlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9ucyhhbmltYXRhYmxlcywgcHJvcGVydGllcykge1xuICByZXR1cm4gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGFuaW1hdGFibGVzLm1hcChmdW5jdGlvbiAoYW5pbWF0YWJsZSkge1xuICAgIHJldHVybiBwcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUFuaW1hdGlvbihhbmltYXRhYmxlLCBwcm9wKTtcbiAgICB9KTtcbiAgfSkpLCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gIWlzLnVuZChhKTsgfSk7XG59XG5cbi8vIENyZWF0ZSBJbnN0YW5jZVxuXG5mdW5jdGlvbiBnZXRJbnN0YW5jZVRpbWluZ3MoYW5pbWF0aW9ucywgdHdlZW5TZXR0aW5ncykge1xuICB2YXIgYW5pbUxlbmd0aCA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuICB2YXIgZ2V0VGxPZmZzZXQgPSBmdW5jdGlvbiAoYW5pbSkgeyByZXR1cm4gYW5pbS50aW1lbGluZU9mZnNldCA/IGFuaW0udGltZWxpbmVPZmZzZXQgOiAwOyB9O1xuICB2YXIgdGltaW5ncyA9IHt9O1xuICB0aW1pbmdzLmR1cmF0aW9uID0gYW5pbUxlbmd0aCA/IE1hdGgubWF4LmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZHVyYXRpb247IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZHVyYXRpb247XG4gIHRpbWluZ3MuZGVsYXkgPSBhbmltTGVuZ3RoID8gTWF0aC5taW4uYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGdldFRsT2Zmc2V0KGFuaW0pICsgYW5pbS5kZWxheTsgfSkpIDogdHdlZW5TZXR0aW5ncy5kZWxheTtcbiAgdGltaW5ncy5lbmREZWxheSA9IGFuaW1MZW5ndGggPyB0aW1pbmdzLmR1cmF0aW9uIC0gTWF0aC5tYXguYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGdldFRsT2Zmc2V0KGFuaW0pICsgYW5pbS5kdXJhdGlvbiAtIGFuaW0uZW5kRGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXk7XG4gIHJldHVybiB0aW1pbmdzO1xufVxuXG52YXIgaW5zdGFuY2VJRCA9IDA7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcykge1xuICB2YXIgaW5zdGFuY2VTZXR0aW5ncyA9IHJlcGxhY2VPYmplY3RQcm9wcyhkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncywgcGFyYW1zKTtcbiAgdmFyIHR3ZWVuU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyhwYXJhbXMudGFyZ2V0cyk7XG4gIHZhciBhbmltYXRpb25zID0gZ2V0QW5pbWF0aW9ucyhhbmltYXRhYmxlcywgcHJvcGVydGllcyk7XG4gIHZhciB0aW1pbmdzID0gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpO1xuICB2YXIgaWQgPSBpbnN0YW5jZUlEO1xuICBpbnN0YW5jZUlEKys7XG4gIHJldHVybiBtZXJnZU9iamVjdHMoaW5zdGFuY2VTZXR0aW5ncywge1xuICAgIGlkOiBpZCxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgYW5pbWF0YWJsZXM6IGFuaW1hdGFibGVzLFxuICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgZHVyYXRpb246IHRpbWluZ3MuZHVyYXRpb24sXG4gICAgZGVsYXk6IHRpbWluZ3MuZGVsYXksXG4gICAgZW5kRGVsYXk6IHRpbWluZ3MuZW5kRGVsYXlcbiAgfSk7XG59XG5cbi8vIENvcmVcblxudmFyIGFjdGl2ZUluc3RhbmNlcyA9IFtdO1xuXG52YXIgZW5naW5lID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJhZjtcblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIGlmICghcmFmICYmICghaXNEb2N1bWVudEhpZGRlbigpIHx8ICFhbmltZS5zdXNwZW5kV2hlbkRvY3VtZW50SGlkZGVuKSAmJiBhY3RpdmVJbnN0YW5jZXMubGVuZ3RoID4gMCkge1xuICAgICAgcmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzdGVwKHQpIHtcbiAgICAvLyBtZW1vIG9uIGFsZ29yaXRobSBpc3N1ZTpcbiAgICAvLyBkYW5nZXJvdXMgaXRlcmF0aW9uIG92ZXIgbXV0YWJsZSBgYWN0aXZlSW5zdGFuY2VzYFxuICAgIC8vICh0aGF0IGNvbGxlY3Rpb24gbWF5IGJlIHVwZGF0ZWQgZnJvbSB3aXRoaW4gY2FsbGJhY2tzIG9mIGB0aWNrYC1lZCBhbmltYXRpb24gaW5zdGFuY2VzKVxuICAgIHZhciBhY3RpdmVJbnN0YW5jZXNMZW5ndGggPSBhY3RpdmVJbnN0YW5jZXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFjdGl2ZUluc3RhbmNlc0xlbmd0aCkge1xuICAgICAgdmFyIGFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2VzW2ldO1xuICAgICAgaWYgKCFhY3RpdmVJbnN0YW5jZS5wYXVzZWQpIHtcbiAgICAgICAgYWN0aXZlSW5zdGFuY2UudGljayh0KTtcbiAgICAgICAgaSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VzTGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJhZiA9IGkgPiAwID8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgICBpZiAoIWFuaW1lLnN1c3BlbmRXaGVuRG9jdW1lbnRIaWRkZW4pIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoaXNEb2N1bWVudEhpZGRlbigpKSB7XG4gICAgICAvLyBzdXNwZW5kIHRpY2tzXG4gICAgICByYWYgPSBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIH0gZWxzZSB7IC8vIGlzIGJhY2sgdG8gYWN0aXZlIHRhYlxuICAgICAgLy8gZmlyc3QgYWRqdXN0IGFuaW1hdGlvbnMgdG8gY29uc2lkZXIgdGhlIHRpbWUgdGhhdCB0aWNrcyB3ZXJlIHN1c3BlbmRlZFxuICAgICAgYWN0aXZlSW5zdGFuY2VzLmZvckVhY2goXG4gICAgICAgIGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2UgLl9vbkRvY3VtZW50VmlzaWJpbGl0eSgpOyB9XG4gICAgICApO1xuICAgICAgZW5naW5lKCk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHBsYXk7XG59KSgpO1xuXG5mdW5jdGlvbiBpc0RvY3VtZW50SGlkZGVuKCkge1xuICByZXR1cm4gISFkb2N1bWVudCAmJiBkb2N1bWVudC5oaWRkZW47XG59XG5cbi8vIFB1YmxpYyBJbnN0YW5jZVxuXG5mdW5jdGlvbiBhbmltZShwYXJhbXMpIHtcbiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9O1xuXG5cbiAgdmFyIHN0YXJ0VGltZSA9IDAsIGxhc3RUaW1lID0gMCwgbm93ID0gMDtcbiAgdmFyIGNoaWxkcmVuLCBjaGlsZHJlbkxlbmd0aCA9IDA7XG4gIHZhciByZXNvbHZlID0gbnVsbDtcblxuICBmdW5jdGlvbiBtYWtlUHJvbWlzZShpbnN0YW5jZSkge1xuICAgIHZhciBwcm9taXNlID0gd2luZG93LlByb21pc2UgJiYgbmV3IFByb21pc2UoZnVuY3Rpb24gKF9yZXNvbHZlKSB7IHJldHVybiByZXNvbHZlID0gX3Jlc29sdmU7IH0pO1xuICAgIGluc3RhbmNlLmZpbmlzaGVkID0gcHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZSA9IGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcyk7XG4gIHZhciBwcm9taXNlID0gbWFrZVByb21pc2UoaW5zdGFuY2UpO1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uKCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBpbnN0YW5jZS5kaXJlY3Rpb247XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ2FsdGVybmF0ZScpIHtcbiAgICAgIGluc3RhbmNlLmRpcmVjdGlvbiA9IGRpcmVjdGlvbiAhPT0gJ25vcm1hbCcgPyAnbm9ybWFsJyA6ICdyZXZlcnNlJztcbiAgICB9XG4gICAgaW5zdGFuY2UucmV2ZXJzZWQgPSAhaW5zdGFuY2UucmV2ZXJzZWQ7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLnJldmVyc2VkID0gaW5zdGFuY2UucmV2ZXJzZWQ7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRqdXN0VGltZSh0aW1lKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnJldmVyc2VkID8gaW5zdGFuY2UuZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VGltZSgpIHtcbiAgICBzdGFydFRpbWUgPSAwO1xuICAgIGxhc3RUaW1lID0gYWRqdXN0VGltZShpbnN0YW5jZS5jdXJyZW50VGltZSkgKiAoMSAvIGFuaW1lLnNwZWVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlZWtDaGlsZCh0aW1lLCBjaGlsZCkge1xuICAgIGlmIChjaGlsZCkgeyBjaGlsZC5zZWVrKHRpbWUgLSBjaGlsZC50aW1lbGluZU9mZnNldCk7IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN5bmNJbnN0YW5jZUNoaWxkcmVuKHRpbWUpIHtcbiAgICBpZiAoIWluc3RhbmNlLnJldmVyc2VQbGF5YmFjaykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7IHNlZWtDaGlsZCh0aW1lLCBjaGlsZHJlbltpXSk7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSQxID0gY2hpbGRyZW5MZW5ndGg7IGkkMS0tOykgeyBzZWVrQ2hpbGQodGltZSwgY2hpbGRyZW5baSQxXSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zVGltZSkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IGluc3RhbmNlLmFuaW1hdGlvbnM7XG4gICAgdmFyIGFuaW1hdGlvbnNMZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDtcbiAgICB3aGlsZSAoaSA8IGFuaW1hdGlvbnNMZW5ndGgpIHtcbiAgICAgIHZhciBhbmltID0gYW5pbWF0aW9uc1tpXTtcbiAgICAgIHZhciBhbmltYXRhYmxlID0gYW5pbS5hbmltYXRhYmxlO1xuICAgICAgdmFyIHR3ZWVucyA9IGFuaW0udHdlZW5zO1xuICAgICAgdmFyIHR3ZWVuTGVuZ3RoID0gdHdlZW5zLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgdHdlZW4gPSB0d2VlbnNbdHdlZW5MZW5ndGhdO1xuICAgICAgLy8gT25seSBjaGVjayBmb3Iga2V5ZnJhbWVzIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgdHdlZW5cbiAgICAgIGlmICh0d2Vlbkxlbmd0aCkgeyB0d2VlbiA9IGZpbHRlckFycmF5KHR3ZWVucywgZnVuY3Rpb24gKHQpIHsgcmV0dXJuIChpbnNUaW1lIDwgdC5lbmQpOyB9KVswXSB8fCB0d2VlbjsgfVxuICAgICAgdmFyIGVsYXBzZWQgPSBtaW5NYXgoaW5zVGltZSAtIHR3ZWVuLnN0YXJ0IC0gdHdlZW4uZGVsYXksIDAsIHR3ZWVuLmR1cmF0aW9uKSAvIHR3ZWVuLmR1cmF0aW9uO1xuICAgICAgdmFyIGVhc2VkID0gaXNOYU4oZWxhcHNlZCkgPyAxIDogdHdlZW4uZWFzaW5nKGVsYXBzZWQpO1xuICAgICAgdmFyIHN0cmluZ3MgPSB0d2Vlbi50by5zdHJpbmdzO1xuICAgICAgdmFyIHJvdW5kID0gdHdlZW4ucm91bmQ7XG4gICAgICB2YXIgbnVtYmVycyA9IFtdO1xuICAgICAgdmFyIHRvTnVtYmVyc0xlbmd0aCA9IHR3ZWVuLnRvLm51bWJlcnMubGVuZ3RoO1xuICAgICAgdmFyIHByb2dyZXNzID0gKHZvaWQgMCk7XG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRvTnVtYmVyc0xlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICh2b2lkIDApO1xuICAgICAgICB2YXIgdG9OdW1iZXIgPSB0d2Vlbi50by5udW1iZXJzW25dO1xuICAgICAgICB2YXIgZnJvbU51bWJlciA9IHR3ZWVuLmZyb20ubnVtYmVyc1tuXSB8fCAwO1xuICAgICAgICBpZiAoIXR3ZWVuLmlzUGF0aCkge1xuICAgICAgICAgIHZhbHVlID0gZnJvbU51bWJlciArIChlYXNlZCAqICh0b051bWJlciAtIGZyb21OdW1iZXIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGdldFBhdGhQcm9ncmVzcyh0d2Vlbi52YWx1ZSwgZWFzZWQgKiB0b051bWJlciwgdHdlZW4uaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm91bmQpIHtcbiAgICAgICAgICBpZiAoISh0d2Vlbi5pc0NvbG9yICYmIG4gPiAyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogcm91bmQpIC8gcm91bmQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICAvLyBNYW51YWwgQXJyYXkucmVkdWNlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VzXG4gICAgICB2YXIgc3RyaW5nc0xlbmd0aCA9IHN0cmluZ3MubGVuZ3RoO1xuICAgICAgaWYgKCFzdHJpbmdzTGVuZ3RoKSB7XG4gICAgICAgIHByb2dyZXNzID0gbnVtYmVyc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzID0gc3RyaW5nc1swXTtcbiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdHJpbmdzTGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICB2YXIgYSA9IHN0cmluZ3Nbc107XG4gICAgICAgICAgdmFyIGIgPSBzdHJpbmdzW3MgKyAxXTtcbiAgICAgICAgICB2YXIgbiQxID0gbnVtYmVyc1tzXTtcbiAgICAgICAgICBpZiAoIWlzTmFOKG4kMSkpIHtcbiAgICAgICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuJDEgKyAnICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuJDEgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0UHJvZ3Jlc3NWYWx1ZVthbmltLnR5cGVdKGFuaW1hdGFibGUudGFyZ2V0LCBhbmltLnByb3BlcnR5LCBwcm9ncmVzcywgYW5pbWF0YWJsZS50cmFuc2Zvcm1zKTtcbiAgICAgIGFuaW0uY3VycmVudFZhbHVlID0gcHJvZ3Jlc3M7XG4gICAgICBpKys7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q2FsbGJhY2soY2IpIHtcbiAgICBpZiAoaW5zdGFuY2VbY2JdICYmICFpbnN0YW5jZS5wYXNzVGhyb3VnaCkgeyBpbnN0YW5jZVtjYl0oaW5zdGFuY2UpOyB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3VudEl0ZXJhdGlvbigpIHtcbiAgICBpZiAoaW5zdGFuY2UucmVtYWluaW5nICYmIGluc3RhbmNlLnJlbWFpbmluZyAhPT0gdHJ1ZSkge1xuICAgICAgaW5zdGFuY2UucmVtYWluaW5nLS07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5zdGFuY2VQcm9ncmVzcyhlbmdpbmVUaW1lKSB7XG4gICAgdmFyIGluc0R1cmF0aW9uID0gaW5zdGFuY2UuZHVyYXRpb247XG4gICAgdmFyIGluc0RlbGF5ID0gaW5zdGFuY2UuZGVsYXk7XG4gICAgdmFyIGluc0VuZERlbGF5ID0gaW5zRHVyYXRpb24gLSBpbnN0YW5jZS5lbmREZWxheTtcbiAgICB2YXIgaW5zVGltZSA9IGFkanVzdFRpbWUoZW5naW5lVGltZSk7XG4gICAgaW5zdGFuY2UucHJvZ3Jlc3MgPSBtaW5NYXgoKGluc1RpbWUgLyBpbnNEdXJhdGlvbikgKiAxMDAsIDAsIDEwMCk7XG4gICAgaW5zdGFuY2UucmV2ZXJzZVBsYXliYWNrID0gaW5zVGltZSA8IGluc3RhbmNlLmN1cnJlbnRUaW1lO1xuICAgIGlmIChjaGlsZHJlbikgeyBzeW5jSW5zdGFuY2VDaGlsZHJlbihpbnNUaW1lKTsgfVxuICAgIGlmICghaW5zdGFuY2UuYmVnYW4gJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgPiAwKSB7XG4gICAgICBpbnN0YW5jZS5iZWdhbiA9IHRydWU7XG4gICAgICBzZXRDYWxsYmFjaygnYmVnaW4nKTtcbiAgICB9XG4gICAgaWYgKCFpbnN0YW5jZS5sb29wQmVnYW4gJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgPiAwKSB7XG4gICAgICBpbnN0YW5jZS5sb29wQmVnYW4gPSB0cnVlO1xuICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BCZWdpbicpO1xuICAgIH1cbiAgICBpZiAoaW5zVGltZSA8PSBpbnNEZWxheSAmJiBpbnN0YW5jZS5jdXJyZW50VGltZSAhPT0gMCkge1xuICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKDApO1xuICAgIH1cbiAgICBpZiAoKGluc1RpbWUgPj0gaW5zRW5kRGVsYXkgJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgIT09IGluc0R1cmF0aW9uKSB8fCAhaW5zRHVyYXRpb24pIHtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNEdXJhdGlvbik7XG4gICAgfVxuICAgIGlmIChpbnNUaW1lID4gaW5zRGVsYXkgJiYgaW5zVGltZSA8IGluc0VuZERlbGF5KSB7XG4gICAgICBpZiAoIWluc3RhbmNlLmNoYW5nZUJlZ2FuKSB7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UuY2hhbmdlQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2VCZWdpbicpO1xuICAgICAgfVxuICAgICAgc2V0Q2FsbGJhY2soJ2NoYW5nZScpO1xuICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5zdGFuY2UuY2hhbmdlQmVnYW4pIHtcbiAgICAgICAgaW5zdGFuY2UuY2hhbmdlQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UuY2hhbmdlQmVnYW4gPSBmYWxzZTtcbiAgICAgICAgc2V0Q2FsbGJhY2soJ2NoYW5nZUNvbXBsZXRlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlLmN1cnJlbnRUaW1lID0gbWluTWF4KGluc1RpbWUsIDAsIGluc0R1cmF0aW9uKTtcbiAgICBpZiAoaW5zdGFuY2UuYmVnYW4pIHsgc2V0Q2FsbGJhY2soJ3VwZGF0ZScpOyB9XG4gICAgaWYgKGVuZ2luZVRpbWUgPj0gaW5zRHVyYXRpb24pIHtcbiAgICAgIGxhc3RUaW1lID0gMDtcbiAgICAgIGNvdW50SXRlcmF0aW9uKCk7XG4gICAgICBpZiAoIWluc3RhbmNlLnJlbWFpbmluZykge1xuICAgICAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIWluc3RhbmNlLmNvbXBsZXRlZCkge1xuICAgICAgICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICAgIHNldENhbGxiYWNrKCdjb21wbGV0ZScpO1xuICAgICAgICAgIGlmICghaW5zdGFuY2UucGFzc1Rocm91Z2ggJiYgJ1Byb21pc2UnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcHJvbWlzZSA9IG1ha2VQcm9taXNlKGluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IG5vdztcbiAgICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICBpbnN0YW5jZS5sb29wQmVnYW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKGluc3RhbmNlLmRpcmVjdGlvbiA9PT0gJ2FsdGVybmF0ZScpIHtcbiAgICAgICAgICB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW5zdGFuY2UucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gaW5zdGFuY2UuZGlyZWN0aW9uO1xuICAgIGluc3RhbmNlLnBhc3NUaHJvdWdoID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY3VycmVudFRpbWUgPSAwO1xuICAgIGluc3RhbmNlLnByb2dyZXNzID0gMDtcbiAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgIGluc3RhbmNlLmJlZ2FuID0gZmFsc2U7XG4gICAgaW5zdGFuY2UubG9vcEJlZ2FuID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY2hhbmdlQmVnYW4gPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jaGFuZ2VDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2sgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5yZXZlcnNlZCA9IGRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnO1xuICAgIGluc3RhbmNlLnJlbWFpbmluZyA9IGluc3RhbmNlLmxvb3A7XG4gICAgY2hpbGRyZW4gPSBpbnN0YW5jZS5jaGlsZHJlbjtcbiAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gY2hpbGRyZW5MZW5ndGg7IGktLTspIHsgaW5zdGFuY2UuY2hpbGRyZW5baV0ucmVzZXQoKTsgfVxuICAgIGlmIChpbnN0YW5jZS5yZXZlcnNlZCAmJiBpbnN0YW5jZS5sb29wICE9PSB0cnVlIHx8IChkaXJlY3Rpb24gPT09ICdhbHRlcm5hdGUnICYmIGluc3RhbmNlLmxvb3AgPT09IDEpKSB7IGluc3RhbmNlLnJlbWFpbmluZysrOyB9XG4gICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc3RhbmNlLnJldmVyc2VkID8gaW5zdGFuY2UuZHVyYXRpb24gOiAwKTtcbiAgfTtcblxuICAvLyBpbnRlcm5hbCBtZXRob2QgKGZvciBlbmdpbmUpIHRvIGFkanVzdCBhbmltYXRpb24gdGltaW5ncyBiZWZvcmUgcmVzdG9yaW5nIGVuZ2luZSB0aWNrcyAockFGKVxuICBpbnN0YW5jZS5fb25Eb2N1bWVudFZpc2liaWxpdHkgPSByZXNldFRpbWU7XG5cbiAgLy8gU2V0IFZhbHVlIGhlbHBlclxuXG4gIGluc3RhbmNlLnNldCA9IGZ1bmN0aW9uKHRhcmdldHMsIHByb3BlcnRpZXMpIHtcbiAgICBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIGluc3RhbmNlLnRpY2sgPSBmdW5jdGlvbih0KSB7XG4gICAgbm93ID0gdDtcbiAgICBpZiAoIXN0YXJ0VGltZSkgeyBzdGFydFRpbWUgPSBub3c7IH1cbiAgICBzZXRJbnN0YW5jZVByb2dyZXNzKChub3cgKyAobGFzdFRpbWUgLSBzdGFydFRpbWUpKSAqIGFuaW1lLnNwZWVkKTtcbiAgfTtcblxuICBpbnN0YW5jZS5zZWVrID0gZnVuY3Rpb24odGltZSkge1xuICAgIHNldEluc3RhbmNlUHJvZ3Jlc3MoYWRqdXN0VGltZSh0aW1lKSk7XG4gIH07XG5cbiAgaW5zdGFuY2UucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgIHJlc2V0VGltZSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWluc3RhbmNlLnBhdXNlZCkgeyByZXR1cm47IH1cbiAgICBpZiAoaW5zdGFuY2UuY29tcGxldGVkKSB7IGluc3RhbmNlLnJlc2V0KCk7IH1cbiAgICBpbnN0YW5jZS5wYXVzZWQgPSBmYWxzZTtcbiAgICBhY3RpdmVJbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgcmVzZXRUaW1lKCk7XG4gICAgZW5naW5lKCk7XG4gIH07XG5cbiAgaW5zdGFuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uKCk7XG4gICAgaW5zdGFuY2UuY29tcGxldGVkID0gaW5zdGFuY2UucmV2ZXJzZWQgPyBmYWxzZSA6IHRydWU7XG4gICAgcmVzZXRUaW1lKCk7XG4gIH07XG5cbiAgaW5zdGFuY2UucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIGluc3RhbmNlLnJlc2V0KCk7XG4gICAgaW5zdGFuY2UucGxheSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJlbW92ZSA9IGZ1bmN0aW9uKHRhcmdldHMpIHtcbiAgICB2YXIgdGFyZ2V0c0FycmF5ID0gcGFyc2VUYXJnZXRzKHRhcmdldHMpO1xuICAgIHJlbW92ZVRhcmdldHNGcm9tSW5zdGFuY2UodGFyZ2V0c0FycmF5LCBpbnN0YW5jZSk7XG4gIH07XG5cbiAgaW5zdGFuY2UucmVzZXQoKTtcblxuICBpZiAoaW5zdGFuY2UuYXV0b3BsYXkpIHsgaW5zdGFuY2UucGxheSgpOyB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xuXG59XG5cbi8vIFJlbW92ZSB0YXJnZXRzIGZyb20gYW5pbWF0aW9uXG5cbmZ1bmN0aW9uIHJlbW92ZVRhcmdldHNGcm9tQW5pbWF0aW9ucyh0YXJnZXRzQXJyYXksIGFuaW1hdGlvbnMpIHtcbiAgZm9yICh2YXIgYSA9IGFuaW1hdGlvbnMubGVuZ3RoOyBhLS07KSB7XG4gICAgaWYgKGFycmF5Q29udGFpbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zW2FdLmFuaW1hdGFibGUudGFyZ2V0KSkge1xuICAgICAgYW5pbWF0aW9ucy5zcGxpY2UoYSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRhcmdldHNGcm9tSW5zdGFuY2UodGFyZ2V0c0FycmF5LCBpbnN0YW5jZSkge1xuICB2YXIgYW5pbWF0aW9ucyA9IGluc3RhbmNlLmFuaW1hdGlvbnM7XG4gIHZhciBjaGlsZHJlbiA9IGluc3RhbmNlLmNoaWxkcmVuO1xuICByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zKTtcbiAgZm9yICh2YXIgYyA9IGNoaWxkcmVuLmxlbmd0aDsgYy0tOykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2NdO1xuICAgIHZhciBjaGlsZEFuaW1hdGlvbnMgPSBjaGlsZC5hbmltYXRpb25zO1xuICAgIHJlbW92ZVRhcmdldHNGcm9tQW5pbWF0aW9ucyh0YXJnZXRzQXJyYXksIGNoaWxkQW5pbWF0aW9ucyk7XG4gICAgaWYgKCFjaGlsZEFuaW1hdGlvbnMubGVuZ3RoICYmICFjaGlsZC5jaGlsZHJlbi5sZW5ndGgpIHsgY2hpbGRyZW4uc3BsaWNlKGMsIDEpOyB9XG4gIH1cbiAgaWYgKCFhbmltYXRpb25zLmxlbmd0aCAmJiAhY2hpbGRyZW4ubGVuZ3RoKSB7IGluc3RhbmNlLnBhdXNlKCk7IH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVGFyZ2V0c0Zyb21BY3RpdmVJbnN0YW5jZXModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0c0FycmF5ID0gcGFyc2VUYXJnZXRzKHRhcmdldHMpO1xuICBmb3IgKHZhciBpID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDsgaS0tOykge1xuICAgIHZhciBpbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlc1tpXTtcbiAgICByZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlKHRhcmdldHNBcnJheSwgaW5zdGFuY2UpO1xuICB9XG59XG5cbi8vIFN0YWdnZXIgaGVscGVyc1xuXG5mdW5jdGlvbiBzdGFnZ2VyKHZhbCwgcGFyYW1zKSB7XG4gIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuICB2YXIgZGlyZWN0aW9uID0gcGFyYW1zLmRpcmVjdGlvbiB8fCAnbm9ybWFsJztcbiAgdmFyIGVhc2luZyA9IHBhcmFtcy5lYXNpbmcgPyBwYXJzZUVhc2luZ3MocGFyYW1zLmVhc2luZykgOiBudWxsO1xuICB2YXIgZ3JpZCA9IHBhcmFtcy5ncmlkO1xuICB2YXIgYXhpcyA9IHBhcmFtcy5heGlzO1xuICB2YXIgZnJvbUluZGV4ID0gcGFyYW1zLmZyb20gfHwgMDtcbiAgdmFyIGZyb21GaXJzdCA9IGZyb21JbmRleCA9PT0gJ2ZpcnN0JztcbiAgdmFyIGZyb21DZW50ZXIgPSBmcm9tSW5kZXggPT09ICdjZW50ZXInO1xuICB2YXIgZnJvbUxhc3QgPSBmcm9tSW5kZXggPT09ICdsYXN0JztcbiAgdmFyIGlzUmFuZ2UgPSBpcy5hcnIodmFsKTtcbiAgdmFyIHZhbDEgPSBpc1JhbmdlID8gcGFyc2VGbG9hdCh2YWxbMF0pIDogcGFyc2VGbG9hdCh2YWwpO1xuICB2YXIgdmFsMiA9IGlzUmFuZ2UgPyBwYXJzZUZsb2F0KHZhbFsxXSkgOiAwO1xuICB2YXIgdW5pdCA9IGdldFVuaXQoaXNSYW5nZSA/IHZhbFsxXSA6IHZhbCkgfHwgMDtcbiAgdmFyIHN0YXJ0ID0gcGFyYW1zLnN0YXJ0IHx8IDAgKyAoaXNSYW5nZSA/IHZhbDEgOiAwKTtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICB2YXIgbWF4VmFsdWUgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKGVsLCBpLCB0KSB7XG4gICAgaWYgKGZyb21GaXJzdCkgeyBmcm9tSW5kZXggPSAwOyB9XG4gICAgaWYgKGZyb21DZW50ZXIpIHsgZnJvbUluZGV4ID0gKHQgLSAxKSAvIDI7IH1cbiAgICBpZiAoZnJvbUxhc3QpIHsgZnJvbUluZGV4ID0gdCAtIDE7IH1cbiAgICBpZiAoIXZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0OyBpbmRleCsrKSB7XG4gICAgICAgIGlmICghZ3JpZCkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKE1hdGguYWJzKGZyb21JbmRleCAtIGluZGV4KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGZyb21YID0gIWZyb21DZW50ZXIgPyBmcm9tSW5kZXglZ3JpZFswXSA6IChncmlkWzBdLTEpLzI7XG4gICAgICAgICAgdmFyIGZyb21ZID0gIWZyb21DZW50ZXIgPyBNYXRoLmZsb29yKGZyb21JbmRleC9ncmlkWzBdKSA6IChncmlkWzFdLTEpLzI7XG4gICAgICAgICAgdmFyIHRvWCA9IGluZGV4JWdyaWRbMF07XG4gICAgICAgICAgdmFyIHRvWSA9IE1hdGguZmxvb3IoaW5kZXgvZ3JpZFswXSk7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlWCA9IGZyb21YIC0gdG9YO1xuICAgICAgICAgIHZhciBkaXN0YW5jZVkgPSBmcm9tWSAtIHRvWTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBNYXRoLnNxcnQoZGlzdGFuY2VYICogZGlzdGFuY2VYICsgZGlzdGFuY2VZICogZGlzdGFuY2VZKTtcbiAgICAgICAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7IHZhbHVlID0gLWRpc3RhbmNlWDsgfVxuICAgICAgICAgIGlmIChheGlzID09PSAneScpIHsgdmFsdWUgPSAtZGlzdGFuY2VZOyB9XG4gICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIG1heFZhbHVlID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgdmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChlYXNpbmcpIHsgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBlYXNpbmcodmFsIC8gbWF4VmFsdWUpICogbWF4VmFsdWU7IH0pOyB9XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAncmV2ZXJzZScpIHsgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBheGlzID8gKHZhbCA8IDApID8gdmFsICogLTEgOiAtdmFsIDogTWF0aC5hYnMobWF4VmFsdWUgLSB2YWwpOyB9KTsgfVxuICAgIH1cbiAgICB2YXIgc3BhY2luZyA9IGlzUmFuZ2UgPyAodmFsMiAtIHZhbDEpIC8gbWF4VmFsdWUgOiB2YWwxO1xuICAgIHJldHVybiBzdGFydCArIChzcGFjaW5nICogKE1hdGgucm91bmQodmFsdWVzW2ldICogMTAwKSAvIDEwMCkpICsgdW5pdDtcbiAgfVxufVxuXG4vLyBUaW1lbGluZVxuXG5mdW5jdGlvbiB0aW1lbGluZShwYXJhbXMpIHtcbiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9O1xuXG4gIHZhciB0bCA9IGFuaW1lKHBhcmFtcyk7XG4gIHRsLmR1cmF0aW9uID0gMDtcbiAgdGwuYWRkID0gZnVuY3Rpb24oaW5zdGFuY2VQYXJhbXMsIHRpbWVsaW5lT2Zmc2V0KSB7XG4gICAgdmFyIHRsSW5kZXggPSBhY3RpdmVJbnN0YW5jZXMuaW5kZXhPZih0bCk7XG4gICAgdmFyIGNoaWxkcmVuID0gdGwuY2hpbGRyZW47XG4gICAgaWYgKHRsSW5kZXggPiAtMSkgeyBhY3RpdmVJbnN0YW5jZXMuc3BsaWNlKHRsSW5kZXgsIDEpOyB9XG4gICAgZnVuY3Rpb24gcGFzc1Rocm91Z2goaW5zKSB7IGlucy5wYXNzVGhyb3VnaCA9IHRydWU7IH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7IHBhc3NUaHJvdWdoKGNoaWxkcmVuW2ldKTsgfVxuICAgIHZhciBpbnNQYXJhbXMgPSBtZXJnZU9iamVjdHMoaW5zdGFuY2VQYXJhbXMsIHJlcGxhY2VPYmplY3RQcm9wcyhkZWZhdWx0VHdlZW5TZXR0aW5ncywgcGFyYW1zKSk7XG4gICAgaW5zUGFyYW1zLnRhcmdldHMgPSBpbnNQYXJhbXMudGFyZ2V0cyB8fCBwYXJhbXMudGFyZ2V0cztcbiAgICB2YXIgdGxEdXJhdGlvbiA9IHRsLmR1cmF0aW9uO1xuICAgIGluc1BhcmFtcy5hdXRvcGxheSA9IGZhbHNlO1xuICAgIGluc1BhcmFtcy5kaXJlY3Rpb24gPSB0bC5kaXJlY3Rpb247XG4gICAgaW5zUGFyYW1zLnRpbWVsaW5lT2Zmc2V0ID0gaXMudW5kKHRpbWVsaW5lT2Zmc2V0KSA/IHRsRHVyYXRpb24gOiBnZXRSZWxhdGl2ZVZhbHVlKHRpbWVsaW5lT2Zmc2V0LCB0bER1cmF0aW9uKTtcbiAgICBwYXNzVGhyb3VnaCh0bCk7XG4gICAgdGwuc2VlayhpbnNQYXJhbXMudGltZWxpbmVPZmZzZXQpO1xuICAgIHZhciBpbnMgPSBhbmltZShpbnNQYXJhbXMpO1xuICAgIHBhc3NUaHJvdWdoKGlucyk7XG4gICAgY2hpbGRyZW4ucHVzaChpbnMpO1xuICAgIHZhciB0aW1pbmdzID0gZ2V0SW5zdGFuY2VUaW1pbmdzKGNoaWxkcmVuLCBwYXJhbXMpO1xuICAgIHRsLmRlbGF5ID0gdGltaW5ncy5kZWxheTtcbiAgICB0bC5lbmREZWxheSA9IHRpbWluZ3MuZW5kRGVsYXk7XG4gICAgdGwuZHVyYXRpb24gPSB0aW1pbmdzLmR1cmF0aW9uO1xuICAgIHRsLnNlZWsoMCk7XG4gICAgdGwucmVzZXQoKTtcbiAgICBpZiAodGwuYXV0b3BsYXkpIHsgdGwucGxheSgpOyB9XG4gICAgcmV0dXJuIHRsO1xuICB9O1xuICByZXR1cm4gdGw7XG59XG5cbmFuaW1lLnZlcnNpb24gPSAnMy4yLjEnO1xuYW5pbWUuc3BlZWQgPSAxO1xuLy8gVE9ETzojcmV2aWV3OiBuYW1pbmcsIGRvY3VtZW50YXRpb25cbmFuaW1lLnN1c3BlbmRXaGVuRG9jdW1lbnRIaWRkZW4gPSB0cnVlO1xuYW5pbWUucnVubmluZyA9IGFjdGl2ZUluc3RhbmNlcztcbmFuaW1lLnJlbW92ZSA9IHJlbW92ZVRhcmdldHNGcm9tQWN0aXZlSW5zdGFuY2VzO1xuYW5pbWUuZ2V0ID0gZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZTtcbmFuaW1lLnNldCA9IHNldFRhcmdldHNWYWx1ZTtcbmFuaW1lLmNvbnZlcnRQeCA9IGNvbnZlcnRQeFRvVW5pdDtcbmFuaW1lLnBhdGggPSBnZXRQYXRoO1xuYW5pbWUuc2V0RGFzaG9mZnNldCA9IHNldERhc2hvZmZzZXQ7XG5hbmltZS5zdGFnZ2VyID0gc3RhZ2dlcjtcbmFuaW1lLnRpbWVsaW5lID0gdGltZWxpbmU7XG5hbmltZS5lYXNpbmcgPSBwYXJzZUVhc2luZ3M7XG5hbmltZS5wZW5uZXIgPSBwZW5uZXI7XG5hbmltZS5yYW5kb20gPSBmdW5jdGlvbiAobWluLCBtYXgpIHsgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47IH07XG5cbmV4cG9ydCBkZWZhdWx0IGFuaW1lO1xuIiwiaW1wb3J0ICogYXMgU3RhdHMgZnJvbSAnc3RhdHMuanMnXHJcbmltcG9ydCBhbmltZSBmcm9tICdhbmltZWpzL2xpYi9hbmltZS5lcy5qcyc7XHJcblxyXG4vLyBZb3VyIHdlYiBhcHAncyBGaXJlYmFzZSBjb25maWd1cmF0aW9uXHJcbnZhciBmaXJlYmFzZUNvbmZpZyA9IHtcclxuICAgIGFwaUtleTogXCJBSXphU3lEVFZ4REpqN3JxRzlMLUNsdmJhMlRhbzlCMGhrY3hqY0VcIixcclxuICAgIGF1dGhEb21haW46IFwibWlsY2hjaGFuLmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9taWxjaGNoYW4uZmlyZWJhc2Vpby5jb21cIixcclxuICAgIHByb2plY3RJZDogXCJtaWxjaGNoYW5cIixcclxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwibWlsY2hjaGFuLmFwcHNwb3QuY29tXCIsXHJcbiAgICBtZXNzYWdpbmdTZW5kZXJJZDogXCIzNTU2OTg5NzE4ODlcIixcclxuICAgIGFwcElkOiBcIjE6MzU1Njk4OTcxODg5OndlYjplMzY1M2M1YzMxYmQ3Mjg5Y2Q0NTUwXCIsXHJcbiAgICBtZWFzdXJlbWVudElkOiBcIkctMzk5OEZKWU5XWFwiXHJcbn07XHJcbi8vIEluaXRpYWxpemUgRmlyZWJhc2VcclxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XHJcbmZpcmViYXNlLmFuYWx5dGljcygpO1xyXG5cclxuY29uc3QgZGVidWcgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpKSA9PT0gXCJkZWJ1Z1wiO1xyXG4vL2NvbnN0IGNoYW5uZWwgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpKTtcclxuY29uc3QgZGF0YWJhc2VSb290ID0gXCJ3b25kZXJsYW5kXCI7XHJcbi8vY29uc3QgZGF0YWJhc2VDaGFubmVsID0gY2hhbm5lbC5sZW5ndGggPiAwID8gZGF0YWJhc2VSb290ICsgJy9jaGFubmVscy8nICsgY2hhbm5lbCA6IGRhdGFiYXNlUm9vdDtcclxuY29uc3QgZGF0YWJhc2VNZXNzYWdlcyA9IGRhdGFiYXNlUm9vdCArIFwiL2ZlZWRcIjtcclxubGV0IGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTtcclxubGV0IHN0b3JhZ2UgPSBmaXJlYmFzZS5zdG9yYWdlKCk7XHJcbmNvbnN0IG1pbGNoID0geyBuYW1lOiBcIuODn+ODq+ODkuOBoeOCg+OCk1wiLCBhY2NlbnQ6IFwiI2ZmYTZiYlwiLCBpbWFnZTogXCIvaW1hZ2VzL01pbGNoLnBuZ1wiIH07XHJcbmNvbnN0IG1lcmt1ID0geyBuYW1lOiBcIuODoeODq+OCr+OBoeOCg+OCk1wiLCBhY2NlbnQ6IFwiIzViY2JlMVwiLCBpbWFnZTogXCIvaW1hZ2VzL01lcmt1LnBuZ1wiIH07XHJcbmNvbnN0IHN0YXRzID0gbmV3IFN0YXRzKCk7XHJcblxyXG5zdGF0cy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xyXG5zdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9IFwiYXV0b1wiO1xyXG5zdGF0cy5kb21FbGVtZW50LnN0eWxlLmJvdHRvbSA9IFwiMFwiO1xyXG5zdGF0cy5kb21FbGVtZW50LnN0eWxlLmxlZnQgPSBcImF1dG9cIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5yaWdodCA9IFwiMFwiO1xyXG5cclxuaWYgKCFkZWJ1Zykge1xyXG4gICAgc3RhdHMuZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaXMtaGlkZGVuXCIpO1xyXG59XHJcblxyXG5sZXQgaWRsZVRpbWUgPSAwLjA7XHJcbmNvbnN0IGJsaW5rVGhyZXNob2xkID0gNS4wO1xyXG5sZXQgYWN0aXZhdGVUaW1lID0gMC4wO1xyXG5jb25zdCBhY3RpdmF0ZVRocmVzaG9sZCA9IDEwLjA7XHJcbmxldCB0YXBDb3VudCA9IDA7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoXCJzdy5qc1wiKS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5vbnVwZGF0ZWZvdW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIgIT09IG51bGwgJiYgXCJjb21tYW5kXCIgaW4gZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhLmNvbW1hbmQgPT09IFwiY2FjaGVzXCIpIHtcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiBcImNsZWFyXCIsIGNhY2hlczogZXZlbnQuZGF0YS5jYWNoZXMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYXBwID0gVnVlLmNyZWF0ZUFwcCh7XHJcbiAgICAgICAgZGF0YSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlzRGVidWc6IGRlYnVnLFxyXG4gICAgICAgICAgICAgICAgaXNEYXJrTW9kZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc011dGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzVXBkYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNMb2NhdGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc1JldmVhbGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzT3ZlcmxheWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzQmxpbmRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc1BvcHVwOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNMZWFybmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0FuaW1hdGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0hhbmdpbmdPbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNEaXNjb3ZlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc1N0YXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0xvY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYW52YXNTaXplOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIGRldmljZVdpZHRoOiAwLCBkZXZpY2VIZWlnaHQ6IDAsIGFsdGVybmF0aXZlOiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIGRldmljZVdpZHRoOiAwLCBkZXZpY2VIZWlnaHQ6IDAgfSB9LFxyXG4gICAgICAgICAgICAgICAgY2FjaGVkSW1hZ2VzOiB7fSxcclxuICAgICAgICAgICAgICAgIGNhY2hlZFNwcml0ZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmVDYWNoZWRTcHJpdGVzOiBbXSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblF1ZXVlOiBbXSxcclxuICAgICAgICAgICAgICAgIGVsYXBzZWQ6IDAsXHJcbiAgICAgICAgICAgICAgICBtYXA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBsYXllcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIG1vZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBxdWVyeVF1ZXVlOiBbXSxcclxuICAgICAgICAgICAgICAgIHF1ZXJ5Q2FjaGU6IHt9LFxyXG4gICAgICAgICAgICAgICAgY2FjaGVkVHJhY2tzOiB7fSxcclxuICAgICAgICAgICAgICAgIGNhY2hlZERvY3VtZW50czogW10sXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudFF1ZXVlOiBbXSxcclxuICAgICAgICAgICAgICAgIHNlcXVlbmNlUXVldWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB1c2VyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZElucHV0TGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4SW5wdXRMZW5ndGg6IDEwMCxcclxuICAgICAgICAgICAgICAgIGlucHV0SGFzRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgbWF4TWVzc2FnZXM6IDEwLFxyXG4gICAgICAgICAgICAgICAgd29yZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlY2VudFdvcmRzOiBbXSxcclxuICAgICAgICAgICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgbWF4VGFnczogMTAsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUaW1lb3V0SUQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHRpY2tJbnRlcnZhbElEOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBzdGFyczogLTEsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZFN0YXJzOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RlcHM6IDAsXHJcbiAgICAgICAgICAgICAgICBpc1N0ZXBwaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVkU3RlcHM6IDAsXHJcbiAgICAgICAgICAgICAgICBkZXZpY2VNb3Rpb246IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGF0czogW10sXHJcbiAgICAgICAgICAgICAgICBzY3JlZW5zaG90OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZE5vdGlmaWNhdGlvbkhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGlucHV0SGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRJbnB1dEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIHJlY2VudEltYWdlczogW10sXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2VzUXVldWU6IFtdLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlczogW10sXHJcbiAgICAgICAgICAgICAgICBwcmVsb2FkSW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIGlzVXBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBibGVuZFNoYXBlQW5pbWF0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICBpbnNldFRvcDogMCxcclxuICAgICAgICAgICAgICAgIGluc2V0Qm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogW10sXHJcbiAgICAgICAgICAgICAgICBwb3B1cFRleHRIZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZFBvcHVwVGV4dEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIHRpY2tlcldpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRUaWNrZXJXaWR0aDogMCxcclxuICAgICAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbXSxcclxuICAgICAgICAgICAgICAgIGxlYWRlcmJvYXJkSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRMZWFkZXJib2FyZEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZXM6IHt9LFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB3b3JkRGljdGlvbmFyeToge30sXHJcbiAgICAgICAgICAgICAgICByZXZlcnNlV29yZERpY3Rpb25hcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogW1wi5ZCN5YmNXCIsIFwi5omA5bGeXCIsIFwi5pmC6ZaTXCIsIFwi5aC05omAXCIsIFwi44GZ44KL5LqLXCIsIFwi55Sf44GN54mpXCIsIFwi6aOf44G554mpXCIsIFwi6aOy44G/54mpXCIsIFwi6IGe44GP44KC44GuXCIsIFwi6KaL44KL44KC44GuXCIsIFwi6Kqt44KA44KC44GuXCIsIFwi5L2/44GG54mpXCIsIFwi6Lqr44Gr44Gk44GR44KL44KC44GuXCIsIFwi5LmX44KK54mpXCIsIFwi6YOo5L2NXCIsIFwi55eF5rCXXCJdLFxyXG4gICAgICAgICAgICAgICAgY2hhcnM6IFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhdGNoOiB7XHJcbiAgICAgICAgICAgIGlzTXV0ZWQobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjaGFyYWN0ZXJcIiwgSlNPTi5zdHJpbmdpZnkoeyBtdXRlOiBuZXdWYWx1ZSB9KSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjaGFyYWN0ZXJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdvcmRzOiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2xpcCBvZiBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjaW5wdXQ+LmNvbHVtbnM6bGFzdC1vZi10eXBlPi5jb2x1bW4+LmNvbnRyb2wgLmNsaXBcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpY2tlcldpZHRoKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHsgd2lkdGg6IHRoaXMuYW5pbWF0ZWRUaWNrZXJXaWR0aCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFuaW1hdGVkVGlja2VyV2lkdGggPSBvYmoud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZXM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjYXBwPi5iYWNrZ3JvdW5kPmRpdlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50cy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRlID0gMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ZnJhbWVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZXMucHVzaCh7IHZpc2liaWxpdHk6IFwidmlzaWJsZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWVzLnB1c2goeyB2aXNpYmlsaXR5OiBcImhpZGRlblwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb24gPSBlbGVtZW50LmFuaW1hdGUoa2V5ZnJhbWVzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdmb3J3YXJkcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ3N0ZXBzKCcgKyBvZmZzZXQgKyAnKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwIC8gZnJhbWVSYXRlICogZWxlbWVudHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb25zOiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IGFuaW1hdGlvbi5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwcC5pc1BvcHVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAucG9wdXBUZXh0SGVpZ2h0ID0gYXBwLiRyZWZzLnBvcHVwVGV4dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvcHVwVGV4dEhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWRQb3B1cFRleHRIZWlnaHQgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWRQb3B1cFRleHRIZWlnaHQgPSBvYmouaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm5vdGlmaWNhdGlvbkhlaWdodCA9IGFwcC4kcmVmcy5ub3RpZmljYXRpb25zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWROb3RpZmljYXRpb25IZWlnaHQgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWROb3RpZmljYXRpb25IZWlnaHQgPSBvYmouaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sZWFkZXJib2FyZEhlaWdodCA9IGFwcC4kcmVmcy5sZWFkZXJib2FyZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFkZXJib2FyZEhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWRMZWFkZXJib2FyZEhlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZExlYWRlcmJvYXJkSGVpZ2h0ID0gb2JqLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnB1dEhlaWdodChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBoZWlnaHQ6IHRoaXMuYW5pbWF0ZWRJbnB1dEhlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZElucHV0SGVpZ2h0ID0gb2JqLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGFycyhuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBjb3VudDogdGhpcy5hbmltYXRlZFN0YXJzIH07XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICBjb3VudDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWRTdGFycyA9IG9iai5jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGVwcyhuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyBjb3VudDogdGhpcy5hbmltYXRlZFN0ZXBzIH07XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICBjb3VudDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEwMCxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZFN0ZXBzID0gb2JqLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHsgY291bnQ6IGFwcC5hbmltYXRlZElucHV0TGVuZ3RoIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogYXBwLmlucHV0Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5hbmltYXRlZElucHV0TGVuZ3RoID0gb2JqLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2hhcnM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByb3cgb2YgYXBwLmNoYXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29sdW1uIG9mIHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5jb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudHMucHVzaCh7IHNldDogY29sdW1uLnNldCwgY291bnQ6IGNvbHVtbi5jb3VudCwgdGltZXN0YW1wOiBjb2x1bW4udGltZXN0YW1wLCBjaGVja3N1bTogWy4uLlN0cmluZyhjb2x1bW4udGltZXN0YW1wKV0ucmVkdWNlKCh4LCB5KSA9PiB4ICsgeSwgMCkgKyBbLi4uU3RyaW5nKGNvbHVtbi5jb3VudCldLnJlZHVjZSgoeCwgeSkgPT4geCArIHksIDApIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImZyYWdtZW50c1wiLCBKU09OLnN0cmluZ2lmeShmcmFnbWVudHMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiZnJhZ21lbnRzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgc2lnbkluOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudCA9PT0gZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFBvcHVwKG5ldyBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlcigpKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqIEB0eXBlIHtmaXJlYmFzZS5hdXRoLk9BdXRoQ3JlZGVudGlhbH0gKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSByZXN1bHQuY3JlZGVudGlhbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiByZXN1bHQudXNlci5wcm92aWRlckRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlci51cGRhdGVQcm9maWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogZGF0YS5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b1VSTDogZGF0YS5waG90b1VSTFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoYCR7ZGF0YWJhc2VSb290fS91c2Vycy8ke3Jlc3VsdC51c2VyLnVpZH1gKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wibmFtZVwiXSA9IGRhdGEuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInRpbWVzdGFtcFwiXSA9IHRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHsgbmFtZTogZGF0YS5kaXNwbGF5TmFtZSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjcmVkZW50aWFsXCIsIEpTT04uc3RyaW5naWZ5KHsgcHJvdmlkZXJJZDogY3JlZGVudGlhbC5wcm92aWRlcklkLCBhY2Nlc3NUb2tlbjogY3JlZGVudGlhbC5hY2Nlc3NUb2tlbiwgaWRUb2tlbjogY3JlZGVudGlhbC5pZFRva2VuIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjcmVkZW50aWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZmlyZWJhc2UuYXV0aC5GYWNlYm9va0F1dGhQcm92aWRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5hZGRTY29wZShcInB1YmxpY19wcm9maWxlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFBvcHVwKHByb3ZpZGVyKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqIEB0eXBlIHtmaXJlYmFzZS5hdXRoLk9BdXRoQ3JlZGVudGlhbH0gKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSByZXN1bHQuY3JlZGVudGlhbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiByZXN1bHQudXNlci5wcm92aWRlckRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlci51cGRhdGVQcm9maWxlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogZGF0YS5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b1VSTDogZGF0YS5waG90b1VSTFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoYCR7ZGF0YWJhc2VSb290fS91c2Vycy8ke3Jlc3VsdC51c2VyLnVpZH1gKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wibmFtZVwiXSA9IGRhdGEuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInRpbWVzdGFtcFwiXSA9IHRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHsgbmFtZTogZGF0YS5kaXNwbGF5TmFtZSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjcmVkZW50aWFsXCIsIEpTT04uc3RyaW5naWZ5KHsgcHJvdmlkZXJJZDogY3JlZGVudGlhbC5wcm92aWRlcklkLCBhY2Nlc3NUb2tlbjogY3JlZGVudGlhbC5hY2Nlc3NUb2tlbiB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudCA9PT0gZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhQb3B1cChuZXcgZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyKCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUge2ZpcmViYXNlLmF1dGguT0F1dGhDcmVkZW50aWFsfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IHJlc3VsdC5jcmVkZW50aWFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiByZXN1bHQudXNlci5wcm92aWRlckRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBob3RvVXJsID0gZGF0YS5waG90b1VSTC5yZXBsYWNlKC9fbm9ybWFsXFwuanBnJC8sICcuanBnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnVwZGF0ZVByb2ZpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkYXRhLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBwaG90b1VybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihgJHtkYXRhYmFzZVJvb3R9L3VzZXJzLyR7cmVzdWx0LnVzZXIudWlkfWApLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcIm5hbWVcIl0gPSBkYXRhLmRpc3BsYXlOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wibGlua1wiXSA9IGBodHRwczovL3R3aXR0ZXIuY29tLyR7cmVzdWx0LmFkZGl0aW9uYWxVc2VySW5mby51c2VybmFtZX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7IG5hbWU6IGRhdGEuZGlzcGxheU5hbWUsIGxpbms6IGBodHRwczovL3R3aXR0ZXIuY29tLyR7cmVzdWx0LmFkZGl0aW9uYWxVc2VySW5mby51c2VybmFtZX1gLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY3JlZGVudGlhbFwiLCBKU09OLnN0cmluZ2lmeSh7IHByb3ZpZGVySWQ6IGNyZWRlbnRpYWwucHJvdmlkZXJJZCwgYWNjZXNzVG9rZW46IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW4sIHNlY3JldDogY3JlZGVudGlhbC5zZWNyZXQgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNyZWRlbnRpYWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2lnbk91dDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiBcImNhY2hlc1wiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLypmaXJlYmFzZS5hdXRoKCkuc2lnbkluQW5vbnltb3VzbHkoKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsqL1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWZyZXNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGFzeW5jIGZ1bmN0aW9uIChpZ25vcmUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyTG9jYXRpb24gPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrcyA9IGF3YWl0IHRoaXMuZmV0Y2goaWdub3JlLCBjZW50ZXJMb2NhdGlvbi5sYXRpdHVkZSwgY2VudGVyTG9jYXRpb24ubG9uZ2l0dWRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYWNoZWRUcmFja3MpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXJJZCBvZiBzZWxmLmNhY2hlZFRyYWNrc1trZXldLmhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaWNyb3NvZnQuTWFwcy5FdmVudHMucmVtb3ZlSGFuZGxlcihoYW5kbGVySWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5lbnRpdGllcy5yZW1vdmUoc2VsZi5jYWNoZWRUcmFja3Nba2V5XS5wdXNocGluKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmNhY2hlZFRyYWNrc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0cmFja3MgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXNVcGRhdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ2VvaGFzaCBpbiB0cmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3NbZ2VvaGFzaF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwdXNocGluSWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zdCB3b3JkcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5jYWNoZWRUcmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2suaWQgPT09IHRoaXMuY2FjaGVkVHJhY2tzW2lkXS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNocGluSWQgPSBpZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHVzaHBpbklkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVzaHBpbiA9IG5ldyBNaWNyb3NvZnQuTWFwcy5QdXNocGluKG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbih0cmFjay5sb2NhdGlvbi5sYXRpdHVkZSwgdHJhY2subG9jYXRpb24ubG9uZ2l0dWRlKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2submFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVGl0bGU6IHRoaXMuZm9ybWF0VGltZSh0aW1lc3RhbXAgLSB0cmFjay50aW1lc3RhbXApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcIi9pbWFnZXMvTWFya2VyLVN0YXIuc3ZnXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZShwdXNocGluLCB0cmFjay51c2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZiAoXCJkaWN0aW9uYXJ5XCIgaW4gdHJhY2sgJiYgXCJ3b3Jkc1wiIGluIHRyYWNrLmRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIGluIHRyYWNrLmRpY3Rpb25hcnkud29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZFdvcmQgPSBPYmplY3QuYXNzaWduKHt9LCB0cmFjay5kaWN0aW9uYXJ5LndvcmRzW3dvcmRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRXb3JkW1wibmFtZVwiXSA9IHdvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNsb25lZFdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5zb3J0KCh4LCB5KSA9PiB5LnRpbWVzdGFtcCAtIHgudGltZXN0YW1wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tbXCJ3b3Jkc1wiXSA9IHdvcmRzOyovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW4uaWRdID0gdHJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbi5pZF1bXCJwdXNocGluXCJdID0gcHVzaHBpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluLmlkXVtcImhhbmRsZXJzXCJdID0gW01pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHB1c2hwaW4sICdjbGljaycsIGFzeW5jIChhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubW9kZSA9IHRoaXMuY2FjaGVkVHJhY2tzW2FyZ3MudGFyZ2V0LmlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1JldmVhbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgTWljcm9zb2Z0Lk1hcHMuRXZlbnRzLmFkZEhhbmRsZXIocHVzaHBpbiwgJ2RibGNsaWNrJywgKGFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBzZWxmLmNhY2hlZFRyYWNrc1thcmdzLnRhcmdldC5pZF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLmVudGl0aWVzLnB1c2gocHVzaHBpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhY2sudGltZXN0YW1wID4gdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXS50aW1lc3RhbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwdXNocGluID0gdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXVtcInB1c2hwaW5cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdW1wiaGFuZGxlcnNcIl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hwaW4uc2V0TG9jYXRpb24obmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHRyYWNrLmxvY2F0aW9uLmxhdGl0dWRlLCB0cmFjay5sb2NhdGlvbi5sb25naXR1ZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNocGluLnNldE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2submFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVGl0bGU6IHRoaXMuZm9ybWF0VGltZSh0aW1lc3RhbXAgLSB0cmFjay50aW1lc3RhbXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZShwdXNocGluLCB0cmFjay51c2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZiAoXCJkaWN0aW9uYXJ5XCIgaW4gdHJhY2sgJiYgXCJ3b3Jkc1wiIGluIHRyYWNrLmRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIGluIHRyYWNrLmRpY3Rpb25hcnkud29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZFdvcmQgPSBPYmplY3QuYXNzaWduKHt9LCB0cmFjay5kaWN0aW9uYXJ5LndvcmRzW3dvcmRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRXb3JkW1wibmFtZVwiXSA9IHdvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNsb25lZFdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5zb3J0KCh4LCB5KSA9PiB5LnRpbWVzdGFtcCAtIHgudGltZXN0YW1wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tbXCJ3b3Jkc1wiXSA9IHdvcmRzOyovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW5JZF0gPSB0cmFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdW1wicHVzaHBpblwiXSA9IHB1c2hwaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXVtcImhhbmRsZXJzXCJdID0gaGFuZGxlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ2VvaGFzaCBpbiB0cmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3NbZ2VvaGFzaF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKHRyYWNrLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYWNoZWRUcmFja3MpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlkcy5zb21lKHggPT4geCA9PT0gc2VsZi5jYWNoZWRUcmFja3Nba2V5XS5pZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlcklkIG9mIHNlbGYuY2FjaGVkVHJhY2tzW2tleV0uaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaWNyb3NvZnQuTWFwcy5FdmVudHMucmVtb3ZlSGFuZGxlcihoYW5kbGVySWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmVudGl0aWVzLnJlbW92ZShzZWxmLmNhY2hlZFRyYWNrc1trZXldLnB1c2hwaW4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmNhY2hlZFRyYWNrc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVcGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heCA9IDEwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYWRlcmJvYXJkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFja0RpY3Rpb25hcnkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrUmFua2luZyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2YgdHJhY2tzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLnVzZXIuaWQgaW4gdHJhY2tEaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0RpY3Rpb25hcnlbdHJhY2sudXNlci5pZF0uY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBPYmplY3QuYXNzaWduKHt9LCB0cmFjay51c2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W1wiY291bnRcIl0gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tEaWN0aW9uYXJ5W3RyYWNrLnVzZXIuaWRdID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmFja0RpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1JhbmtpbmcucHVzaCh0cmFja0RpY3Rpb25hcnlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tSYW5raW5nLnNvcnQoKHgsIHkpID0+IHkuY291bnQgLSB4LmNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRyYWNrUmFua2luZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFkZXJib2FyZC5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgbGVhZGVyYm9hcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhZGVyYm9hcmQucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcHNpbG9uID0gTWF0aC5wb3coMTAsIC02KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG9jdW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQgZmlsdGVyZWREb2N1bWVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVybUZyZXF1ZW5jaWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc3QgYmFzZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDI0ICogNjAgKiA2MCAqIDEwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBsaW1pdCA9IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY29yZURpY3Rpb25hcnkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1heFNjb3JlID0gZXBzaWxvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b2tlbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1TZXQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2YgdHJhY2tzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRyYWNrLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybVNldC5pbmNsdWRlcyh0cmFjay5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjay5uYW1lIGluIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lbdHJhY2submFtZV0gKz0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVt0cmFjay5uYW1lXSA9IDEuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1TZXQucHVzaCh0cmFjay5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2godG9rZW5zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kb2N1bWVudHMucHVzaCh7IHRva2VuczogdG9rZW5zLCB0aW1lc3RhbXA6IHVzZXIudGltZXN0YW1wLCB1c2VyOiB7IGlkOiB1c2VyLmlkLCBuYW1lOiB1c2VyLm5hbWUsIGltYWdlOiBcImltYWdlXCIgaW4gdXNlciA/IHVzZXIuaW1hZ2UgOiBudWxsIH0gfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmZvciAoY29uc3QgdHJhY2sgb2YgdHJhY2tzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIndvcmRzXCIgaW4gdXNlciAmJiB1c2VyLndvcmRzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVtrZXldID0gTWF0aC5sb2coZG9jdW1lbnRzLmxlbmd0aCAvIChpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lba2V5XSArIGVwc2lsb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnRpbWVzdGFtcCAqIDEwMDAgPiBiYXNlVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWREb2N1bWVudHMucHVzaChkb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZERvY3VtZW50cy5sZW5ndGggPCBsaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1heChkb2N1bWVudHMubGVuZ3RoIC0gbGltaXQsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWREb2N1bWVudHMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRvY3VtZW50cy5sZW5ndGggLSAxOyBpID49IG1pbjsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERvY3VtZW50cy51bnNoaWZ0KGRvY3VtZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRmID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIGRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Zlt0b2tlbl0gKz0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Zlt0b2tlbl0gPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZltrZXldIC89IGRvY3VtZW50Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gc2NvcmVEaWN0aW9uYXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlRGljdGlvbmFyeVtrZXldID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtRnJlcXVlbmNpZXMucHVzaCh0Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY29yZURpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZXJtRnJlcXVlbmN5IG9mIHRlcm1GcmVxdWVuY2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiB0ZXJtRnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGZpZGYgPSB0ZXJtRnJlcXVlbmN5W2tleV0gKiBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRmaWRmID4gc2NvcmVEaWN0aW9uYXJ5W2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVEaWN0aW9uYXJ5W2tleV0gPSB0ZmlkZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNjb3JlRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA+IDEgJiYga2V5ICE9IFwiLi4uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHsgdGVybToga2V5LCB2YWx1ZTogc2NvcmVEaWN0aW9uYXJ5W2tleV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5zb3J0KCh4LCB5KSA9PiB5LnZhbHVlIC0geC52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29yZXMubGVuZ3RoID4gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5zcGxpY2UobWF4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmUgb2Ygc2NvcmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29yZS52YWx1ZSA+IG1heFNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhTY29yZSA9IHNjb3JlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNjb3JlIG9mIHNjb3Jlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZS52YWx1ZSAvPSBtYXhTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5zb3J0KCh4LCB5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4LnRlcm0gPiB5LnRlcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHgudGVybSA8IHkudGVybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbZG9jdW1lbnRzLCBzY29yZXNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkRG9jdW1lbnRzLnNwbGljZSgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWdzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRvY3VtZW50IG9mIHJlc3VsdHNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZERvY3VtZW50cy5wdXNoKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHNbMV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZ3MucHVzaCh7IGluZGV4OiBpLCBuYW1lOiByZXN1bHRzWzFdW2ldLnRlcm0sIHNjb3JlOiByZXN1bHRzWzFdW2ldLnZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdGhpcy5pc0JsaW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy9hY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmZXRjaDogYXN5bmMgZnVuY3Rpb24gKGlnbm9yZSwgbGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVjaXNpb25zID0geyAxOiAyLCAyOiAyLCAzOiAyLCA0OiAyLCA1OiAyLCA2OiAyLCA3OiAyLCA4OiAyLCA5OiAyLCAxMDogMywgMTE6IDMsIDEyOiA0LCAxMzogNCwgMTQ6IDQsIDE1OiA1LCAxNjogNSwgMTc6IDUsIDE4OiA2LCAxOTogNiwgMjA6IDYgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlckdlb2hhc2ggPSB0aGlzLmVuY29kZUdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgcHJlY2lzaW9uc1t0aGlzLm1hcC5nZXRab29tKCldKTtcclxuICAgICAgICAgICAgICAgIGxldCBnZW9oYXNoZXMgPSBbY2VudGVyR2VvaGFzaF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wUmVjZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJpbWl0aXZlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmRlY29kZUdlb2hhc2goY2VudGVyR2VvaGFzaCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSA2MDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBDYWNoZSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZXMucHVzaChuZXcgTWljcm9zb2Z0Lk1hcHMuUG9seWdvbihbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wcmlnaHQubGF0aXR1ZGUsIHJlY3QudG9wcmlnaHQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC5ib3R0b21yaWdodC5sYXRpdHVkZSwgcmVjdC5ib3R0b21yaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LmJvdHRvbWxlZnQubGF0aXR1ZGUsIHJlY3QuYm90dG9tbGVmdC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LnRvcGxlZnQubGF0aXR1ZGUsIHJlY3QudG9wbGVmdC5sb25naXR1ZGUpXSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlVGhpY2tuZXNzOiAxXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNlbnRlckdlb2hhc2gubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IHRoaXMuZ2V0TmVpZ2hib3JzKGNlbnRlckdlb2hhc2gpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZWlnaGJvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvaGFzaGVzLnB1c2gobmVpZ2hib3JzW2tleV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdCA9IHRoaXMuZGVjb2RlR2VvaGFzaChuZWlnaGJvcnNba2V5XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmVzLnB1c2gobmV3IE1pY3Jvc29mdC5NYXBzLlBvbHlnb24oW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3ByaWdodC5sYXRpdHVkZSwgcmVjdC50b3ByaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QuYm90dG9tcmlnaHQubGF0aXR1ZGUsIHJlY3QuYm90dG9tcmlnaHQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LmJvdHRvbWxlZnQubGF0aXR1ZGUsIHJlY3QuYm90dG9tbGVmdC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSldLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICdyZ2JhKDI1NSwgMCwgMCwgMC41KScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VUaGlja25lc3M6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVyLnNldFByaW1pdGl2ZXMocHJpbWl0aXZlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVF1ZXVlLnB1c2goY2VudGVyR2VvaGFzaCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBnZW9oYXNoIG9mIGdlb2hhc2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaWdub3JlICYmIGdlb2hhc2ggaW4gdGhpcy5xdWVyeUNhY2hlICYmIHRpbWVzdGFtcCAtIHRoaXMucXVlcnlDYWNoZVtnZW9oYXNoXS50aW1lc3RhbXAgPCB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXNlciBvZiB0aGlzLnF1ZXJ5Q2FjaGVbZ2VvaGFzaF0uZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFJlY2VudC5wdXNoKHVzZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9oYXNoIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2dlb2hhc2hdLnB1c2godXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZ2VvaGFzaF0gPSBbdXNlcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzXCIpLm9yZGVyQnlDaGlsZChcImtleVwiKS5saW1pdFRvTGFzdCg1MCkuc3RhcnRBdChnZW9oYXNoKS5lbmRBdChnZW9oYXNoLnBhZEVuZCgxMiwgXCJ6XCIpICsgXCJcXHVmOGZmXCIpLm9uY2UoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBDYWNoZVtnZW9oYXNoXSA9IHsgdGltZXN0YW1wOiB0aW1lc3RhbXAsIGRhdGE6IFtdIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWN0aW9uYXJ5ID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV1bXCJpZFwiXSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBSZWNlbnQucHVzaChkaWN0aW9uYXJ5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENhY2hlW2dlb2hhc2hdLmRhdGEucHVzaChkaWN0aW9uYXJ5W2tleV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9oYXNoIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2dlb2hhc2hdLnB1c2goZGljdGlvbmFyeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtnZW9oYXNoXSA9IFtkaWN0aW9uYXJ5W2tleV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnlRdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5UXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ2VvaGFzaCBpbiB0ZW1wQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5Q2FjaGVbZ2VvaGFzaF0gPSB0ZW1wQ2FjaGVbZ2VvaGFzaF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeUNhY2hlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wIC0gc2VsZi5xdWVyeUNhY2hlW2tleV0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYucXVlcnlDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VudCA9IHRoaXMudGFrZSh0ZW1wUmVjZW50LnNvcnQoKHgsIHkpID0+IHkudGltZXN0YW1wIC0geC50aW1lc3RhbXApLCAxMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBkYXRhW2tleV0ubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY2VudC5pbmNsdWRlcyhkYXRhW2tleV1baV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2tleV0uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtrZXldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGFydFBlZG9tZXRlcjogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKERldmljZU1vdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvblN0YXRlID0gYXdhaXQgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb25TdGF0ZSAhPT0gXCJncmFudGVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldmljZU1vdGlvbiA9IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZyA9IGV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQoYWcueCAqIGFnLnggKyBhZy55ICogYWcueSArIGFnLnogKiBhZy56KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzU3RlcHBpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIDwgOS44KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm93RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZURhdGUgPSBub3dEYXRlLmdldFRpbWUoKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RlcHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RlcHBpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZGF5cyA9IHNlbGYuc3RhdHMubGVuZ3RoIC0gMTsgZGF5cyA+IDA7IGRheXMtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5zdGF0c1tkYXlzXS5kYXRlLmdldFRpbWUoKSA8PSBiYXNlRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGF0cy5zcGxpY2UoZGF5cywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5zdGF0c1tkYXlzXS5kYXRlLmdldEZ1bGxZZWFyKCkgIT09IG5vd0RhdGUuZ2V0RnVsbFllYXIoKSAmJiBzZWxmLnN0YXRzW2RheXNdLmRhdGUuZ2V0TW9udGgoKSAhPT0gbm93RGF0ZS5nZXRNb250aCgpICYmIHNlbGYuc3RhdHNbZGF5c10uZGF0ZS5nZXREYXRlKCkgIT09IG5vd0RhdGUuZ2V0RGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5wdXNoKHsgZGF0ZTogc2VsZi5zdGF0c1tkYXlzXS5kYXRlLnRvSVNPU3RyaW5nKCksIHN0ZXBzOiBzZWxmLnN0YXRzW2RheXNdLnN0ZXBzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy51bnNoaWZ0KHsgZGF0ZTogbmV3IERhdGUobm93RGF0ZS5nZXRGdWxsWWVhcigpLCBub3dEYXRlLmdldE1vbnRoKCksIG5vd0RhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwKS50b0lTT1N0cmluZygpLCBzdGVwczogc2VsZi5zdGVwcyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzdGF0c1wiLCBKU09OLnN0cmluZ2lmeShzdGF0cykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJzdGF0c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnN0ZXBzICUgMTAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkNvdW50ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1xceyhcXGQpXFx9L2csIGZ1bmN0aW9uIChtLCBjKSB7IHJldHVybiBhcmdzW3BhcnNlSW50KGMpICsgMV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2Ygc2VsZi5jaGFycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGogPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZCBvZiBncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5wdXNoKHsgcGF0aDogeyByb3c6IGksIGNvbHVtbjogaiB9LCBkYXRhOiBkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuY291bnQgPCBtaW5Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5Db3VudCA9IGQuY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IG1hcC5sZW5ndGggLSAxOyBqID4gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwW2pdLmRhdGEuY291bnQgPiBtaW5Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5zcGxpY2UoaiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4UGF0aCA9IG1hcFtfcmFuZG9tKDAsIG1hcC5sZW5ndGgpXS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXF1ZW5jZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGFyc1tpbmRleFBhdGgucm93XVtpbmRleFBhdGguY29sdW1uXS5jb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYXJzW2luZGV4UGF0aC5yb3ddW2luZGV4UGF0aC5jb2x1bW5dLnRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkNhcHR1cmVcIiksIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdLCB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdKSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkNhcHR1cmVcIiksIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdLCB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLCB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHNlbGYuY2hhcnNbaW5kZXhQYXRoLnJvd11baW5kZXhQYXRoLmNvbHVtbl0uc2V0WzBdKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY2hhcmFjdGVyXCJdID0gdGhpcy5jaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQgPiAxMi4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RlcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlbW90aW9uXCIsIHRoaXMuZGV2aWNlTW90aW9uLCB0cnVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RvcFBlZG9tZXRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkZXZpY2Vtb3Rpb25cIiwgdGhpcy5kZXZpY2VNb3Rpb24sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXZpY2VNb3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2NhdGU6IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFwicGVybWlzc2lvbnNcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uU3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogXCJnZW9sb2NhdGlvblwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVybWlzc2lvblN0YXR1cy5zdGF0ZSA9PSBcImdyYW50ZWRcIiB8fCBwZXJtaXNzaW9uU3RhdHVzLnN0YXRlID09IFwicHJvbXB0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9jYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNMb2NhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuc2V0Vmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzTG9jYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZXJyb3IubWVzc2FnZSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvY2F0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0xvY2F0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHNlbGYubWFwLmdldFpvb20oKSA8IDE2ID8gMTYgOiBzZWxmLm1hcC5nZXRab29tKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNMb2NhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLypjb25zdCBwZXJtaXNzaW9uU3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogXCJnZW9sb2NhdGlvblwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uU3RhdHVzLnN0YXRlID09IFwiZ3JhbnRlZFwiIHx8IHBlcm1pc3Npb25TdGF0dXMuc3RhdGUgPT0gXCJwcm9tcHRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOyovXHJcblxyXG4gICAgICAgICAgICAgICAgLyp0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogNTAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAvKmNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHRoaXMudXNlci51aWQpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBrZXk6IGdlb2hhc2ggKyB0aW1lc3RhbXAsIG5hbWU6IHNlbGYudXNlci5kaXNwbGF5TmFtZSwgaW1hZ2U6IHNlbGYudXNlci5waG90b1VSTCwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIH0sIGdlb2hhc2g6IGdlb2hhc2gsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJrZXlcIl0gPSBnZW9oYXNoICsgdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibmFtZVwiXSA9IHNlbGYudXNlci5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcltcImltYWdlXCJdID0gc2VsZi51c2VyLnBob3RvVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibG9jYXRpb25cIl0gPSB7IGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wiZ2VvaGFzaFwiXSA9IGdlb2hhc2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJ0aW1lc3RhbXBcIl0gPSB0aW1lc3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIGNvbW1pdHRlZCwgc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21taXR0ZWQgJiYgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyBzZWxmLnVzZXIudWlkKS50cmFuc2FjdGlvbihmdW5jdGlvbiAodSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21taXR0ZWQgJiYgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyovXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8qfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZW5kOiBhc3luYyBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRGVidWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBrZXlzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YWdzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRoaXMuaW5wdXQuc3BsaXQoL1xccy8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnNvbWUoKHgpID0+IHguaWQgPT09IHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3MucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDAgJiYgdGFncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL2ltYWdlcy9cIiArIGtleSkudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlW1widGFnc1wiXSA9IHRhZ3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xlYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dC5sZW5ndGggPD0gdGhpcy5tYXhJbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYXJuKHsgbmFtZTogdGhpcy5pbnB1dCwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTGVhcm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gaW1hZ2UuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5wdXQubGVuZ3RoID4gMCAmJiB0aGlzLmlucHV0Lmxlbmd0aCA8PSB0aGlzLm1heElucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFybih7IG5hbWU6IHRoaXMuaW5wdXQsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBsb2NhdGlvbi5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGUgfSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTGVhcm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFrZSh0aGlzLiRyZWZzLmlucHV0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0SW1hZ2U6IGFzeW5jIGZ1bmN0aW9uIChwdXNocGluLCB1c2VyLCBzZWxlY3RlZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIC8vY29uc3QgaG91cnMgPSBuZXcgRGF0ZSh0cmFjay5wb3NpdGlvbi50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcImltYWdlXCIgaW4gdXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAvKnB1c2hwaW4uc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiIHN0YW5kYWxvbmU9XCJub1wiPz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAxOCAxOFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiB4bWxuczpzZXJpZj1cImh0dHA6Ly93d3cuc2VyaWYuY29tL1wiIHN0eWxlPVwiZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMSwwLDAsMSwtMTcuNzA3NywtMTguNzUzOClcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTI2LjcwOCwxOS43NTRDMzEuMTIzLDE5Ljc1NCAzNC43MDgsMjMuMzM5IDM0LjcwOCwyNy43NTRDMzQuNzA4LDMyLjE2OSAzMS4xMjMsMzUuNzU0IDI2LjcwOCwzNS43NTRDMjIuMjkyLDM1Ljc1NCAxOC43MDgsMzIuMTY5IDE4LjcwOCwyNy43NTRDMTguNzA4LDIzLjMzOSAyMi4yOTIsMTkuNzU0IDI2LjcwOCwxOS43NTRaTTI2LjcwOCwyMy43NTRDMjguOTE1LDIzLjc1NCAzMC43MDgsMjUuNTQ2IDMwLjcwOCwyNy43NTRDMzAuNzA4LDI5Ljk2MiAyOC45MTUsMzEuNzU0IDI2LjcwOCwzMS43NTRDMjQuNSwzMS43NTQgMjIuNzA4LDI5Ljk2MiAyMi43MDgsMjcuNzU0QzIyLjcwOCwyNS41NDYgMjQuNSwyMy43NTQgMjYuNzA4LDIzLjc1NFpcIiBzdHlsZT1cImZpbGw6cmdiKDI1NSwyMzgsMCk7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5gXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBhd2FpdCBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXIuaW1hZ2Uuc3RhcnRzV2l0aChcImdzOi8vXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zcmMgPSBhd2FpdCBzdG9yYWdlLnJlZkZyb21VUkwodXNlci5pbWFnZSkuZ2V0RG93bmxvYWRVUkwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zcmMgPSB1c2VyLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hwaW4uc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwibm9cIj8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjU0XCIgdmlld0JveD1cIjAgMCA1MCA1NFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiB4bWxuczpzZXJpZj1cImh0dHA6Ly93d3cuc2VyaWYuY29tL1wiIHN0eWxlPVwiZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDAuOTk5OTk5LDAsMCwwLjk5OTk5OSwxNy4wMDExLC0xMylcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wLDUwTDE2LDUwTDgsNjZMMCw1MFpcIiBzdHlsZT1cImZpbGw6cmdiKDI1NSwyMzgsMCk7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMS45NjQ5MSwwLDAsMS45NjQ5MSwtMzAuMDA5OSwtMjQuNTkzMSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cIm1hdHJpeCgwLjQxMDU3NCwwLDAsMC40MTA1NzQsMzQuMDQ5OCwyNi43Njk0KVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wLC03LjI5Qy0wLjMxMSwtOC4yNDcgLTEuMTM4LC04Ljk0NCAtMi4xMzMsLTkuMDg5TC05LjIxLC0xMC4xMTdMLTEyLjM3NSwtMTYuNTI5Qy0xMi44MTksLTE3LjQzMiAtMTMuNzM4LC0xOC4wMDMgLTE0Ljc0NCwtMTguMDAzQy0xNS43NSwtMTguMDAzIC0xNi42NywtMTcuNDMyIC0xNy4xMTQsLTE2LjUzTC0yMC4yNzksLTEwLjExN0wtMjcuMzU1LC05LjA4OUMtMjguMzUyLC04Ljk0NCAtMjkuMTc5LC04LjI0NyAtMjkuNDksLTcuMjlDLTI5LjgwMSwtNi4zMzMgLTI5LjU0MSwtNS4yODMgLTI4LjgyLC00LjU4MUwtMjMuNywwLjQxTC0yNC45MDgsNy40NTlDLTI1LjA3OCw4LjQ1IC0yNC42NzIsOS40NTIgLTIzLjg1NywxMC4wNDNDLTIzLjA0MywxMC42MzUgLTIxLjk2NSwxMC43MTMgLTIxLjA3NCwxMC4yNDRMLTE0Ljc0NCw2LjkxN0wtOC40MTUsMTAuMjQ0Qy04LjAyOCwxMC40NDcgLTcuNjA2LDEwLjU0OCAtNy4xODYsMTAuNTQ4Qy02LjYzOCwxMC41NDggLTYuMDkyLDEwLjM3NyAtNS42MzIsMTAuMDQzQy00LjgxOCw5LjQ1MiAtNC40MSw4LjQ1IC00LjU4LDcuNDU4TC01Ljc4OSwwLjQxTC0wLjY2OCwtNC41ODFDMC4wNTIsLTUuMjgzIDAuMzEyLC02LjMzMyAwLC03LjI5XCIgc3R5bGU9XCJmaWxsOndoaXRlO2ZpbGwtcnVsZTpub256ZXJvO1wiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IG9wYWNpdHkgPSBob3VycyA+PSA2ICYmIGhvdXJzIDwgMTggPyBcIjAuMDVcIiA6IFwiMVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc3QgYWNjZW50Q29sb3IgPSBzZWxmLnVzZXIudWlkID09PSB3b3JkLmlkID8gc2VsZi5jaGFyYWN0ZXIuYWNjZW50IDogJyNmZmZmZmYnO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc3Qgc2VsZWN0ZWRDb2xvciA9IHNlbGVjdGVkID8gc2VsZi5jaGFyYWN0ZXIuYWNjZW50IDogJ3JnYigyNTQsMjIxLDgwKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5saW5lU3ZnID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cIm5vXCI/PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjUwXCIgaGVpZ2h0PVwiNTRcIiB2aWV3Qm94PVwiMCAwIDUwIDU0XCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHhtbG5zOnNlcmlmPVwiaHR0cDovL3d3dy5zZXJpZi5jb20vXCIgc3R5bGU9XCJmaWxsLXJ1bGU6ZXZlbm9kZDtjbGlwLXJ1bGU6ZXZlbm9kZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cIm1hdHJpeCgwLjk5OTk5OSwwLDAsMC45OTk5OTksMTcuMDAxMSwtMTMpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wLDUwTDE2LDUwTDgsNjZMMCw1MFpcIiBzdHlsZT1cImZpbGw6cmdiKDI1NSwyMzgsMCk7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDEuOTY0OTEsMCwwLDEuOTY0OTEsLTMwLjAwOTksLTI0LjU5MzEpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiX2NsaXAxXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIyNy45OTZcIiBjeT1cIjI1LjIzOVwiIHI9XCIxMi4yMTRcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jbGlwUGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI19jbGlwMSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDAuNzkxNjY3LDAsMCwwLjc5MTY2Nyw1LjgzMjQ5LDUuMjU4MilcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIyNy45OTZcIiBjeT1cIjI1LjIzOVwiIHI9XCIxMi4yMTRcIiBzdHlsZT1cImZpbGw6d2hpdGU7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiX2NsaXAyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2xpcFBhdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI19jbGlwMilcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD1cIkJhY2tncm91bmRcIiB0cmFuc2Zvcm09XCJtYXRyaXgoMC4wMjM4NTYsMCwwLDAuMDIzODU2LC0yLjUzOTY0LC01LjI5NjU4KVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCIjX0ltYWdlM1wiIHg9XCI3NjdcIiB5PVwiNzY3XCIgd2lkdGg9XCIxMDI2cHhcIiBoZWlnaHQ9XCIxMDI2cHhcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltYWdlIGlkPVwiX0ltYWdlM1wiIHdpZHRoPVwiMTAyNnB4XCIgaGVpZ2h0PVwiMTAyNnB4XCIgeGxpbms6aHJlZj1cImAgKyBjLnRvRGF0YVVSTCgpICsgYFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGVmcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+YDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaHBpbi5zZXRPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaW5saW5lU3ZnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dC5sZW5ndGggPD0gdGhpcy5tYXhJbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRIYXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0SGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGxvYWQ6IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVVdWlkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvY2hyb21lLXBsYXRmb3JtLWFuYWx5dGljcy9ibG9iL21hc3Rlci9zcmMvaW50ZXJuYWwvaWRlbnRpZmllci5qc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IEZPUk1BVDogc3RyaW5nID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnMgPSBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hhcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyc1tpXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwieVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzW2ldID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpICsgOCkudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnMuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VSZWYgPSBzdG9yYWdlLnJlZigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGV2ZW50LnRhcmdldC5maWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzLnNvcnQoKHgsIHkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeC5uYW1lID4geS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeC5uYW1lIDwgeS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGxvYWRUYXNrID0gc3RvcmFnZVJlZi5jaGlsZChgaW1hZ2VzLyR7Z2VuZXJhdGVVdWlkKCl9YCkucHV0KGZpbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRUYXNrLm9uKFwic3RhdGVfY2hhbmdlZFwiLCBmdW5jdGlvbiAoc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2dyZXNzID0gc25hcHNob3QuYnl0ZXNUcmFuc2ZlcnJlZCAvIHNuYXBzaG90LnRvdGFsQnl0ZXMgLyBmaWxlcy5sZW5ndGggKyBwYXRocy5sZW5ndGggLyBmaWxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aHMucHVzaCh1cGxvYWRUYXNrLnNuYXBzaG90LnJlZi5mdWxsUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL2ltYWdlc1wiKS5wdXNoKHsgcGF0aHM6IHBhdGhzLCB0aW1lc3RhbXA6IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFybjogYXN5bmMgZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdChmb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9cXHsoXFxkKVxcfS9nLCBmdW5jdGlvbiAobSwgYykgeyByZXR1cm4gYXJnc1twYXJzZUludChjKSArIDFdIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwiYXR0cmlidXRlc1wiIGluIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSBpbiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB0aGlzLnVzZXIudWlkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHdvcmQubmFtZSkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIHcuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3LmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHsgbmFtZTogYXR0cmlidXRlLCB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7IG5hbWU6IGF0dHJpYnV0ZSwgdmFsdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMud29yZCA9IHsgbmFtZTogd29yZC5uYW1lLCBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwibG9jYXRpb25cIiBpbiB3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkW1wibG9jYXRpb25cIl0gPSB3b3JkLmxvY2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcInVzZXJcIiBpbiB3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkW1widXNlclwiXSA9IHdvcmQudXNlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkxlYXJuXCIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHdvcmQubmFtZSkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy53b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlID09PSBldmVudC50YXJnZXQuZGF0YXNldC5hdHRyaWJ1dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLnZhbHVlID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaGFyZTogYXN5bmMgZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBcImxvY2F0aW9uXCIgaW4gd29yZCA/IHdvcmQubG9jYXRpb24gOiB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdlb2hhc2ggPSB0aGlzLmVuY29kZUdlb2hhc2gobG9jYXRpb24ubGF0aXR1ZGUsIGxvY2F0aW9uLmxvbmdpdHVkZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyID0geyBpZDogdGhpcy51c2VyLnVpZCwgbmFtZTogdGhpcy51c2VyLmRpc3BsYXlOYW1lLCBpbWFnZTogdGhpcy51c2VyLnBob3RvVVJMIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAod29yZC5uYW1lIGluIHRoaXMud29yZERpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy53b3JkRGljdGlvbmFyeVt3b3JkLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlba2V5XS53b3Jkcy5zb21lKCh4KSA9PiB4ID09PSB3b3JkLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTdWJtaXR0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51c2VyLnByb3ZpZGVyRGF0YVswXS5wcm92aWRlcklkID09PSBmaXJlYmFzZS5hdXRoLlR3aXR0ZXJBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rID0gYXdhaXQgZGF0YWJhc2UucmVmKGAke2RhdGFiYXNlUm9vdH0vdXNlcnMvJHt0aGlzLnVzZXIudWlkfS9saW5rYCkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGluay5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibGlua1wiXSA9IGxpbmsudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHRoaXMudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgd29yZC5uYW1lKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1cGRhdGVSZXF1aXJlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2Ygd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgaW4gY3VycmVudC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSZXF1aXJlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSZXF1aXJlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVSZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbGV0ZVJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSB7IGF0dHJpYnV0ZXM6IHt9IH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2Ygd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgaW4gY3VycmVudC5hdHRyaWJ1dGVzICYmIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSB0aW1lc3RhbXAgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVSZXF1aXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsZXRlUmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1tcInRpbWVzdGFtcFwiXSA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHsgYXR0cmlidXRlczoge30sIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwidXNlclwiIGluIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJ1c2VyXCJdID0geyBpZDogd29yZC51c2VyLmlkLCBuYW1lOiB3b3JkLnVzZXIubmFtZSwgaW1hZ2U6IHdvcmQudXNlci5pbWFnZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgIH0sIGFzeW5jIGZ1bmN0aW9uIChlcnJvciwgY29tbWl0dGVkLCBzbmFwc2hvdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21taXR0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWN0aW9uYXJ5ID0gc25hcHNob3QudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGljdGlvbmFyeS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkaWN0aW9uYXJ5LmF0dHJpYnV0ZXNba2V5XSA9PT0gXCJudW1iZXJcIiAmJiBkaWN0aW9uYXJ5LmF0dHJpYnV0ZXNba2V5XSA+IDAgJiYgc2VsZi5hdHRyaWJ1dGVzLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wcy5wdXNoKGRpY3Rpb25hcnkuYXR0cmlidXRlc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxICYmIHRpbWVzdGFtcHNbMF0gPT09IGRpY3Rpb25hcnkudGltZXN0YW1wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFx7KFxcZClcXH0vZywgZnVuY3Rpb24gKG0sIGMpIHsgcmV0dXJuIGFyZ3NbcGFyc2VJbnQoYykgKyAxXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHNlbGYudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L2NvdW50XCIpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNvdW50IHx8IDApICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygc2VsZi5wcmVwYXJlKHNlbGYuY2hhcmFjdGVyLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJMZWFybmVkXCIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGZvcm1hdChvYmoudGV4dCwgd29yZC5uYW1lKSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N0YXJlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N0YXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNNdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnR3aW5rbGUucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJ1c2VyXCIgaW4gd29yZCA9PT0gZmFsc2UgfHwgd29yZC51c2VyLmlkID09PSBzZWxmLnVzZXIudWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3RyYWNrcy9cIiArIGF3YWl0IHNlbGYuZGlnZXN0TWVzc2FnZShgJHtzZWxmLnVzZXIudWlkfSYke3dvcmQubmFtZX1gKSkudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJrZXlcIl0gPSBgJHtnZW9oYXNofSR7dGltZXN0YW1wfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wibG9jYXRpb25cIl0gPSB7IGxhdGl0dWRlOiBsb2NhdGlvbi5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGUgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJnZW9oYXNoXCJdID0gZ2VvaGFzaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJ0aW1lc3RhbXBcIl0gPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0geyBrZXk6IGAke2dlb2hhc2h9JHt0aW1lc3RhbXB9YCwgbmFtZTogd29yZC5uYW1lLCBsb2NhdGlvbjogeyBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsIGxvbmdpdHVkZTogbG9jYXRpb24ubG9uZ2l0dWRlIH0sIGdlb2hhc2g6IGdlb2hhc2gsIHVzZXI6IHVzZXIsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRpY3Rpb25hcnkuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYXR0cmlidXRlcy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1trZXldID0gZGljdGlvbmFyeS5hdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJhdHRyaWJ1dGVzXCJdID0gYXR0cmlidXRlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlLCBjLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWYgPSBkYXRhYmFzZS5yZWYoYCR7ZGF0YWJhc2VSb290fS90cmFja3NgKS5wdXNoKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5zZXQoeyBrZXk6IGdlb2hhc2ggKyB0aW1lc3RhbXAsIG5hbWU6IHdvcmQubmFtZSwgYXR0cmlidXRlczogd29yZC5hdHRyaWJ1dGVzLCBsb2NhdGlvbjogeyBsYXRpdHVkZTogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBsb25naXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUgfSwgZ2VvaGFzaDogZ2VvaGFzaCwgdGltZXN0YW1wOiB0aW1lc3RhbXAsIHVzZXI6IHsgaWQ6IHNlbGYudXNlci51aWQsIG5hbWU6IHNlbGYudXNlci5kaXNwbGF5TmFtZSwgaW1hZ2U6IHNlbGYudXNlci5waG90b1VSTCB9IH0sIGFzeW5jIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyBzZWxmLnVzZXIudWlkICsgXCIvZGljdGlvbmFyeS9jb3VudFwiKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgJiYgY291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3RyYWNrcy9cIiArIGF3YWl0IHNlbGYuZGlnZXN0TWVzc2FnZShgJHtzZWxmLnVzZXIudWlkfSYke3dvcmQubmFtZX1gKSkudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlLCBjLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzLmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGUubWVzc2FnZSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNTdWJtaXR0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlcnJvci5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwidXNlclwiIGluIHdvcmQgPT09IGZhbHNlIHx8IHdvcmQudXNlci5pZCA9PT0gc2VsZi51c2VyLnVpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzL1wiICsgYXdhaXQgc2VsZi5kaWdlc3RNZXNzYWdlKGAke3NlbGYudXNlci51aWR9JiR7d29yZC5uYW1lfWApKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wia2V5XCJdID0gYCR7Z2VvaGFzaH0ke3RpbWVzdGFtcH1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJsb2NhdGlvblwiXSA9IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJnZW9oYXNoXCJdID0gZ2VvaGFzaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widXNlclwiXSA9IHVzZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInRpbWVzdGFtcFwiXSA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2Ygd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSB0aW1lc3RhbXAgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7IGtleTogYCR7Z2VvaGFzaH0ke3RpbWVzdGFtcH1gLCBuYW1lOiB3b3JkLm5hbWUsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBsb2NhdGlvbi5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGUgfSwgZ2VvaGFzaDogZ2VvaGFzaCwgYXR0cmlidXRlczoge30sIHVzZXI6IHVzZXIsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlLCBjLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbmV4dDogYXN5bmMgZnVuY3Rpb24gKHVzZXJJZCwgc3RhcnRBdCwgbGltaXQgPSA1MCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNuYXBzaG90O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGFydEF0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzXCIpLm9yZGVyQnlLZXkoKS5saW1pdFRvRmlyc3QobGltaXQgKyAxKS5vbmNlKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkc1wiKS5vcmRlckJ5S2V5KCkuc3RhcnRBdChzdGFydEF0KS5saW1pdFRvRmlyc3QobGltaXQgKyAxKS5vbmNlKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwid29yZHNcIiBpbiB0aGlzLm1vZGUgJiYgc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlLndvcmRzICE9PSBudWxsICYmIHRoaXMubW9kZS53b3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS5pbmRleGVzLnB1c2godGhpcy5tb2RlLndvcmRzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS53b3JkcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gd29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLndvcmRzLnB1c2goXCJ1c2VyXCIgaW4gd29yZHNbbmFtZV0gPyB7IG5hbWU6IG5hbWUsIGF0dHJpYnV0ZXM6IHdvcmRzW25hbWVdLmF0dHJpYnV0ZXMsIHVzZXI6IHdvcmRzW25hbWVdLnVzZXIgfSA6IHsgbmFtZTogbmFtZSwgYXR0cmlidXRlczogd29yZHNbbmFtZV0uYXR0cmlidXRlcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUud29yZHMubGVuZ3RoID09PSBsaW1pdCArIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLm5leHQgPSB0aGlzLm1vZGUud29yZHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLm5leHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJldmlvdXM6IGFzeW5jIGZ1bmN0aW9uICh1c2VySWQsIHN0YXJ0QXQsIGxpbWl0ID0gNTApIHtcclxuICAgICAgICAgICAgICAgIGxldCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHNcIikub3JkZXJCeUtleSgpLnN0YXJ0QXQoc3RhcnRBdCkubGltaXRUb0ZpcnN0KGxpbWl0KS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwid29yZHNcIiBpbiB0aGlzLm1vZGUgJiYgc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlLndvcmRzICE9PSBudWxsICYmIHRoaXMubW9kZS53b3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS5uZXh0ID0gdGhpcy5tb2RlLndvcmRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLndvcmRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB3b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUud29yZHMucHVzaChcInVzZXJcIiBpbiB3b3Jkc1tuYW1lXSA/IHsgbmFtZTogbmFtZSwgYXR0cmlidXRlczogd29yZHNbbmFtZV0uYXR0cmlidXRlcywgdXNlcjogd29yZHNbbmFtZV0udXNlciB9IDogeyBuYW1lOiBuYW1lLCBhdHRyaWJ1dGVzOiB3b3Jkc1tuYW1lXS5hdHRyaWJ1dGVzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzY292ZXI6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRTZXQgPSB7fTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IFtdLmNvbmNhdChhcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrID0gX3JhbmRvbSgwLCBuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhW25dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYVtuXSA9IGFba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFba10gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIHRoaXMucmVjZW50V29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51c2VyLnVpZCAhPT0gd29yZC51c2VyLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2god29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRTZXRbd29yZC5uYW1lXSA9IHdvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY2FjaGVkVHJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXNlci51aWQgIT09IHRoaXMuY2FjaGVkVHJhY2tzW2tleV0udXNlci5pZCAmJiB0aGlzLmNhY2hlZFRyYWNrc1trZXldLm5hbWUgaW4gd29yZFNldCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMucHVzaCh0aGlzLmNhY2hlZFRyYWNrc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0Rpc2NvdmVyaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2Ygc2h1ZmZsZSh3b3JkcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdGhpcy51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB3b3JkLm5hbWUpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHNlbGYudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgd29yZC5uYW1lKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB7IGtleTogd29yZC5rZXksIG5hbWU6IHdvcmQubmFtZSwgYXR0cmlidXRlczogd29yZC5hdHRyaWJ1dGVzLCBsb2NhdGlvbjogd29yZC5sb2NhdGlvbiwgZ2VvaGFzaDogd29yZC5nZW9oYXNoLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNuYXBzaG90KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1xceyhcXGQpXFx9L2csIGZ1bmN0aW9uIChtLCBjKSB7IHJldHVybiBhcmdzW3BhcnNlSW50KGMpICsgMV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Rpc2NvdmVyaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkRpc2NvdmVyXCIpLCB3b3JkLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeSh7IHRleHQ6IGZvcm1hdChvYmoudGV4dCwgd29yZC5uYW1lKSwgYWNjZW50OiB0aGlzLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiB0aGlzLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiB0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkRpc2NvdmVyXCIpLCB3b3JkLm5hbWUsIHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLnNlcXVlbmNlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyB0eXBlOiBvYmoudHlwZSwgc3BlZWQ6IG9iai5zcGVlZCwgZHVyYXRpb246IG9iai5kdXJhdGlvbiwgY2hhcmFjdGVyOiB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZSwgdGV4dDogZm9ybWF0KG9iai50ZXh0LCB3b3JkLm5hbWUpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImNoYXJhY3RlclwiXSA9IHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhcm4oeyBuYW1lOiB3b3JkLm5hbWUsIGF0dHJpYnV0ZXM6IHdvcmQuYXR0cmlidXRlcywgbG9jYXRpb246IHdvcmQubG9jYXRpb24sIHVzZXI6IHdvcmQudXNlciB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHdvcmQubG9jYXRpb24ubGF0aXR1ZGUsIHdvcmQubG9jYXRpb24ubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRGlzY292ZXJpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKmZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiRGlzY292ZXJcIiksIFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeSh7IHRleHQ6IG9iai50ZXh0LCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiRGlzY292ZXJcIiksIFwiXCIsIHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLnNlcXVlbmNlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyB0eXBlOiBvYmoudHlwZSwgc3BlZWQ6IG9iai5zcGVlZCwgZHVyYXRpb246IG9iai5kdXJhdGlvbiwgY2hhcmFjdGVyOiB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZSwgdGV4dDogb2JqLnRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY2hhcmFjdGVyXCJdID0gdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaChzZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpZ2VzdE1lc3NhZ2U6IGFzeW5jIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2dVaW50OCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShtZXNzYWdlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmNvZGUgYXMgKHV0Zi04KSBVaW50OEFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBtc2dVaW50OCk7ICAgICAgICAgICAvLyBoYXNoIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTsgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGJ1ZmZlciB0byBieXRlIGFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpOyAvLyBjb252ZXJ0IGJ5dGVzIHRvIGhleCBzdHJpbmdcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzaEhleDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWN0aXZhdGU6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlkbGVUaW1lID0gYWN0aXZhdGVUaW1lID0gMC4wO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlZERvY3VtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRRdWV1ZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhW25dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2tdID0gdGVtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBzaHVmZmxlKHRoaXMuY2FjaGVkRG9jdW1lbnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFF1ZXVlLnB1c2goZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9jdW1lbnRRdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWF3YWl0IHRoaXMudGFsayh0aGlzLnVzZXIudWlkLCBkb2N1bWVudC5maWx0ZXIoKHgpID0+IHggIT09IHRoaXMuY2hhcmFjdGVyLm5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy51c2VyLnVpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy51c2VyLnVpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRhbGs6IGFzeW5jIGZ1bmN0aW9uICh1c2VySWQsIHRva2VucyA9IFtdKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2VzID0gdGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkFjdGl2YXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlcXVlbmNlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYVtuXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFba10gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSA2MCAqIDYwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBTdGF0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudGVyID0gbmV3IFRpbnlTZWdtZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5TZXQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuIGluIHRoaXMud29yZERpY3Rpb25hcnkgPT09IGZhbHNlIHx8IHRpbWVzdGFtcCAtIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLnRpbWVzdGFtcCA+PSB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB0b2tlbikub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dID0geyBhdHRyaWJ1dGVzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBpbiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAod29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pID09PSBcIm51bWJlclwiICYmIHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdID4gMCAmJiB0aGlzLmF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBzaHVmZmxlKHNlcXVlbmNlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlcGFyZWRTZXF1ZW5jZSA9IHRoaXMucHJlcGFyZShbc10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNBYm9ydGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2YgcHJlcGFyZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgQXJyYXkuaXNBcnJheShvLnRleHQpID8gby50ZXh0IDogc2VnbWVudGVyLnNlZ21lbnQoby50ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHByZXBhcmVkU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGUodXNlcklkLCBvYmoudGV4dCwgdG9rZW5zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Fib3J0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FjaGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RleHQsIGNhY2hlXSA9IHRlbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWJvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4ubGVuZ3RoID4gMSAmJiAhdG9rZW5TZXQuaW5jbHVkZXModG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGhpcy53b3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB0b2tlbikub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXSA9IHsgYXR0cmlidXRlczogW10sIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdKSA9PT0gXCJudW1iZXJcIiAmJiB3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDAgJiYgdGhpcy5hdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS5hdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBwcmVwYXJlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgdGhpcy5nZW5lcmF0ZSh1c2VySWQsIG9iai50ZXh0LCB0b2tlbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Fib3J0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWNoZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0ZXh0LCBjYWNoZV0gPSB0ZW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblNldC5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2Uuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZXMgPSB0ZW1wU3RhdGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZShzZXF1ZW5jZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgdGhpcy5nZW5lcmF0ZSh1c2VySWQsIG9iai50ZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0ZXh0LCBjYWNoZV0gPSB0ZW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyB0eXBlOiBvYmoudHlwZSwgc3BlZWQ6IG9iai5zcGVlZCwgZHVyYXRpb246IG9iai5kdXJhdGlvbiwgdGV4dDogdGV4dCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaChzZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdlbmVyYXRlOiBhc3luYyBmdW5jdGlvbiAodXNlcklkLCBtZXNzYWdlLCBoaW50cyA9IFtdKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaG9pY2UocHJvYmFiaWxpdGllcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdW0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvYmFiaWxpdHkgb2YgcHJvYmFiaWxpdGllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VtIDw9IHIgJiYgciA8IHN1bSArIHByb2JhYmlsaXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IHByb2JhYmlsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNvZnRtYXgoeCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1heCA9IE51bWJlci5NSU5fVkFMVUU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1bSA9IDAuMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4W2ldID4gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggPSB4W2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IE1hdGguZXhwKHhbaV0gLSBtYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkucHVzaChNYXRoLmV4cCh4W2ldIC0gbWF4KSAvIHN1bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSA2MCAqIDYwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlZ21lbnRlciA9IG5ldyBUaW55U2VnbWVudGVyKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9rZW5zID0gQXJyYXkuaXNBcnJheShtZXNzYWdlKSA/IG1lc3NhZ2UgOiBzZWdtZW50ZXIuc2VnbWVudChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGxldCBoaW50RGljdGlvbmFyeSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgbGV0IHRva2VuU2V0ID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKFwiWy4jJFxcXFxbXFxcXF1dXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNhY2hEaWN0aW9uYXJ5ID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXBzaWxvbiA9IE1hdGgucG93KDEwLCAtNik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiZWFtV2lkdGggPSAxMDtcclxuICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZXMgPSBbeyBzZXF1ZW5jZTogW10sIHNjb3JlOiAxLjAgfV1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIGhpbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuIGluIHRoaXMud29yZERpY3Rpb25hcnkgPT09IGZhbHNlIHx8IHRpbWVzdGFtcCAtIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLnRpbWVzdGFtcCA+PSB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHRva2VuKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXSA9IHsgYXR0cmlidXRlczogW10sIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgPT09IFwibnVtYmVyXCIgJiYgd29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPiAwICYmIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIGhpbnREaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50RGljdGlvbmFyeVthdHRyaWJ1dGVdLnB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGludERpY3Rpb25hcnlbYXR0cmlidXRlXSA9IFt0b2tlbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuU2V0LmluY2x1ZGVzKHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXJtcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjb3JlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSBpbiBoaW50RGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgaGludERpY3Rpb25hcnlbYXR0cmlidXRlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtcy5pbmNsdWRlcyhzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc05ldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1zLnB1c2gocyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGFnIG9mIHRoaXMudGFncykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocyA9PT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSBpbiB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzXCIpLm9yZGVyQnlDaGlsZChgYXR0cmlidXRlcy8ke2F0dHJpYnV0ZX1gKS5saW1pdFRvTGFzdCgxMDApLnN0YXJ0QXQoMSkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0gPSB7IHdvcmRzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgaW4gd29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcy5wdXNoKHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0ud29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnMuaW5jbHVkZXMod29yZCkgJiYgIXRlcm1zLmluY2x1ZGVzKHdvcmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMucHVzaCh3b3JkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JkID09IHRhZy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXMucHVzaCh0YWcuc2NvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKGVwc2lsb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybXMubGVuZ3RoID4gMCAmJiBzY29yZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JhYmlsaXRpZXMgPSBzb2Z0bWF4KHNjb3Jlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhbmRpZGF0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwcm9iYWJpbGl0aWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2UgPSBbXS5jb25jYXQoc2VxdWVuY2VzW2ldLnNlcXVlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgaW5kZXg6IGluZGV4LCB0ZXJtOiB0ZXJtc1tqXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7IHNlcXVlbmNlOiBzZXF1ZW5jZSwgc2NvcmU6IHNlcXVlbmNlc1tpXS5zY29yZSAqIHByb2JhYmlsaXRpZXNbal0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIHRoaXMudGFrZShjYW5kaWRhdGVzLnNvcnQoKHgsIHkpID0+IHkuc2NvcmUgLSB4LnNjb3JlKSwgYmVhbVdpZHRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZXMucHVzaChjYW5kaWRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghcmVnZXgudGVzdCh0b2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXJtcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjb3JlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiBpbiB0aGlzLndvcmREaWN0aW9uYXJ5ID09PSBmYWxzZSB8fCB0aW1lc3RhbXAgLSB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHRva2VuKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dID0geyBhdHRyaWJ1dGVzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAod29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pID09PSBcIm51bWJlclwiICYmIHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdID4gMCAmJiB0aGlzLmF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIGhpbnREaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGhpbnREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc05ldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1zLnB1c2goa2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHRhZy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXMucHVzaCh0YWcuc2NvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKGVwc2lsb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgaW4gdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnkgPT09IGZhbHNlIHx8IHRpbWVzdGFtcCAtIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkc1wiKS5vcmRlckJ5Q2hpbGQoYGF0dHJpYnV0ZXMvJHthdHRyaWJ1dGV9YCkubGltaXRUb0xhc3QoMTAwKS5zdGFydEF0KDEpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVthdHRyaWJ1dGVdID0geyB3b3JkczogW10sIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHdvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0ud29yZHMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0ud29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnMuaW5jbHVkZXMod29yZCkgJiYgIXRlcm1zLmluY2x1ZGVzKHdvcmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMucHVzaCh3b3JkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JkID09IHRhZy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXMucHVzaCh0YWcuc2NvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKGVwc2lsb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybXMubGVuZ3RoID4gMCAmJiBzY29yZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JhYmlsaXRpZXMgPSBzb2Z0bWF4KHNjb3Jlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhbmRpZGF0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwcm9iYWJpbGl0aWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2UgPSBbXS5jb25jYXQoc2VxdWVuY2VzW2ldLnNlcXVlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgaW5kZXg6IGluZGV4LCB0ZXJtOiB0ZXJtc1tqXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7IHNlcXVlbmNlOiBzZXF1ZW5jZSwgc2NvcmU6IHNlcXVlbmNlc1tpXS5zY29yZSAqIHByb2JhYmlsaXRpZXNbal0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIHRoaXMudGFrZShjYW5kaWRhdGVzLnNvcnQoKHgsIHkpID0+IHkuc2NvcmUgLSB4LnNjb3JlKSwgYmVhbVdpZHRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZXMucHVzaChjYW5kaWRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TZXQucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBzZXF1ZW5jZXNbY2hvaWNlKHNvZnRtYXgoc2VxdWVuY2VzLm1hcCh4ID0+IHguc2NvcmUpKSldO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vuc1tpXSBpbiBjYWNoRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhY2hEaWN0aW9uYXJ5W3Rva2Vuc1tpXV0gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdG9rZW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBjYWNoRGljdGlvbmFyeVt0b2tlbnNbaV1dXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzLnNlcXVlbmNlLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5zZXF1ZW5jZVtqXS5pbmRleCA9PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vuc1tpXSA9PSBzLnNlcXVlbmNlW2pdLnRlcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaERpY3Rpb25hcnlbdG9rZW5zW2ldXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoRGljdGlvbmFyeVt0b2tlbnNbaV1dID0gcy5zZXF1ZW5jZVtqXS50ZXJtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHMuc2VxdWVuY2Vbal0udGVybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2Vuc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHRva2Vuc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RleHQsIGNhY2hEaWN0aW9uYXJ5XTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbiAoZGF0YSwgZHVyYXRpb24gPSAzMDAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhW1wiaWRcIl0gPSB3aW5kb3cuc2V0VGltZW91dCgoZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZi5ub3RpZmljYXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm5vdGlmaWNhdGlvbnNbaV0uaWQgPT09IGQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZpY2F0aW9ucy5zcGxpY2UoaSwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBkdXJhdGlvbiwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnVuc2hpZnQoZGF0YSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJsaW5kZWQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZEltYWdlc1F1ZXVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IFtdLmNvbmNhdChhcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrID0gX3JhbmRvbSgwLCBuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtuXSA9IGFba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2tdID0gdGVtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHNodWZmbGUodGhpcy5yZWNlbnRJbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlc1F1ZXVlLnB1c2goaW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuYmFja2dyb3VuZEltYWdlc1F1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIGltYWdlLnBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnB1c2goeyBpZDogaW1hZ2UuaWQsIHVybDogYXdhaXQgc3RvcmFnZS5yZWYoKS5jaGlsZChwYXRoKS5nZXREb3dubG9hZFVSTCgpLCB0aW1lc3RhbXA6IGltYWdlLnRpbWVzdGFtcCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJ0YWdzXCIgaW4gaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy51c2VyLnVpZCwgaW1hZ2UudGFncy5maWx0ZXIoKHgpID0+IHggIT09IHRoaXMuY2hhcmFjdGVyLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzQ29tcGxldGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbWFnZSBvZiB0aGlzLnByZWxvYWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2UudXJsID09IHVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVtcImlzTG9hZGVkXCJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoXCJpc0xvYWRlZFwiIGluIGltYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGltYWdlIG9mIHRoaXMucHJlbG9hZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2UuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGltYWdlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaW1hZ2UudXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogaW1hZ2UudGltZXN0YW1wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMuc3BsaWNlKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNCbGluZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNDb21wbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGltYWdlIG9mIHRoaXMucHJlbG9hZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS51cmwgPT0gdXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlW1wiaXNMb2FkZWRcIl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShcImlzTG9hZGVkXCIgaW4gaW1hZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgdGhpcy5wcmVsb2FkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS5pc0xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaW1hZ2UuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWFnZS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBpbWFnZS50aW1lc3RhbXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZEltYWdlcy5zcGxpY2UoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0JsaW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hha2U6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFuaW1hdGUoW1xyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCg4cHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtOHB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoN3B4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLTdweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDZweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKC02cHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCg1cHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtNXB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoNHB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLTRweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDNweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKC0zcHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgycHgsIDAsIDApXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgtMnB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMXB4LCAwLCAwKVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoLTFweCwgMCwgMClcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCIgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBkdXJhdGlvbjogMTAwMCwgaXRlcmF0aW9uczogMSB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2Nyb2xsVG9Ub3AoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY3JvbGxUb0VuZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNjcm9sbFRpbWVvdXRJRCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNjcm9sbFRpbWVvdXRJRCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9ybWF0RGF0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBtb21lbnQubG9jYWxlKHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoZXZlbnQpLmZvcm1hdChcIkxUXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRpb25TdGFydDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0aW9uRW5kOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmaWNhdGlvbkhlaWdodCA9IHNlbGYuJHJlZnMubm90aWZpY2F0aW9ucy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sZWFkZXJib2FyZEhlaWdodCA9IHNlbGYuJHJlZnMubGVhZGVyYm9hcmQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGlja2VyVXBkYXRlZDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjbGlwIG9mIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAuY2xpcFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByYW5nZTogZnVuY3Rpb24gKGRhdGUsIGRheXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRheSBvZiBkYXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKG5ldyBEYXRlKG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpLmdldFRpbWUoKSArIGRheSAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXJyYW5nZTogZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcm93cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCA8IGxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBbaXRlbV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJvd3MucHVzaChjb2x1bW5zKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93cztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFrZTogZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5sZW5ndGggPiBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gW10uY29uY2F0KGNvbGxlY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLnNwbGljZShjb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChjb2xsZWN0aW9uKS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZvcm1hdFRpbWU6IGZ1bmN0aW9uICh0aW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gTWF0aC5mbG9vcih0aW1lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKHQgLyA4NjQwMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodCAvIDM2MDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodCAvIDYwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlY29uZHMgPSB0ICUgNjA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRheXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBcImRcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWludXRlcyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaG91cnMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBob3VycyArIFwiaFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pbnV0ZXMgKyBcIm1cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Vjb25kcyArIFwic1wiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaWdlc3RNZXNzYWdlOiBhc3luYyBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnVWludDggPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUobWVzc2FnZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5jb2RlIGFzICh1dGYtOCkgVWludDhBcnJheVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiLCBtc2dVaW50OCk7ICAgICAgICAgICAvLyBoYXNoIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTsgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGJ1ZmZlciB0byBieXRlIGFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTsgLy8gY29udmVydCBieXRlcyB0byBoZXggc3RyaW5nXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc2hIZXg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldERpc3RhbmNlOiBmdW5jdGlvbiAobGF0MSwgbG9uMSwgbGF0MiwgbG9uMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIFIgPSA2MzcxOyAvLyBSYWRpdXMgb2YgdGhlIGVhcnRoIGluIGttXHJcbiAgICAgICAgICAgICAgICB2YXIgZExhdCA9IHRoaXMuZGVnMnJhZChsYXQyIC0gbGF0MSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZExvbiA9IHRoaXMuZGVnMnJhZChsb24yIC0gbG9uMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYSA9XHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oZExhdCAvIDIpICogTWF0aC5zaW4oZExhdCAvIDIpICtcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyh0aGlzLmRlZzJyYWQobGF0MSkpICogTWF0aC5jb3ModGhpcy5kZWcycmFkKGxhdDIpKSAqXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oZExvbiAvIDIpICogTWF0aC5zaW4oZExvbiAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxIC0gYSkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBSICogYzsgLy8gRGlzdGFuY2UgaW4ga21cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVnMnJhZDogZnVuY3Rpb24gKGRlZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZyAqIChNYXRoLlBJIC8gMTgwKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmNvZGVHZW9oYXNoOiBmdW5jdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSwgcHJlY2lzaW9uID0gMTIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJJVFMgPSBbMTYsIDgsIDQsIDIsIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQkFTRTMyID0gXCIwMTIzNDU2Nzg5YmNkZWZnaGprbW5wcXJzdHV2d3h5elwiO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzX2V2ZW4gPSAxO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2ggPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGdlb2hhc2ggPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGxhdFswXSA9IC05MC4wOyBsYXRbMV0gPSA5MC4wO1xyXG4gICAgICAgICAgICAgICAgbG9uWzBdID0gLTE4MC4wOyBsb25bMV0gPSAxODAuMDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2VvaGFzaC5sZW5ndGggPCBwcmVjaXNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZXZlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWQgPSAobG9uWzBdICsgbG9uWzFdKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9uZ2l0dWRlID4gbWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaCB8PSBCSVRTW2JpdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25bMF0gPSBtaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uWzFdID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pZCA9IChsYXRbMF0gKyBsYXRbMV0pIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRpdHVkZSA+IG1pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ggfD0gQklUU1tiaXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0WzBdID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdFsxXSA9IG1pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlzX2V2ZW4gPSAhaXNfZXZlbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdCA8IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYml0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvaGFzaCArPSBCQVNFMzJbY2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBnZW9oYXNoO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWNvZGVHZW9oYXNoOiBmdW5jdGlvbiAoZ2VvaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQklUUyA9IFsxNiwgOCwgNCwgMiwgMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCQVNFMzIgPSBcIjAxMjM0NTY3ODliY2RlZmdoamttbnBxcnN0dXZ3eHl6XCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNfZXZlbiA9IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0ID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0X2VyciA9IDkwLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uX2VyciA9IDE4MC4wO1xyXG5cclxuICAgICAgICAgICAgICAgIGxhdFswXSA9IC05MC4wO1xyXG4gICAgICAgICAgICAgICAgbGF0WzFdID0gOTAuMDtcclxuICAgICAgICAgICAgICAgIGxvblswXSA9IC0xODAuMDtcclxuICAgICAgICAgICAgICAgIGxvblsxXSA9IDE4MC4wO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvaGFzaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gZ2VvaGFzaFtpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2QgPSBCQVNFMzIuaW5kZXhPZihjKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA1OyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFzayA9IEJJVFNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZXZlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uX2VyciAvPSAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZCAmIG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25bMF0gPSAobG9uWzBdICsgbG9uWzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvblsxXSA9IChsb25bMF0gKyBsb25bMV0pIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdF9lcnIgLz0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2QgJiBtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0WzBdID0gKGxhdFswXSArIGxhdFsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRbMV0gPSAobGF0WzBdICsgbGF0WzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzX2V2ZW4gPSAhaXNfZXZlbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGF0WzJdID0gKGxhdFswXSArIGxhdFsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgbG9uWzJdID0gKGxvblswXSArIGxvblsxXSkgLyAyO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxhdFsyXSxcclxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvblsyXSxcclxuICAgICAgICAgICAgICAgICAgICB0b3BsZWZ0OiB7IGxhdGl0dWRlOiBsYXRbMF0sIGxvbmdpdHVkZTogbG9uWzBdIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wcmlnaHQ6IHsgbGF0aXR1ZGU6IGxhdFsxXSwgbG9uZ2l0dWRlOiBsb25bMF0gfSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21yaWdodDogeyBsYXRpdHVkZTogbGF0WzFdLCBsb25naXR1ZGU6IGxvblsxXSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbWxlZnQ6IHsgbGF0aXR1ZGU6IGxhdFswXSwgbG9uZ2l0dWRlOiBsb25bMV0gfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0TmVpZ2hib3JzOiBmdW5jdGlvbiAoZ2VvaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRHZW9oYXNoID0gdGhpcy5jYWxjdWxhdGVBZGphY2VudChnZW9oYXNoLCAncmlnaHQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRHZW9oYXNoID0gdGhpcy5jYWxjdWxhdGVBZGphY2VudChnZW9oYXNoLCAnbGVmdCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGdlb2hhc2gsICd0b3AnKSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQoZ2VvaGFzaCwgJ2JvdHRvbScpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiByaWdodEdlb2hhc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdEdlb2hhc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wbGVmdDogdGhpcy5jYWxjdWxhdGVBZGphY2VudChsZWZ0R2VvaGFzaCwgJ3RvcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcHJpZ2h0OiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KHJpZ2h0R2VvaGFzaCwgJ3RvcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbXJpZ2h0OiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KHJpZ2h0R2VvaGFzaCwgJ2JvdHRvbScpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbWxlZnQ6IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQobGVmdEdlb2hhc2gsICdib3R0b20nKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FsY3VsYXRlQWRqYWNlbnQ6IGZ1bmN0aW9uIChzcmNIYXNoLCBkaXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJBU0UzMiA9IFwiMDEyMzQ1Njc4OWJjZGVmZ2hqa21ucHFyc3R1dnd4eXpcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IE5FSUdIQk9SUyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogeyBldmVuOiBcImJjMDFmZzQ1MjM4OTY3ZGV1dmhqeXpucGttc3Rxcnd4XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB7IGV2ZW46IFwiMjM4OTY3ZGViYzAxZmc0NWttc3Rxcnd4dXZoanl6bnBcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeyBldmVuOiBcInAwcjIxNDM2eDh6YjlkY2Y1aDdram5tcWVzZ3V0d3Z5XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHsgZXZlbjogXCIxNDM2NWg3azlkY2Zlc2d1am5tcXAwcjJ0d3Z5eDh6YlwiIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCT1JERVJTID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB7IGV2ZW46IFwiYmNmZ3V2eXpcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHsgZXZlbjogXCIwMTQ1aGpucFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB7IGV2ZW46IFwicHJ4elwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiB7IGV2ZW46IFwiMDI4YlwiIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgTkVJR0hCT1JTLmJvdHRvbS5vZGQgPSBORUlHSEJPUlMubGVmdC5ldmVuO1xyXG4gICAgICAgICAgICAgICAgTkVJR0hCT1JTLnRvcC5vZGQgPSBORUlHSEJPUlMucmlnaHQuZXZlbjtcclxuICAgICAgICAgICAgICAgIE5FSUdIQk9SUy5sZWZ0Lm9kZCA9IE5FSUdIQk9SUy5ib3R0b20uZXZlbjtcclxuICAgICAgICAgICAgICAgIE5FSUdIQk9SUy5yaWdodC5vZGQgPSBORUlHSEJPUlMudG9wLmV2ZW47XHJcblxyXG4gICAgICAgICAgICAgICAgQk9SREVSUy5ib3R0b20ub2RkID0gQk9SREVSUy5sZWZ0LmV2ZW47XHJcbiAgICAgICAgICAgICAgICBCT1JERVJTLnRvcC5vZGQgPSBCT1JERVJTLnJpZ2h0LmV2ZW47XHJcbiAgICAgICAgICAgICAgICBCT1JERVJTLmxlZnQub2RkID0gQk9SREVSUy5ib3R0b20uZXZlbjtcclxuICAgICAgICAgICAgICAgIEJPUkRFUlMucmlnaHQub2RkID0gQk9SREVSUy50b3AuZXZlbjtcclxuXHJcbiAgICAgICAgICAgICAgICBzcmNIYXNoID0gc3JjSGFzaC50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsYXN0Q2hyID0gc3JjSGFzaC5jaGFyQXQoc3JjSGFzaC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gKHNyY0hhc2gubGVuZ3RoICUgMikgPyAnb2RkJyA6ICdldmVuJztcclxuICAgICAgICAgICAgICAgIHZhciBiYXNlID0gc3JjSGFzaC5zdWJzdHJpbmcoMCwgc3JjSGFzaC5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQk9SREVSU1tkaXJdW3R5cGVdLmluZGV4T2YobGFzdENocikgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlID0gdGhpcy5jYWxjdWxhdGVBZGphY2VudChiYXNlLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlICsgQkFTRTMyW05FSUdIQk9SU1tkaXJdW3R5cGVdLmluZGV4T2YobGFzdENocildO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcmVwYXJlOiBmdW5jdGlvbiAoc2VxdWVuY2VzLCBzdGF0ZSA9IG51bGwsIHNlbGVjdGVkU2VxdWVuY2VzID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hvb3NlZFNlcXVlbmNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZsYXR0ZW5lZFNlcXVlbmNlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBTdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IG51bGwgJiYgcy5uYW1lIGluIHRoaXMuc3RhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdGF0ZSA9IHRoaXMuc3RhdGVzW3MubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFN0YXRlICE9PSBudWxsICYmIFwic3RhdGVcIiBpbiBzICYmIHMuc3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzLnN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KHRlbXBTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob29zZWRTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hvb3NlZFNlcXVlbmNlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0YXRlXCIgaW4gcyA9PT0gZmFsc2UgfHwgcy5zdGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3NlZFNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNob29zZWRTZXF1ZW5jZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWV1ZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgY2hvb3NlZFNlcXVlbmNlc1tfcmFuZG9tKDAsIGNob29zZWRTZXF1ZW5jZXMubGVuZ3RoKV0uc2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlc1tzLm5hbWVdID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2gocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSBxdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09IFwiU2VxdWVuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic2VxdWVuY2VcIiBpbiBvYmogPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyYWNlZFNlcXVlbmNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWxsYWJsZVNlcXVlbmNlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2VsZWN0ZWRTZXF1ZW5jZXMgPT09IG51bGwgPyB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMgOiBzZWxlY3RlZFNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2VTdGFjayA9IHRoaXMuZ2V0U2VxdWVuY2VTdGFjayhzLCBvYmopO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3BwZWRTZXF1ZW5jZSA9IHNlcXVlbmNlU3RhY2sucG9wKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZVN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBTdGFjayA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIHNlcXVlbmNlU3RhY2tbc2VxdWVuY2VTdGFjay5sZW5ndGggLSAxXS5zZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcIlNlcXVlbmNlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXF1ZW5jZVwiIGluIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGVtcFNlcXVlbmNlIG9mIHN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFNlcXVlbmNlID09PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YWNrLnB1c2gobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID09PSBwb3BwZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ZW1wU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0ZW1wU3RhY2sucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXF1ZW5jZVwiIGluIHBvcHBlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc05ldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRlbXBTZXF1ZW5jZSBvZiBzdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBTZXF1ZW5jZSA9PT0gcG9wcGVkU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHBvcHBlZFNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHNlcXVlbmNlU3RhY2subGVuZ3RoID4gMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjZWRTZXF1ZW5jZXMucHVzaChzdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjZWRTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RhdGVcIiBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZXNbb2JqLm5hbWVdID0gb2JqLnN0YXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHRyYWNlZFNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PSBvYmoubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAocy5zdGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChvYmouc3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiB0cmFjZWRTZXF1ZW5jZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLm5hbWUgPT0gb2JqLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdGF0ZVwiIGluIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSBpbiB0aGlzLnN0YXRlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHMuc3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KHRoaXMuc3RhdGVzW3MubmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVTZXF1ZW5jZXMucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxhYmxlU2VxdWVuY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBjYWxsYWJsZVNlcXVlbmNlc1tfcmFuZG9tKDAsIGNhbGxhYmxlU2VxdWVuY2VzLmxlbmd0aCldLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5zcGxpY2UoaW5kZXgsIDAsIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5lZFNlcXVlbmNlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlbmVkU2VxdWVuY2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFNlcXVlbmNlU3RhY2s6IGZ1bmN0aW9uIChzb3VyY2VTZXF1ZW5jZSwgdGFyZ2V0U2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZVN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wdXNoKHNvdXJjZVNlcXVlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2VTdGFja1tzZXF1ZW5jZVN0YWNrLmxlbmd0aCAtIDFdICE9PSB0YXJnZXRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcInNlcXVlbmNlXCIgaW4gc291cmNlU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIHNvdXJjZVNlcXVlbmNlLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFwiU2VxdWVuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFjayA9IHRoaXMuZ2V0U2VxdWVuY2VTdGFjayhvLCB0YXJnZXRTZXF1ZW5jZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwICYmIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdID09PSB0YXJnZXRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RhY2sucHVzaChzdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wdXNoKHRlbXBTdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRlbXBTdGFjay5sZW5ndGggPiAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZVN0YWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VxdWVuY2VTdGFjaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYW5pbWF0ZTogYXN5bmMgZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhVGltZSA9ICh0aW1lc3RhbXAgLSB0aGlzLmVsYXBzZWQpIC8gMTAwMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGFwc2VkID0gdGltZXN0YW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZVF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWUgKz0gZGVsdGFUaW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVUaW1lICs9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VxdWVuY2VRdWV1ZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2YXRlVGltZSA+PSBhY3RpdmF0ZVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlZERvY3VtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50UXVldWUubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBbXS5jb25jYXQoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gYXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IF9yYW5kb20oMCwgbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYVtuXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbbl0gPSBhW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2tdID0gdGVtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2Ygc2h1ZmZsZSh0aGlzLmNhY2hlZERvY3VtZW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UXVldWUucHVzaChkb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb2N1bWVudFF1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy51c2VyLnVpZCwgZG9jdW1lbnQuZmlsdGVyKCh4KSA9PiB4ICE9PSB0aGlzLmNoYXJhY3Rlci5uYW1lKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZSA9IGFjdGl2YXRlVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWRsZVRpbWUgPj0gYmxpbmtUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaCh0aGlzLnByZXBhcmUodGhpcy5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIklkbGVcIikpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTG9ja2VkICYmIHRoaXMuc2VxdWVuY2VRdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlID0gdGhpcy5zZXF1ZW5jZVF1ZXVlWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZVswXS50eXBlID09IFwiQW5pbWF0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJmcmFtZXNcIiBpbiBzZXF1ZW5jZVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBzZXF1ZW5jZVswXS5mcmFtZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJjaGFyYWN0ZXJcIiBpbiBzZXF1ZW5jZVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlLnB1c2goeyBjaGFyYWN0ZXI6IHNlcXVlbmNlWzBdLmNoYXJhY3RlciwgaW1hZ2VzOiBvYmogfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25RdWV1ZS5wdXNoKHsgY2hhcmFjdGVyOiB0aGlzLmNoYXJhY3RlciwgaW1hZ2VzOiBvYmogfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKG9iaikgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpdGVyYXRpb25zXCIgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImltYWdlc1wiIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IFwiY2hhcmFjdGVyXCIgaW4gc2VxdWVuY2VbMF0gPyBzZXF1ZW5jZVswXS5jaGFyYWN0ZXIgOiB0aGlzLmNoYXJhY3RlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5pdGVyYXRpb25zOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlLnB1c2goeyBjaGFyYWN0ZXI6IGMsIGltYWdlczogb2JqLmltYWdlcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcInNwcml0ZXNcIiBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBcImNoYXJhY3RlclwiIGluIHNlcXVlbmNlWzBdID8gc2VxdWVuY2VbMF0uY2hhcmFjdGVyIDogdGhpcy5jaGFyYWN0ZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmouaXRlcmF0aW9uczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25RdWV1ZS5wdXNoKHsgY2hhcmFjdGVyOiBjLCBpbWFnZXM6IG9iai5zcHJpdGVzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZXF1ZW5jZVswXS50eXBlID09IFwiTWVzc2FnZVwiICYmIHRoaXMubWVzc2FnZSA9PT0gbnVsbCAmJiB0aGlzLmFuaW1hdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImNoYXJhY3RlclwiIGluIHNlcXVlbmNlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHsgdGltZTogMCwgZHVyYXRpb246IHNlcXVlbmNlWzBdLmR1cmF0aW9uLCB0eXBlOiB7IGVsYXBzZWQ6IC0xLCBzcGVlZDogc2VxdWVuY2VbMF0uc3BlZWQsIHJldmVyc2U6IGZhbHNlLCBidWZmZXI6IFwiXCIsIGNvdW50OiAwIH0sIGNoYXJhY3Rlcjogc2VxdWVuY2VbMF0uY2hhcmFjdGVyLCB0ZXh0OiBzZXF1ZW5jZVswXS50ZXh0IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0geyB0aW1lOiAwLCBkdXJhdGlvbjogc2VxdWVuY2VbMF0uZHVyYXRpb24sIHR5cGU6IHsgZWxhcHNlZDogLTEsIHNwZWVkOiBzZXF1ZW5jZVswXS5zcGVlZCwgcmV2ZXJzZTogZmFsc2UsIGJ1ZmZlcjogXCJcIiwgY291bnQ6IDAgfSwgY2hhcmFjdGVyOiB7IG5hbWU6IHRoaXMuY2hhcmFjdGVyLm5hbWUsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSwgdGV4dDogc2VxdWVuY2VbMF0udGV4dCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2Uuc2hpZnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZiAoIXRoaXMuaXNNdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5tZXNzYWdlLnRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZShhc3luYyByZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vYWkubWlsY2hjaGFuLmNvbS9hcGkvc3ludGhlc2l6ZT90ZXh0PVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRleHQpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiY29yc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChhd2FpdCByZXNwb25zZS5ibG9iKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZSAhPT0gbnVsbCAmJiB0ZXh0ID09PSB0aGlzLm1lc3NhZ2UudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIuY3VycmVudFRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5wbGF5ZXIucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1lc3NhZ2UgPT09IG51bGwgJiYgdGhpcy5hbmltYXRpb25RdWV1ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuY2FjaGVkSW1hZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuY2FjaGVkU3ByaXRlcy5zb21lKHggPT4geC5zb3VyY2UgPT09IGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuY2FjaGVkSW1hZ2VzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudHlwZS5jb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5lbGFwc2VkICs9IGRlbHRhVGltZSAqIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudHlwZS5lbGFwc2VkID49IDEuMCAvIHRoaXMubWVzc2FnZS50eXBlLnNwZWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMubWVzc2FnZS50eXBlLmNvdW50IC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gTWF0aC5mbG9vcih0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGggLyAyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCA8PSB3aWR0aCAmJiB0aGlzLm1lc3NhZ2UudHlwZS5jb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5jb3VudCAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlciA9IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5zdWJzdHJpbmcoMCwgdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5lbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQb3B1cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGggPCB0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudHlwZS5lbGFwc2VkID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5lbGFwc2VkICs9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNBbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1BvcHVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPSBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1BvcHVwID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPj0gMS4wIC8gdGhpcy5tZXNzYWdlLnR5cGUuc3BlZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IE1hdGguZmxvb3IodGhpcy5tZXNzYWdlLnRleHQubGVuZ3RoIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxlbmd0aCA9IHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmNvdW50ID49IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlciArPSB0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmNvdW50IDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5lbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50aW1lICs9IGRlbHRhVGltZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnRpbWUgPj0gdGhpcy5tZXNzYWdlLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUucmV2ZXJzZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGggPT09IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlcnMgPSB0aGlzLm1lc3NhZ2UudGV4dC5zcGxpdChcIlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcmFjdGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5wdXNoKHsga2V5OiBpLCB2YWx1ZTogY2hhcmFjdGVyc1tpXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFyQXJyYXkgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYW5kb21CdWZmZXIgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZXNzYWdlLnRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckFycmF5LmluZGV4T2YodGhpcy5tZXNzYWdlLnRleHQuY2hhckF0KGkpKSA9PSAtMSAmJiB0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkgIT0gXCJcXG5cIiAmJiB0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkubWF0Y2goL1xccy8pID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckFycmF5LnB1c2godGhpcy5tZXNzYWdlLnRleHQuY2hhckF0KGkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBcnJheS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc3NhZ2UudHlwZS5jb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkgPT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tQnVmZmVyICs9IFwiXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb21CdWZmZXIgKz0gY2hhckFycmF5W35+X3JhbmRvbSgwLCBjaGFyQXJyYXkubGVuZ3RoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmRvbUJ1ZmZlci5sZW5ndGggPiB0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVycyA9ICh0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIgKyByYW5kb21CdWZmZXIuc3Vic3RyaW5nKHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGgsIHJhbmRvbUJ1ZmZlci5sZW5ndGgpKS5zcGxpdChcIlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0LnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5wdXNoKHsga2V5OiBpLCB2YWx1ZTogY2hhcmFjdGVyc1tpXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGV4dC5sZW5ndGggIT09IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJhY3RlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0LnB1c2goeyBrZXk6IGksIHZhbHVlOiBjaGFyYWN0ZXJzW2ldIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uUXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvblF1ZXVlWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTG9ja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhIG9mIHRoaXMuYW5pbWF0aW9uUXVldWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvY2tlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhIG9mIGFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcml0ZSBvZiBhLmltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ByaXRlLnNvdXJjZSBpbiB0aGlzLmNhY2hlZEltYWdlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBhd2FpdCBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmVycm9yID0gKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNyYyA9IHNwcml0ZS5zb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkSW1hZ2VzW3Nwcml0ZS5zb3VyY2VdID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9ja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5jaGFyYWN0ZXIubmFtZSA9PT0gdGhpcy5jaGFyYWN0ZXIubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkU3ByaXRlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIHRoaXMucmVuZGVyKHRoaXMuJHJlZnMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQsIGFuaW1hdGlvbi5pbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkU3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlID0gdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHRlcm5hdGl2ZUNhY2hlZFNwcml0ZXMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcml0ZSBvZiB0aGlzLnJlbmRlcih0aGlzLiRyZWZzLmFsdGVybmF0aXZlLmdldENvbnRleHQoXCIyZFwiKSwgdGhpcy5hbHRlcm5hdGl2ZUNhbnZhc1dpZHRoLCB0aGlzLmFsdGVybmF0aXZlQ2FudmFzSGVpZ2h0LCBhbmltYXRpb24uaW1hZ2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlQ2FjaGVkU3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoY3R4LCB3aWR0aCwgaGVpZ2h0LCBhbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNwcml0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIGFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGUuc291cmNlIGluIHRoaXMuY2FjaGVkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIm9wYWNpdHlcIiBpbiBzcHJpdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHNwcml0ZS5vcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmNhY2hlZEltYWdlc1tzcHJpdGUuc291cmNlXSwgc3ByaXRlLnggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgc3ByaXRlLnkgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgc3ByaXRlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8sIHNwcml0ZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGVzLnB1c2goc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ByaXRlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXBkYXRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL2xldCBjb250YWluZXIgPSB0aGlzLiRyZWZzLmNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXRUb3AgPSB0aGlzLiRyZWZzLmluZGljYXRvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXRCb3R0b20gPSB0aGlzLiRyZWZzLmJsYW5rLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vdGhpcy4kcmVmcy50aWNrZXIuc3R5bGUud2lkdGggPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQgLmNvbHVtbnM+LmNvbHVtbiAuY29udHJvbDpudGgtbGFzdC1vZi10eXBlKDEpIC5sZXZlbDpudGgtbGFzdC1vZi10eXBlKDEpIGZvcm1cIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaGVhZGluZz4uY29sdW1ucz4uY29sdW1uPi5jb2x1bW5zOmZpcnN0LWNoaWxkPi5jb2x1bW4+LmNvbHVtbnM6bGFzdC1jaGlsZCAubGV2ZWw6Zmlyc3QtY2hpbGQgLmxldmVsLWl0ZW0gLmZpZWxkIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgLyp0aGlzLiRyZWZzLnRpY2tlci5zdHlsZS53aWR0aCA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNpbnB1dCAuY29sdW1ucz4uY29sdW1uIC5jb250cm9sOm50aC1sYXN0LW9mLXR5cGUoMSkgLmxldmVsOm50aC1sYXN0LW9mLXR5cGUoMSkgZm9ybVwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qZm9yIChjb25zdCBjbGlwIG9mIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAuY2xpcFwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgY2xpcC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyIC5pdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcC5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyXCIpLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW91bnRlZDogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaG9pY2UoY29sbGVjdGlvbiwgZnVuYykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3VtID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGNvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9iYWJpbGl0eSA9IGZ1bmMoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW0gPD0gciAmJiByIDwgc3VtICsgcHJvYmFiaWxpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gcHJvYmFiaWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbltpbmRleF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBjb25zdCBib3RTdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY2hhcmFjdGVyXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBjcmVkZW50aWFsU3RvcmFnZUl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNyZWRlbnRpYWxcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXRzU3RvcmFnZUl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInN0YXRzXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBmcmFnbWVudHNTdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZnJhZ21lbnRzXCIpO1xyXG4gICAgICAgICAgICBsZXQgY3JlZGVudGlhbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBmcmFnbWVudHM7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlcnMgPSBbeyBwYXRoOiBcIi9hc3NldHMvbWlsY2guanNvblwiLCBwcm9iYWJpbGl0eTogMS4wIH1dO1xyXG4gICAgICAgICAgICBjb25zdCBhbHRlcm5hdGl2ZXMgPSBbeyBwYXRoOiBcIi9hc3NldHMvbWVya3UuanNvblwiLCBwcm9iYWJpbGl0eTogMS4wIH1dO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJvdFN0b3JhZ2VJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdCA9IEpTT04ucGFyc2UoYm90U3RvcmFnZUl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm90ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNNdXRlZCA9IGJvdC5tdXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNoYXJhY3RlclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWxTdG9yYWdlSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsID0gSlNPTi5wYXJzZShjcmVkZW50aWFsU3RvcmFnZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXRzU3RvcmFnZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VEYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSA3ICogMjQgKiA2MCAqIDYwICogMTAwMDtcclxuXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF5IG9mIEpTT04ucGFyc2Uoc3RhdHNTdG9yYWdlSXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRheS5kYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldFRpbWUoKSA+IGJhc2VEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRzLnB1c2goeyBkYXRlOiBkYXRlLCBzdGVwczogZGF5LnN0ZXBzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwic3RhdHNcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmcmFnbWVudHNTdG9yYWdlSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudHMgPSBKU09OLnBhcnNlKGZyYWdtZW50c1N0b3JhZ2VJdGVtKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImZyYWdtZW50c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZyYWdtZW50cyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRyZWZzLmNvbnRhaW5lci5hZnRlcihzdGF0cy5kb21FbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXRUb3AgPSB0aGlzLiRyZWZzLmluZGljYXRvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXRCb3R0b20gPSB0aGlzLiRyZWZzLmJsYW5rLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWFwID0gbmV3IE1pY3Jvc29mdC5NYXBzLk1hcCh0aGlzLiRyZWZzLm1hcCwge1xyXG4gICAgICAgICAgICAgICAgbWFwVHlwZUlkOiBNaWNyb3NvZnQuTWFwcy5NYXBUeXBlSWQuY2FudmFzTGlnaHRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlSGlnaERwaTogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxID8gdHJ1ZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd0xvY2F0ZU1lQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNob3dNYXBUeXBlU2VsZWN0b3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd1pvb21CdXR0b25zOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNob3dTY2FsZWJhcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzdXBwb3J0ZWRNYXBUeXBlczogW01pY3Jvc29mdC5NYXBzLk1hcFR5cGVJZC5ncmF5c2NhbGUsIE1pY3Jvc29mdC5NYXBzLk1hcFR5cGVJZC5jYW52YXNMaWdodCwgTWljcm9zb2Z0Lk1hcHMuTWFwVHlwZUlkLmNhbnZhc0RhcmtdXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sYXllciA9IG5ldyBNaWNyb3NvZnQuTWFwcy5MYXllcigpO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5sYXllcnMuaW5zZXJ0KHRoaXMubGF5ZXIpO1xyXG5cclxuICAgICAgICAgICAgTWljcm9zb2Z0Lk1hcHMuRXZlbnRzLmFkZEhhbmRsZXIodGhpcy5tYXAsICd2aWV3Y2hhbmdlZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudXNlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlMSA9IGF3YWl0IGZldGNoKGNob2ljZShjaGFyYWN0ZXJzLCAoeCkgPT4geC5wcm9iYWJpbGl0eSkucGF0aCwge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiY29yc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UxLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gYXdhaXQgcmVzcG9uc2UxLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXF1ZW5jZSA9IHRoaXMucHJlcGFyZShjaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlN0YXJ0XCIpLCBudWxsLCBjaGFyYWN0ZXIuc2VxdWVuY2VzKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlMiA9IGF3YWl0IGZldGNoKGNob2ljZShhbHRlcm5hdGl2ZXMsICh4KSA9PiB4LnByb2JhYmlsaXR5KS5wYXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiY29yc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbHRlcm5hdGl2ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlMi5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZSA9IGF3YWl0IHJlc3BvbnNlMi5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlMi5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlMyA9IGF3YWl0IGZldGNoKFwiL2Fzc2V0cy9mcmFnbWVudHMuanNvblwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiY29yc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UzLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gMjQgKiA2MCAqIDYwICogMTAwMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgYXdhaXQgcmVzcG9uc2UzLmpzb24oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2V0IG9mIGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZnJhZ21lbnRzLmZpbmQoeCA9PiBzZXQuc29tZSh5ID0+IHguc2V0LmluY2x1ZGVzKHkpKSAmJiB4LmNvdW50ID4gMCAmJiB4LnRpbWVzdGFtcCAqIDEwMDAgPiBiYXNlVGltZSAmJiB4LmNoZWNrc3VtID09PSBbLi4uU3RyaW5nKHgudGltZXN0YW1wKV0ucmVkdWNlKCh4LCB5KSA9PiB4ICsgeSwgMCkgKyBbLi4uU3RyaW5nKHguY291bnQpXS5yZWR1Y2UoKHgsIHkpID0+IHggKyB5LCAwKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcucHVzaCh7IHNldDogc2V0LCBpbmRleDogMCwgY291bnQ6IDAsIHRpbWVzdGFtcDogdGltZXN0YW1wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcucHVzaCh7IHNldDogc2V0LCBpbmRleDogMCwgY291bnQ6IHJlc3VsdC5jb3VudCwgdGltZXN0YW1wOiByZXN1bHQudGltZXN0YW1wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJzLnB1c2goZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UzLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLndpZHRoID0gY2hhcmFjdGVyLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5oZWlnaHQgPSBjaGFyYWN0ZXIuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5kZXZpY2VXaWR0aCA9IGNoYXJhY3Rlci53aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5kZXZpY2VIZWlnaHQgPSBjaGFyYWN0ZXIuaGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmFsdGVybmF0aXZlLndpZHRoID0gYWx0ZXJuYXRpdmUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmFsdGVybmF0aXZlLmhlaWdodCA9IGFsdGVybmF0aXZlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuZGV2aWNlV2lkdGggPSBhbHRlcm5hdGl2ZS53aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS5kZXZpY2VIZWlnaHQgPSBhbHRlcm5hdGl2ZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygc2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09IFwiQW5pbWF0aW9uXCIgJiYgXCJmcmFtZXNcIiBpbiBvYmogJiYgb2JqLmZyYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmouZnJhbWVzWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcyA9IG9iai5mcmFtZXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAob2JqLmZyYW1lc1swXSkgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpdGVyYXRpb25zXCIgaW4gb2JqLmZyYW1lc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbWFnZXNcIiBpbiBvYmouZnJhbWVzWzBdICYmIG9iai5mcmFtZXNbMF0uaW1hZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcyA9IG9iai5mcmFtZXNbMF0uaW1hZ2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwic3ByaXRlc1wiIGluIG9iai5mcmFtZXNbMF0gJiYgb2JqLmZyYW1lc1swXS5zcHJpdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcyA9IG9iai5mcmFtZXNbMF0uc3ByaXRlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpdGUgb2YgaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGUuc291cmNlIGluIHRoaXMuY2FjaGVkSW1hZ2VzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3JjID0gc3ByaXRlLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRJbWFnZXNbc3ByaXRlLnNvdXJjZV0gPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFNwcml0ZXMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcml0ZSBvZiB0aGlzLnJlbmRlcih0aGlzLiRyZWZzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksIHRoaXMuY2FudmFzV2lkdGgsIHRoaXMuY2FudmFzSGVpZ2h0LCBpbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkU3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3RlciA9IGNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3RlcltcImFsdGVybmF0aXZlXCJdID0gYWx0ZXJuYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UxLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlID0gXCJzaWduLWluXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmV2ZWFsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWwucHJvdmlkZXJJZCA9PT0gZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChjcmVkZW50aWFsLmlkVG9rZW4pKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3JlZGVudGlhbC5wcm92aWRlcklkID09PSBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChjcmVkZW50aWFsLmFjY2Vzc1Rva2VuKSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyZWRlbnRpYWwucHJvdmlkZXJJZCA9PT0gZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGZpcmViYXNlLmF1dGguVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsKGNyZWRlbnRpYWwuYWNjZXNzVG9rZW4sIGNyZWRlbnRpYWwuc2VjcmV0KSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZSA9IFwic2lnbi1pblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZXZlYWxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qZmlyZWJhc2UuYXV0aCgpLnNpZ25JbkFub255bW91c2x5KCkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIGlzIHNpZ25lZCBpbi5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3dEYXRlID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51c2VyID0gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRheSBvZiBzZWxmLnN0YXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXkuZGF0ZS5nZXRGdWxsWWVhcigpID09PSBub3dEYXRlLmdldEZ1bGxZZWFyKCkgJiYgZGF5LmRhdGUuZ2V0TW9udGgoKSA9PT0gbm93RGF0ZS5nZXRNb250aCgpICYmIGRheS5kYXRlLmdldERhdGUoKSA9PT0gbm93RGF0ZS5nZXREYXRlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RlcHMgPSBkYXkuc3RlcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXIudWlkICsgXCIvZGljdGlvbmFyeS9jb3VudFwiKS5vbihcInZhbHVlXCIsIHNuYXBzaG90ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFycyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJzID0gY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzXCIpLm9yZGVyQnlDaGlsZChcInRpbWVzdGFtcFwiKS5saW1pdFRvTGFzdCgxMCkub24oXCJ2YWx1ZVwiLCBzbmFwc2hvdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBzbmFwc2hvdC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBXb3JkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB3b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzW2tleV1bXCJpZFwiXSA9IGtleTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdvcmRzLnB1c2god29yZHNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIHRlbXBXb3Jkcy5zb3J0KCh4LCB5KSA9PiB5LnRpbWVzdGFtcCAtIHgudGltZXN0YW1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVJbmRleCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGYucmVjZW50V29yZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucmVjZW50V29yZHNbaV0ubmFtZSA9PSB3b3JkLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUluZGV4ID0gaTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRXb3Jkcy5zcGxpY2UocmVtb3ZlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRXb3Jkcy5zcGxpY2UoaW5kZXgsIDAsIHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHNlbGYucmVjZW50V29yZHMubGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRXb3Jkcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi51c2VyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBpcyBzaWduZWQgb3V0LlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHNlbGYudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L2NvdW50XCIpLm9mZihcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi90cmFja3NcIikub2ZmKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXNlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFycyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9kYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvd29yZHNcIikub3JkZXJCeUNoaWxkKFwidGltZXN0YW1wXCIpLmxpbWl0VG9MYXN0KDEwMCkub24oXCJ2YWx1ZVwiLCBzbmFwc2hvdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgLypsZXQgaXNVcGRhdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnJlY2VudEltYWdlcy5zb21lKHggPT4geC5pZCA9PT0ga2V5ICYmIHgudGltZXN0YW1wID09PSBpbWFnZXNba2V5XS50aW1lc3RhbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGlzVXBkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVjZW50SW1hZ2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlc1trZXldW1wiaWRcIl0gPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjZW50SW1hZ2VzLnB1c2goaW1hZ2VzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoc2VsZi5yZWNlbnRJbWFnZXMsIHNlbGYubWF4VGFncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0JsaW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgICAgICAvL30pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVubW91bnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMudGlja0ludGVydmFsSUQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aWNrSW50ZXJ2YWxJRCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2cm1Nb2RlbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2NlbmUucmVtb3ZlKHZybU1vZGVsLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIHZybU1vZGVsID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pLm1vdW50KFwiI2FwcFwiKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgYXBwLmluc2V0VG9wID0gYXBwLiRyZWZzLmluZGljYXRvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgYXBwLmluc2V0Qm90dG9tID0gYXBwLiRyZWZzLmJsYW5rLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS53aWR0aCA9IGFwcC5jaGFyYWN0ZXIud2lkdGg7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuaGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5oZWlnaHQ7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuZGV2aWNlV2lkdGggPSBhcHAuY2hhcmFjdGVyLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuZGV2aWNlSGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS53aWR0aCA9IGFwcC5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUud2lkdGg7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuaGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5oZWlnaHQ7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuZGV2aWNlV2lkdGggPSBhcHAuY2hhcmFjdGVyLmFsdGVybmF0aXZlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuZGV2aWNlSGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICBhcHAuYW5pbWF0aW9uUXVldWUudW5zaGlmdCh7IGNoYXJhY3RlcjogYXBwLmNoYXJhY3RlciwgaW1hZ2VzOiBbXS5jb25jYXQoYXBwLmNhY2hlZFNwcml0ZXMpIH0pO1xyXG5cclxuICAgICAgICBpZiAoYXBwLmFsdGVybmF0aXZlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFwcC5hbmltYXRpb25RdWV1ZS51bnNoaWZ0KHsgY2hhcmFjdGVyOiBhcHAuY2hhcmFjdGVyLmFsdGVybmF0aXZlLCBpbWFnZXM6IFtdLmNvbmNhdChhcHAuYWx0ZXJuYXRpdmVDYWNoZWRTcHJpdGVzKSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLypcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBPYmplY3Qua2V5cyhhcHAuY2FjaGVkSW1hZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIGFwcC5jYWNoZWRJbWFnZXNba2V5XTtcclxuICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAvL2FwcC4kcmVmcy50aWNrZXIuc3R5bGUud2lkdGggPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQgLmNvbHVtbnM+LmNvbHVtbiAuY29udHJvbDpudGgtbGFzdC1vZi10eXBlKDEpIC5sZXZlbDpudGgtbGFzdC1vZi10eXBlKDEpIGZvcm1cIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKyAncHgnO1xyXG5cclxuICAgICAgICAvKmNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gd2luZG93Lm91dGVySGVpZ2h0O1xyXG4gICAgIFxyXG4gICAgICAgIGJsb29tUGFzcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGZ4YWFTaGFkZXIudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZS5zZXQoMSAvICh3aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSwgMSAvIChoZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykpO1xyXG4gICAgIFxyXG4gICAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgXHJcbiAgICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xyXG4gICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgXHJcbiAgICAgICAgY29tcG9zZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgY29tcG9zZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTsqL1xyXG5cclxuICAgICAgICAvKmFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNsaXAgb2YgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5jbGlwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjbGlwLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXIgLml0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAudGlja2VyV2lkdGggPSBNYXRoLm1pbih3aWR0aCAvIDIsIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAubGV2ZWxcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXAucXVlcnlTZWxlY3RvcihcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlclwiKS5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7Ki9cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIC8vYXBwLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgLy9hY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGV2ZW50ID0+IHtcclxuICAgICAgICAvKmlmIChldmVudC5idXR0b24gPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGJlc3RJbnRlcnNlY3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzcHJpbmdCb25lSW5kZXggPSAwO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGVCb25lID0geyBwb2ludDogeyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH0sIGRpcmVjdGlvbjogeyB4OiAwLCB5OiAwLCB9LCBkaXN0YW5jZTogMCwgaW5kZXg6IC0xIH07XHJcbiAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcmluZ0JvbmVHcm91cCBvZiB2cm1Nb2RlbC5zcHJpbmdCb25lTWFuYWdlci5zcHJpbmdCb25lR3JvdXBMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpbmdCb25lIG9mIHNwcmluZ0JvbmVHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHNwcmluZ0JvbmUuYm9uZS5nZXRXb3JsZFBvc2l0aW9uKG5ldyBUSFJFRS5WZWN0b3IzKCkpLmRpc3RhbmNlVG8oYmVzdEludGVyc2VjdC5wb2ludCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZUJvbmUuaW5kZXggPSBzcHJpbmdCb25lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaW5nQm9uZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwLmNoYXJhY3RlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5zZXF1ZW5jZVF1ZXVlLnB1c2goYXBwLnByZXBhcmUoYXBwLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiVG91Y2hTdGFydFwiKSwgYmVzdEludGVyc2VjdC5vYmplY3QubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSovXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGV2ZW50ID0+IHtcclxuXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgLyppZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChhcHAuY2hhcmFjdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhcHAuc2VxdWVuY2VRdWV1ZS5wdXNoKGFwcC5wcmVwYXJlKGFwcC5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlRvdWNoRW5kXCIpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9Ki9cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGV2ZW50ID0+IHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKHRhcENvdW50ID09IDApIHtcclxuICAgICAgICAgICAgdGFwQ291bnQrKztcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFwQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB9LCA1MDApO1xyXG5cclxuICAgICAgICAgICAgLypsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgICAgICAgICAgbGV0IGJlc3RJbnRlcnNlY3QgPSBudWxsO1xyXG4gICAgXHJcbiAgICAgICAgICAgIG1vdXNlLnggPSAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIDIuMCAtIDEuMDtcclxuICAgICAgICAgICAgbW91c2UueSA9IC0oZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAvIHdpbmRvdy5vdXRlckhlaWdodCkgKiAyLjAgKyAxLjA7XHJcbiAgICBcclxuICAgICAgICAgICAgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEobW91c2UsIGNhbWVyYSk7XHJcbiAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaW50ZXJzZWN0IG9mIHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lLmNoaWxkcmVuLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdC5kaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVzdEludGVyc2VjdCA9IGludGVyc2VjdDtcclxuICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGludGVyc2VjdC5kaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGlmIChiZXN0SW50ZXJzZWN0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ByaW5nQm9uZUluZGV4ID0gMDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlQm9uZSA9IHsgcG9pbnQ6IHsgeDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCwgeTogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSB9LCBkaXJlY3Rpb246IHsgeDogMCwgeTogMCwgfSwgZGlzdGFuY2U6IDAsIGluZGV4OiAtMSB9O1xyXG4gICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpbmdCb25lR3JvdXAgb2YgdnJtTW9kZWwuc3ByaW5nQm9uZU1hbmFnZXIuc3ByaW5nQm9uZUdyb3VwTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaW5nQm9uZSBvZiBzcHJpbmdCb25lR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBzcHJpbmdCb25lLmJvbmUuZ2V0V29ybGRQb3NpdGlvbihuZXcgVEhSRUUuVmVjdG9yMygpKS5kaXN0YW5jZVRvKGJlc3RJbnRlcnNlY3QucG9pbnQpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGVCb25lLmluZGV4ID0gc3ByaW5nQm9uZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcmluZ0JvbmVJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGFwcC5jaGFyYWN0ZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuc2VxdWVuY2VRdWV1ZS5wdXNoKGFwcC5wcmVwYXJlKGFwcC5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlRvdWNoU3RhcnRcIiksIGJlc3RJbnRlcnNlY3Qub2JqZWN0Lm5hbWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGxvb2tBbmltYXRpb24gPSB7IHRpbWU6IDAuMCwgZHVyYXRpb246IDAuNSwgc291cmNlOiB7IHg6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi54LCB5OiBsb29rQXRUYXJnZXQucG9zaXRpb24ueSB9LCB0YXJnZXQ6IHsgeDogKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSAwLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAxMC4wLCB5OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIDAuNSAqIHdpbmRvdy5vdXRlckhlaWdodCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAtMTAuMCB9IH07XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShtb3VzZSwgY2FtZXJhKTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgKHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lLmNoaWxkcmVuLCB0cnVlKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vYXBwLnRhbGsoYXBwLnVzZXIudWlkKTtcclxuICAgICAgICAgICAgLy9hY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgdGFwQ291bnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAvL2xvb2tBbmltYXRpb24gPSB7IHRpbWU6IDAuMCwgZHVyYXRpb246IDAuNSwgc291cmNlOiB7IHg6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi54LCB5OiBsb29rQXRUYXJnZXQucG9zaXRpb24ueSB9LCB0YXJnZXQ6IHsgeDogKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSAwLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAxMC4wLCB5OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIDAuNSAqIHdpbmRvdy5vdXRlckhlaWdodCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAtMTAuMCB9IH07XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAvKmxvb2tBbmltYXRpb24gPSB7IHRpbWU6IDAuMCwgZHVyYXRpb246IDAuNSwgc291cmNlOiB7IHg6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi54LCB5OiBsb29rQXRUYXJnZXQucG9zaXRpb24ueSB9LCB0YXJnZXQ6IHsgeDogKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSAwLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAxMC4wLCB5OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIDAuNSAqIHdpbmRvdy5vdXRlckhlaWdodCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAtMTAuMCB9IH07XHJcbiAgICBcclxuICAgICAgICBpZiAoYXBwLmNoYXJhY3RlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhcHAuc2VxdWVuY2VRdWV1ZS5wdXNoKGFwcC5wcmVwYXJlKGFwcC5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlRvdWNoRW5kXCIpKSk7XHJcbiAgICAgICAgfSovXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBlID0+IHtcclxuICAgICAgICBpZiAoZS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGFwcC5pc0RhcmtNb2RlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAuaXNEYXJrTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsiXSwic291cmNlUm9vdCI6IiJ9