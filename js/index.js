!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js",n(n.s=1)}([function(e,t,n){var i;e.exports=((i=function(){function e(e){return r.appendChild(e.dom),e}function t(e){for(var t=0;t<r.children.length;t++)r.children[t].style.display=t===e?"block":"none";n=e}var n=0,r=document.createElement("div");r.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",r.addEventListener("click",(function(e){e.preventDefault(),t(++n%r.children.length)}),!1);var a=(performance||Date).now(),s=a,o=0,c=e(new i.Panel("FPS","#0ff","#002")),u=e(new i.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var h=e(new i.Panel("MB","#f08","#201"));return t(0),{REVISION:16,dom:r,addPanel:e,showPanel:t,begin:function(){a=(performance||Date).now()},end:function(){o++;var e=(performance||Date).now();if(u.update(e-a,200),e>s+1e3&&(c.update(1e3*o/(e-s),100),s=e,o=0,h)){var t=performance.memory;h.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){a=this.end()},domElement:r,setMode:t}}).Panel=function(e,t,n){var i=1/0,r=0,a=Math.round,s=a(window.devicePixelRatio||1),o=80*s,c=48*s,u=3*s,h=2*s,l=3*s,d=15*s,f=74*s,p=30*s,m=document.createElement("canvas");m.width=o,m.height=c,m.style.cssText="width:80px;height:48px";var g=m.getContext("2d");return g.font="bold "+9*s+"px Helvetica,Arial,sans-serif",g.textBaseline="top",g.fillStyle=n,g.fillRect(0,0,o,c),g.fillStyle=t,g.fillText(e,u,h),g.fillRect(l,d,f,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(l,d,f,p),{dom:m,update:function(c,v){i=Math.min(i,c),r=Math.max(r,c),g.fillStyle=n,g.globalAlpha=1,g.fillRect(0,0,o,d),g.fillStyle=t,g.fillText(a(c)+" "+e+" ("+a(i)+"-"+a(r)+")",u,h),g.drawImage(m,l+s,d,f-s,p,l,d,f-s,p),g.fillRect(l+f-s,d,s,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(l+f-s,d,s,a((1-c/v)*p))}}},i)},function(e,t,n){"use strict";n.r(t);var i=n(0),r={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},a={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},s=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],o={CSS:{},springs:{}};function c(e,t,n){return Math.min(Math.max(e,t),n)}function u(e,t){return e.indexOf(t)>-1}function h(e,t){return e.apply(null,t)}var l={arr:function(e){return Array.isArray(e)},obj:function(e){return u(Object.prototype.toString.call(e),"Object")},pth:function(e){return l.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||l.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return l.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return l.hex(e)||l.rgb(e)||l.hsl(e)},key:function(e){return!r.hasOwnProperty(e)&&!a.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function d(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function f(e,t){var n=d(e),i=c(l.und(n[0])?1:n[0],.1,100),r=c(l.und(n[1])?100:n[1],.1,100),a=c(l.und(n[2])?10:n[2],.1,100),s=c(l.und(n[3])?0:n[3],.1,100),u=Math.sqrt(r/i),h=a/(2*Math.sqrt(r*i)),f=h<1?u*Math.sqrt(1-h*h):0,p=h<1?(h*u-s)/f:-s+u;function m(e){var n=t?t*e/1e3:e;return n=h<1?Math.exp(-n*h*u)*(1*Math.cos(f*n)+p*Math.sin(f*n)):(1+p*n)*Math.exp(-n*u),0===e||1===e?e:1-n}return t?m:function(){var t=o.springs[e];if(t)return t;for(var n=0,i=0;;)if(1===m(n+=1/6)){if(++i>=16)break}else i=0;var r=n*(1/6)*1e3;return o.springs[e]=r,r}}function p(e){return void 0===e&&(e=10),function(t){return Math.ceil(c(t,1e-6,1)*e)*(1/e)}}var m,g,v=function(){function e(e,t){return 1-3*t+3*e}function t(e,t){return 3*t-6*e}function n(e){return 3*e}function i(i,r,a){return((e(r,a)*i+t(r,a))*i+n(r))*i}function r(i,r,a){return 3*e(r,a)*i*i+2*t(r,a)*i+n(r)}return function(e,t,n,a){if(0<=e&&e<=1&&0<=n&&n<=1){var s=new Float32Array(11);if(e!==t||n!==a)for(var o=0;o<11;++o)s[o]=i(.1*o,e,n);return function(r){return e===t&&n===a||0===r||1===r?r:i(c(r),t,a)}}function c(t){for(var a=0,o=1;10!==o&&s[o]<=t;++o)a+=.1;--o;var c=a+.1*((t-s[o])/(s[o+1]-s[o])),u=r(c,e,n);return u>=.001?function(e,t,n,a){for(var s=0;s<4;++s){var o=r(t,n,a);if(0===o)return t;t-=(i(t,n,a)-e)/o}return t}(t,c,e,n):0===u?c:function(e,t,n,r,a){var s,o,c=0;do{(s=i(o=t+(n-t)/2,r,a)-e)>0?n=o:t=o}while(Math.abs(s)>1e-7&&++c<10);return o}(t,a,a+.1,e,n)}}}(),y=(m={linear:function(){return function(e){return e}}},g={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var n=c(e,1,10),i=c(t,.1,2);return function(e){return 0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-i/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/i)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){g[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(g).forEach((function(e){var t=g[e];m["easeIn"+e]=t,m["easeOut"+e]=function(e,n){return function(i){return 1-t(e,n)(1-i)}},m["easeInOut"+e]=function(e,n){return function(i){return i<.5?t(e,n)(2*i)/2:1-t(e,n)(-2*i+2)/2}},m["easeOutIn"+e]=function(e,n){return function(i){return i<.5?(1-t(e,n)(1-2*i))/2:(t(e,n)(2*i-1)+1)/2}}})),m);function w(e,t){if(l.fnc(e))return e;var n=e.split("(")[0],i=y[n],r=d(e);switch(n){case"spring":return f(e,t);case"cubicBezier":return h(v,r);case"steps":return h(p,r);default:return h(i,r)}}function b(e){try{return document.querySelectorAll(e)}catch(e){return}}function x(e,t){for(var n=e.length,i=arguments.length>=2?arguments[1]:void 0,r=[],a=0;a<n;a++)if(a in e){var s=e[a];t.call(i,s,a,e)&&r.push(s)}return r}function k(e){return e.reduce((function(e,t){return e.concat(l.arr(t)?k(t):t)}),[])}function M(e){return l.arr(e)?e:(l.str(e)&&(e=b(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function T(e,t){return e.some((function(e){return e===t}))}function I(e){var t={};for(var n in e)t[n]=e[n];return t}function S(e,t){var n=I(e);for(var i in e)n[i]=t.hasOwnProperty(i)?t[i]:e[i];return n}function D(e,t){var n=I(e);for(var i in t)n[i]=l.und(e[i])?t[i]:e[i];return n}function L(e){return l.rgb(e)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+n[1]+",1)":t:l.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,i){return t+t+n+n+i+i})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(e):l.hsl(e)?function(e){var t,n,i,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),a=parseInt(r[1],10)/360,s=parseInt(r[2],10)/100,o=parseInt(r[3],10)/100,c=r[4]||1;function u(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(0==s)t=n=i=o;else{var h=o<.5?o*(1+s):o+s-o*s,l=2*o-h;t=u(l,h,a+1/3),n=u(l,h,a),i=u(l,h,a-1/3)}return"rgba("+255*t+","+255*n+","+255*i+","+c+")"}(e):void 0;var t,n}function P(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function A(e,t){return l.fnc(e)?e(t.target,t.id,t.total):e}function C(e,t){return e.getAttribute(t)}function q(e,t,n){if(T([n,"deg","rad","turn"],P(t)))return t;var i=o.CSS[t+n];if(!l.und(i))return i;var r=document.createElement(e.tagName),a=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;a.appendChild(r),r.style.position="absolute",r.style.width=100+n;var s=100/r.offsetWidth;a.removeChild(r);var c=s*parseFloat(t);return o.CSS[t+n]=c,c}function E(e,t,n){if(t in e.style){var i=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=e.style[t]||getComputedStyle(e).getPropertyValue(i)||"0";return n?q(e,r,n):r}}function R(e,t){return l.dom(e)&&!l.inp(e)&&(!l.nil(C(e,t))||l.svg(e)&&e[t])?"attribute":l.dom(e)&&T(s,t)?"transform":l.dom(e)&&"transform"!==t&&E(e,t)?"css":null!=e[t]?"object":void 0}function O(e){if(l.dom(e)){for(var t,n=e.style.transform||"",i=/(\w+)\(([^)]*)\)/g,r=new Map;t=i.exec(n);)r.set(t[1],t[2]);return r}}function j(e,t,n,i){var r=u(t,"scale")?1:0+function(e){return u(e,"translate")||"perspective"===e?"px":u(e,"rotate")||u(e,"skew")?"deg":void 0}(t),a=O(e).get(t)||r;return n&&(n.transforms.list.set(t,a),n.transforms.last=t),i?q(e,a,i):a}function W(e,t,n,i){switch(R(e,t)){case"transform":return j(e,t,i,n);case"css":return E(e,t,n);case"attribute":return C(e,t);default:return e[t]||0}}function B(e,t){var n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;var i=P(e)||0,r=parseFloat(t),a=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return r+a+i;case"-":return r-a+i;case"*":return r*a+i}}function H(e,t){if(l.col(e))return L(e);if(/\s/g.test(e))return e;var n=P(e),i=n?e.substr(0,e.length-n.length):e;return t?i+t:i}function $(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function Q(e){for(var t,n=e.points,i=0,r=0;r<n.numberOfItems;r++){var a=n.getItem(r);r>0&&(i+=$(t,a)),t=a}return i}function z(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*C(e,"r")}(e);case"rect":return function(e){return 2*C(e,"width")+2*C(e,"height")}(e);case"line":return function(e){return $({x:C(e,"x1"),y:C(e,"y1")},{x:C(e,"x2"),y:C(e,"y2")})}(e);case"polyline":return Q(e);case"polygon":return function(e){var t=e.points;return Q(e)+$(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function N(e,t){var n=t||{},i=n.el||function(e){for(var t=e.parentNode;l.svg(t)&&l.svg(t.parentNode);)t=t.parentNode;return t}(e),r=i.getBoundingClientRect(),a=C(i,"viewBox"),s=r.width,o=r.height,c=n.viewBox||(a?a.split(" "):[0,0,s,o]);return{el:i,viewBox:c,x:c[0]/1,y:c[1]/1,w:s,h:o,vW:c[2],vH:c[3]}}function U(e,t,n){function i(n){void 0===n&&(n=0);var i=t+n>=1?t+n:0;return e.el.getPointAtLength(i)}var r=N(e.el,e.svg),a=i(),s=i(-1),o=i(1),c=n?1:r.w/r.vW,u=n?1:r.h/r.vH;switch(e.property){case"x":return(a.x-r.x)*c;case"y":return(a.y-r.y)*u;case"angle":return 180*Math.atan2(o.y-s.y,o.x-s.x)/Math.PI}}function F(e,t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,i=H(l.pth(e)?e.totalLength:e,t)+"";return{original:i,numbers:i.match(n)?i.match(n).map(Number):[0],strings:l.str(e)||t?i.split(n):[]}}function V(e){return x(e?k(l.arr(e)?e.map(M):M(e)):[],(function(e,t,n){return n.indexOf(e)===t}))}function _(e){var t=V(e);return t.map((function(e,n){return{target:e,id:n,total:t.length,transforms:{list:O(e)}}}))}function G(e,t){var n=I(t);if(/^spring/.test(n.easing)&&(n.duration=f(n.easing)),l.arr(e)){var i=e.length;2===i&&!l.obj(e[0])?e={value:e}:l.fnc(t.duration)||(n.duration=t.duration/i)}var r=l.arr(e)?e:[e];return r.map((function(e,n){var i=l.obj(e)&&!l.pth(e)?e:{value:e};return l.und(i.delay)&&(i.delay=n?0:t.delay),l.und(i.endDelay)&&(i.endDelay=n===r.length-1?t.endDelay:0),i})).map((function(e){return D(e,n)}))}function Z(e,t){var n=[],i=t.keyframes;for(var r in i&&(t=D(function(e){for(var t=x(k(e.map((function(e){return Object.keys(e)}))),(function(e){return l.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),n={},i=function(i){var r=t[i];n[r]=e.map((function(e){var t={};for(var n in e)l.key(n)?n==r&&(t.value=e[n]):t[n]=e[n];return t}))},r=0;r<t.length;r++)i(r);return n}(i),t)),t)l.key(r)&&n.push({name:r,tweens:G(t[r],e)});return n}function J(e,t){var n;return e.tweens.map((function(i){var r=function(e,t){var n={};for(var i in e){var r=A(e[i],t);l.arr(r)&&1===(r=r.map((function(e){return A(e,t)}))).length&&(r=r[0]),n[i]=r}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(i,t),a=r.value,s=l.arr(a)?a[1]:a,o=P(s),c=W(t.target,e.name,o,t),u=n?n.to.original:c,h=l.arr(a)?a[0]:u,d=P(h)||P(c),f=o||d;return l.und(s)&&(s=u),r.from=F(h,f),r.to=F(B(s,h),f),r.start=n?n.end:0,r.end=r.start+r.delay+r.duration+r.endDelay,r.easing=w(r.easing,r.duration),r.isPath=l.pth(a),r.isPathTargetInsideSVG=r.isPath&&l.svg(t.target),r.isColor=l.col(r.from.original),r.isColor&&(r.round=1),n=r,r}))}var Y={css:function(e,t,n){return e.style[t]=n},attribute:function(e,t,n){return e.setAttribute(t,n)},object:function(e,t,n){return e[t]=n},transform:function(e,t,n,i,r){if(i.list.set(t,n),t===i.last||r){var a="";i.list.forEach((function(e,t){a+=t+"("+e+") "})),e.style.transform=a}}};function X(e,t){_(e).forEach((function(e){for(var n in t){var i=A(t[n],e),r=e.target,a=P(i),s=W(r,n,a,e),o=B(H(i,a||P(s)),s),c=R(r,n);Y[c](r,n,o,e.transforms,!0)}}))}function K(e,t){return x(k(e.map((function(e){return t.map((function(t){return function(e,t){var n=R(e.target,t.name);if(n){var i=J(t,e),r=i[i.length-1];return{type:n,property:t.name,animatable:e,tweens:i,duration:r.end,delay:i[0].delay,endDelay:r.endDelay}}}(e,t)}))}))),(function(e){return!l.und(e)}))}function ee(e,t){var n=e.length,i=function(e){return e.timelineOffset?e.timelineOffset:0},r={};return r.duration=n?Math.max.apply(Math,e.map((function(e){return i(e)+e.duration}))):t.duration,r.delay=n?Math.min.apply(Math,e.map((function(e){return i(e)+e.delay}))):t.delay,r.endDelay=n?r.duration-Math.max.apply(Math,e.map((function(e){return i(e)+e.duration-e.endDelay}))):t.endDelay,r}var te=0;var ne=[],ie=function(){var e;function t(n){for(var i=ne.length,r=0;r<i;){var a=ne[r];a.paused?(ne.splice(r,1),i--):(a.tick(n),r++)}e=r>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){ae.suspendWhenDocumentHidden&&(re()?e=cancelAnimationFrame(e):(ne.forEach((function(e){return e._onDocumentVisibility()})),ie()))})),function(){e||re()&&ae.suspendWhenDocumentHidden||!(ne.length>0)||(e=requestAnimationFrame(t))}}();function re(){return!!document&&document.hidden}function ae(e){void 0===e&&(e={});var t,n=0,i=0,s=0,o=0,u=null;function h(e){var t=window.Promise&&new Promise((function(e){return u=e}));return e.finished=t,t}var l=function(e){var t=S(r,e),n=S(a,e),i=Z(n,e),s=_(e.targets),o=K(s,i),c=ee(o,n),u=te;return te++,D(t,{id:u,children:[],animatables:s,animations:o,duration:c.duration,delay:c.delay,endDelay:c.endDelay})}(e);h(l);function d(){var e=l.direction;"alternate"!==e&&(l.direction="normal"!==e?"normal":"reverse"),l.reversed=!l.reversed,t.forEach((function(e){return e.reversed=l.reversed}))}function f(e){return l.reversed?l.duration-e:e}function p(){n=0,i=f(l.currentTime)*(1/ae.speed)}function m(e,t){t&&t.seek(e-t.timelineOffset)}function g(e){for(var t=0,n=l.animations,i=n.length;t<i;){var r=n[t],a=r.animatable,s=r.tweens,o=s.length-1,u=s[o];o&&(u=x(s,(function(t){return e<t.end}))[0]||u);for(var h=c(e-u.start-u.delay,0,u.duration)/u.duration,d=isNaN(h)?1:u.easing(h),f=u.to.strings,p=u.round,m=[],g=u.to.numbers.length,v=void 0,y=0;y<g;y++){var w=void 0,b=u.to.numbers[y],k=u.from.numbers[y]||0;w=u.isPath?U(u.value,d*b,u.isPathTargetInsideSVG):k+d*(b-k),p&&(u.isColor&&y>2||(w=Math.round(w*p)/p)),m.push(w)}var M=f.length;if(M){v=f[0];for(var T=0;T<M;T++){f[T];var I=f[T+1],S=m[T];isNaN(S)||(v+=I?S+I:S+" ")}}else v=m[0];Y[r.type](a.target,r.property,v,a.transforms),r.currentValue=v,t++}}function v(e){l[e]&&!l.passThrough&&l[e](l)}function y(e){var r=l.duration,a=l.delay,p=r-l.endDelay,y=f(e);l.progress=c(y/r*100,0,100),l.reversePlayback=y<l.currentTime,t&&function(e){if(l.reversePlayback)for(var n=o;n--;)m(e,t[n]);else for(var i=0;i<o;i++)m(e,t[i])}(y),!l.began&&l.currentTime>0&&(l.began=!0,v("begin")),!l.loopBegan&&l.currentTime>0&&(l.loopBegan=!0,v("loopBegin")),y<=a&&0!==l.currentTime&&g(0),(y>=p&&l.currentTime!==r||!r)&&g(r),y>a&&y<p?(l.changeBegan||(l.changeBegan=!0,l.changeCompleted=!1,v("changeBegin")),v("change"),g(y)):l.changeBegan&&(l.changeCompleted=!0,l.changeBegan=!1,v("changeComplete")),l.currentTime=c(y,0,r),l.began&&v("update"),e>=r&&(i=0,l.remaining&&!0!==l.remaining&&l.remaining--,l.remaining?(n=s,v("loopComplete"),l.loopBegan=!1,"alternate"===l.direction&&d()):(l.paused=!0,l.completed||(l.completed=!0,v("loopComplete"),v("complete"),!l.passThrough&&"Promise"in window&&(u(),h(l)))))}return l.reset=function(){var e=l.direction;l.passThrough=!1,l.currentTime=0,l.progress=0,l.paused=!0,l.began=!1,l.loopBegan=!1,l.changeBegan=!1,l.completed=!1,l.changeCompleted=!1,l.reversePlayback=!1,l.reversed="reverse"===e,l.remaining=l.loop,t=l.children;for(var n=o=t.length;n--;)l.children[n].reset();(l.reversed&&!0!==l.loop||"alternate"===e&&1===l.loop)&&l.remaining++,g(l.reversed?l.duration:0)},l._onDocumentVisibility=p,l.set=function(e,t){return X(e,t),l},l.tick=function(e){s=e,n||(n=s),y((s+(i-n))*ae.speed)},l.seek=function(e){y(f(e))},l.pause=function(){l.paused=!0,p()},l.play=function(){l.paused&&(l.completed&&l.reset(),l.paused=!1,ne.push(l),p(),ie())},l.reverse=function(){d(),l.completed=!l.reversed,p()},l.restart=function(){l.reset(),l.play()},l.remove=function(e){oe(V(e),l)},l.reset(),l.autoplay&&l.play(),l}function se(e,t){for(var n=t.length;n--;)T(e,t[n].animatable.target)&&t.splice(n,1)}function oe(e,t){var n=t.animations,i=t.children;se(e,n);for(var r=i.length;r--;){var a=i[r],s=a.animations;se(e,s),s.length||a.children.length||i.splice(r,1)}n.length||i.length||t.pause()}ae.version="3.2.1",ae.speed=1,ae.suspendWhenDocumentHidden=!0,ae.running=ne,ae.remove=function(e){for(var t=V(e),n=ne.length;n--;){oe(t,ne[n])}},ae.get=W,ae.set=X,ae.convertPx=q,ae.path=function(e,t){var n=l.str(e)?b(e)[0]:e,i=t||100;return function(e){return{property:e,el:n,svg:N(n),totalLength:z(n)*(i/100)}}},ae.setDashoffset=function(e){var t=z(e);return e.setAttribute("stroke-dasharray",t),t},ae.stagger=function(e,t){void 0===t&&(t={});var n=t.direction||"normal",i=t.easing?w(t.easing):null,r=t.grid,a=t.axis,s=t.from||0,o="first"===s,c="center"===s,u="last"===s,h=l.arr(e),d=h?parseFloat(e[0]):parseFloat(e),f=h?parseFloat(e[1]):0,p=P(h?e[1]:e)||0,m=t.start||0+(h?d:0),g=[],v=0;return function(e,t,l){if(o&&(s=0),c&&(s=(l-1)/2),u&&(s=l-1),!g.length){for(var y=0;y<l;y++){if(r){var w=c?(r[0]-1)/2:s%r[0],b=c?(r[1]-1)/2:Math.floor(s/r[0]),x=w-y%r[0],k=b-Math.floor(y/r[0]),M=Math.sqrt(x*x+k*k);"x"===a&&(M=-x),"y"===a&&(M=-k),g.push(M)}else g.push(Math.abs(s-y));v=Math.max.apply(Math,g)}i&&(g=g.map((function(e){return i(e/v)*v}))),"reverse"===n&&(g=g.map((function(e){return a?e<0?-1*e:-e:Math.abs(v-e)})))}return m+(h?(f-d)/v:d)*(Math.round(100*g[t])/100)+p}},ae.timeline=function(e){void 0===e&&(e={});var t=ae(e);return t.duration=0,t.add=function(n,i){var r=ne.indexOf(t),s=t.children;function o(e){e.passThrough=!0}r>-1&&ne.splice(r,1);for(var c=0;c<s.length;c++)o(s[c]);var u=D(n,S(a,e));u.targets=u.targets||e.targets;var h=t.duration;u.autoplay=!1,u.direction=t.direction,u.timelineOffset=l.und(i)?h:B(i,h),o(t),t.seek(u.timelineOffset);var d=ae(u);o(d),s.push(d);var f=ee(s,e);return t.delay=f.delay,t.endDelay=f.endDelay,t.duration=f.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},ae.easing=w,ae.penner=y,ae.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};var ce=ae;firebase.initializeApp({apiKey:"AIzaSyDTVxDJj7rqG9L-Clvba2Tao9B0hkcxjcE",authDomain:"milchchan.firebaseapp.com",databaseURL:"https://milchchan.firebaseio.com",projectId:"milchchan",storageBucket:"milchchan.appspot.com",messagingSenderId:"355698971889",appId:"1:355698971889:web:e3653c5c31bd7289cd4550",measurementId:"G-3998FJYNWX"}),firebase.analytics();const ue="debug"===decodeURIComponent(window.location.hash.substring(1));let he=firebase.database(),le=firebase.storage();const de=new i;de.domElement.style.position="fixed",de.domElement.style.top="auto",de.domElement.style.bottom="0",de.domElement.style.left="auto",de.domElement.style.right="0",ue||de.domElement.classList.add("is-hidden");let fe=0;let pe=0;let me=0;window.addEventListener("load",e=>{"serviceWorker"in navigator&&(navigator.serviceWorker.register("sw.js").then(e=>{e.onupdatefound=function(){e.update()}}).catch(e=>{console.error(e.code,e.message)}),navigator.serviceWorker.addEventListener("message",e=>{null!==navigator.serviceWorker.controller&&"command"in e.data&&"caches"===e.data.command&&navigator.serviceWorker.controller.postMessage({command:"clear",caches:e.data.caches})}));var t=Vue.createApp({data:()=>({isDebug:ue,isDarkMode:!1,isMuted:!0,isLoading:!1,isUpdating:!1,isLocating:!1,isRevealed:!1,isOverlayed:!1,isBlinded:!1,isPopup:!1,isExpanded:!1,isLearning:!1,isAnimating:!1,isHangingOn:!1,isSubmitting:!1,isDiscovering:!1,isStared:!1,isLocked:!1,canvasSize:{width:0,height:0,deviceWidth:0,deviceHeight:0,alternative:{width:0,height:0,deviceWidth:0,deviceHeight:0}},cachedImages:{},cachedSprites:[],alternativeCachedSprites:[],animationQueue:[],elapsed:0,map:null,layer:null,mode:null,queryQueue:[],queryCache:{},cachedTracks:{},cachedDocuments:[],documentQueue:[],sequenceQueue:[],progress:null,user:null,input:"",animatedInputLength:0,maxInputLength:100,inputHasError:!1,messages:[],maxMessages:10,word:null,recentWords:[],tags:[],maxTags:10,scrollTimeoutID:void 0,tickIntervalID:void 0,stars:-1,animatedStars:0,screenshot:null,notifications:[],notificationHeight:0,animatedNotificationHeight:0,recentImages:[],backgroundImagesQueue:[],backgroundImages:[],preloadImages:[],isUploading:!1,animations:null,currentAnimations:[],blendShapeAnimations:[],insetTop:0,insetBottom:0,text:[],popupTextHeight:0,animatedPopupTextHeight:0,tickerWidth:0,animatedTickerWidth:0,leaderboard:[],leaderboardHeight:0,animatedLeaderboardHeight:0,message:null,states:{},character:null,alternative:null,wordDictionary:{},reverseWordDictionary:{},attributes:["名前","所属","時間","場所","する事","生き物","食べ物","飲み物","聞くもの","見るもの","読むもの","使う物","身につけるもの","乗り物","部位","病気"]}),watch:{isMuted(e){try{localStorage.setItem("bot",JSON.stringify({mute:e}))}catch(e){localStorage.removeItem("bot")}},words:{handler:()=>{t.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},deep:!0},tickerWidth(e){const t=this,n={width:this.animatedTickerWidth};ce({targets:n,width:e,round:1,duration:500,easing:"linear",update:()=>{t.animatedTickerWidth=n.width}})},backgroundImages:{handler:()=>{t.$nextTick(()=>{const e=document.body.querySelectorAll("#app>.background>div");if(e.length>1){const t=e.length-1,n=15;let i=0,r=null;for(const a of e){const s=[];for(let t=0;t<e.length;t++)t===i?s.push({visibility:"visible"}):s.push({visibility:"hidden"});const o=a.animate(s,{fill:"forwards",easing:"steps("+t+")",duration:1e3/n*e.length,iterations:1/0});null===r?r=o.startTime:o.startTime=r,i++}}})},deep:!0},text:{handler:()=>{t.$nextTick(()=>{t.isPopup&&(t.popupTextHeight=t.$refs.popupText.getBoundingClientRect().height)})},deep:!0},popupTextHeight(e){const t={height:this.animatedPopupTextHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedPopupTextHeight=t.height}})},notifications:{handler:()=>{t.$nextTick(()=>{t.notificationHeight=t.$refs.notifications.getBoundingClientRect().height})},deep:!0},notificationHeight(e){const t={height:this.animatedNotificationHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedNotificationHeight=t.height}})},leaderboard:{handler:()=>{t.$nextTick(()=>{t.leaderboardHeight=t.$refs.leaderboard.getBoundingClientRect().height})},deep:!0},leaderboardHeight(e){const t={height:this.animatedLeaderboardHeight};ce({targets:t,height:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedLeaderboardHeight=t.height}})},stars(e){const t={count:this.animatedStars};ce({targets:t,count:e,round:1,duration:500,easing:"linear",update:()=>{this.animatedStars=t.count}})},input:{handler:()=>{t.$nextTick(()=>{const e={count:t.animatedInputLength};ce({targets:e,count:t.input.length,round:1,duration:500,easing:"linear",update:()=>{t.animatedInputLength=e.count}})})},deep:!0}},methods:{signIn:function(e){if(e===firebase.auth.GoogleAuthProvider.PROVIDER_ID)firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,idToken:t.idToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)});else if(e===firebase.auth.FacebookAuthProvider.PROVIDER_ID){const e=new firebase.auth.FacebookAuthProvider;e.addScope("public_profile"),firebase.auth().signInWithPopup(e).then(e=>{var t=e.credential;for(const t of e.user.providerData){firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:t.photoURL}).catch((function(e){console.error(e.code,e.message)}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})}else e===firebase.auth.TwitterAuthProvider.PROVIDER_ID&&firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider).then(e=>{var t=e.credential;const n=Math.floor(new Date/1e3);for(const t of e.user.providerData){const i=t.photoURL.replace(/_normal\.jpg$/,".jpg");firebase.auth().currentUser.updateProfile({displayName:t.displayName,photoURL:i}).catch((function(e){console.error(e.code,e.message)})),he.ref("wonderland/users/"+e.user.uid).transaction((function(t){return t?(t.link="https://twitter.com/"+e.additionalUserInfo.username,t.timestamp=n):t={link:"https://twitter.com/"+e.additionalUserInfo.username,timestamp:n},t}));break}try{localStorage.setItem("credential",JSON.stringify({providerId:t.providerId,accessToken:t.accessToken,secret:t.secret}))}catch(e){localStorage.removeItem("credential")}}).catch(e=>{console.error(e.code,e.message)})},signOut:function(e){firebase.auth().signOut().then(()=>{localStorage.removeItem("credential"),"serviceWorker"in navigator&&null!==navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({command:"caches"})}).catch(e=>{console.error(e.code,e.message)})},refresh:function(e){this.update(!0)},update:async function(e=!1){this.isLoading=!0;const t=this,n=this.map.getCenter(),i=await this.fetch(e,n.latitude,n.longitude);if(e&&Object.keys(this.cachedTracks).forEach((function(e){for(const n of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(n);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e]})),null!==i){const e=Math.floor(new Date/1e3);let n=!1;for(const r in i)for(const a of i[r]){let i=null;for(const e in this.cachedTracks)if(a.id===this.cachedTracks[e].id){i=e;break}if(null===i){const i=new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(a.location.latitude,a.location.longitude),{title:a.name,subTitle:this.formatTime(e-a.timestamp),icon:"/images/Marker-Star.svg"});this.setImage(i,a.user),this.cachedTracks[i.id]=a,this.cachedTracks[i.id].pushpin=i,this.cachedTracks[i.id].handlers=[Microsoft.Maps.Events.addHandler(i,"click",async e=>{t.mode=this.cachedTracks[e.target.id],t.isRevealed=!0}),Microsoft.Maps.Events.addHandler(i,"dblclick",e=>{window.location.hash=t.cachedTracks[e.target.id].id})],this.map.entities.push(i),n=!0}else if(a.timestamp>this.cachedTracks[i].timestamp){const t=this.cachedTracks[i].pushpin,r=this.cachedTracks[i].handlers;t.setLocation(new Microsoft.Maps.Location(a.location.latitude,a.location.longitude)),t.setOptions({title:a.name,subTitle:this.formatTime(e-a.timestamp)}),this.setImage(t,a.user),this.cachedTracks[i]=a,this.cachedTracks[i].pushpin=t,this.cachedTracks[i].handlers=r,n=!0}}const r=[];for(const e in i)for(const t of i[e])r.push(t.id);if(Object.keys(this.cachedTracks).forEach((function(e){if(!r.some(n=>n===t.cachedTracks[e].id)){for(const n of t.cachedTracks[e].handlers)Microsoft.Maps.Events.removeHandler(n);t.map.entities.remove(t.cachedTracks[e].pushpin),delete t.cachedTracks[e],n=!0}})),n){const e=10;this.isUpdating=!0;const t=await new Promise(e=>{const t={},n=[];for(const e in i)for(const n of i[e])if(n.user.id in t)t[n.user.id].count++;else{const e=Object.assign({},n.user);e.count=1,t[n.user.id]=e}for(const e in t)n.push(t[e]);n.sort((e,t)=>t.count-e.count),e(n)});this.leaderboard.splice(0);for(const e of t)this.leaderboard.push(e);try{const t=await new Promise(t=>{const n=Math.pow(10,-6);let r=[],a=[],s={},o={},c=[],u=n;for(const e in i){let t=[],n=[];for(const r of i[e])t.push(r.name),n.includes(r.name)||(r.name in s?s[r.name]+=1:s[r.name]=1,n.push(r.name));r.push(t)}for(const e in s)s[e]=Math.log(r.length/(s[e]+n));for(const e of r){let t={};for(const n of e)n in t?t[n]+=1:t[n]=1;for(const n in t)t[n]/=e.length,n in o||(o[n]=0);a.push(t)}for(const e in o)for(const t of a)if(e in t){const n=t[e]*s[e];n>o[e]&&(o[e]=n)}for(const e in o)e.length>1&&"..."!=e&&c.push({term:e,value:o[e]});c.sort((e,t)=>t.value-e.value),c.length>e&&c.splice(e);for(const e of c)e.value>u&&(u=e.value);for(const e of c)e.value/=u;c.sort((e,t)=>e.term>t.term?1:e.term<t.term?-1:0),t([r,c])});this.cachedDocuments.splice(0),this.tags.splice(0);for(const e of t[0])this.cachedDocuments.push(e);for(let e=0;e<t[1].length;e++)this.tags.push({index:e,name:t[1][e].term,score:t[1][e].value})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isUpdating=!1}}this.isLoading=!1},fetch:async function(e,t,n){const i=this,r=this.encodeGeohash(t,n,{1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:3,11:3,12:4,13:4,14:4,15:5,16:5,17:5,18:6,19:6,20:6}[this.map.getZoom()]);let a=[r];const s=[],o={};let c=[],u=this.decodeGeohash(r);const h=Math.floor(new Date/1e3),l={};if(c.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude),new Microsoft.Maps.Location(u.topright.latitude,u.topright.longitude),new Microsoft.Maps.Location(u.bottomright.latitude,u.bottomright.longitude),new Microsoft.Maps.Location(u.bottomleft.latitude,u.bottomleft.longitude),new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1})),r.length>2){const e=this.getNeighbors(r);for(const t in e)a.push(e[t]),u=this.decodeGeohash(e[t]),c.push(new Microsoft.Maps.Polygon([new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude),new Microsoft.Maps.Location(u.topright.latitude,u.topright.longitude),new Microsoft.Maps.Location(u.bottomright.latitude,u.bottomright.longitude),new Microsoft.Maps.Location(u.bottomleft.latitude,u.bottomleft.longitude),new Microsoft.Maps.Location(u.topleft.latitude,u.topleft.longitude)],{fillColor:"rgba(255, 0, 0, 0.5)",strokeColor:"red",strokeThickness:1}))}this.layer.setPrimitives(c),this.queryQueue.push(r);for(const t of a){if(!e&&t in this.queryCache&&h-this.queryCache[t].timestamp<60){for(const e of this.queryCache[t].data)s.push(e),t in o?o[t].push(e):o[t]=[e];continue}const n=await he.ref("wonderland/tracks").orderByChild("key").limitToLast(50).startAt(t).endAt(t.padEnd(12,"z")+"").once("value");if(l[t]={timestamp:h,data:[]},n.exists()){const e=n.val();for(const n in e)e[n].id=n,s.push(e[n]),l[t].data.push(e[n]),t in o?o[t].push(e[n]):o[t]=[e[n]]}}if(this.queryQueue.shift(),this.queryQueue.length>0)return null;for(const e in l)this.queryCache[e]=l[e];Object.keys(this.queryCache).forEach((function(e){h-i.queryCache[e].timestamp>=60&&delete i.queryCache[e]}));const d=this.take(s.sort((e,t)=>t.timestamp-e.timestamp),100);return Object.keys(o).forEach((function(e){for(let t=o[e].length-1;t>0;t--)d.includes(o[e][t])||o[e].splice(t,1);0===o[e].length&&delete o[e]})),o},locate:async function(e){if("permissions"in navigator){const e=await navigator.permissions.query({name:"geolocation"});if("granted"==e.state||"prompt"==e.state){const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}}else{const e=this;this.isLocating=!0,navigator.geolocation.getCurrentPosition(t=>{e.isLocating=!1,e.map.setView({center:new Microsoft.Maps.Location(t.coords.latitude,t.coords.longitude),zoom:e.map.getZoom()<16?16:e.map.getZoom()})},t=>{e.isLocating=!1,e.notify({text:t.message,accent:e.character.accent,image:e.character.image}),console.error(t)},{enableHighAccuracy:!0,timeout:3e4,maximumAge:0})}},send:async function(e){if(this.isDebug)if(this.input.length>0){let e=[],t=[];for(const n of this.input.split(/\s/))this.backgroundImages.some(e=>e.id===n)?e.push(n):t.push(n);if(e.length>0&&t.length>0){for(const n of e)he.ref("wonderland/images/"+n).transaction((function(e){return e.tags=t,e}));this.isLearning=!1}else this.input.length<=this.maxInputLength&&(this.learn({name:this.input}),this.input="",this.isLearning=!1)}else for(const e of this.backgroundImages){this.input=e.id;break}else this.input.length>0&&this.input.length<=this.maxInputLength&&(this.learn({name:this.input}),this.input="",this.isLearning=!1)},setImage:async function(e,t,n=!1){if("image"in t){let n;try{n=await new Promise(async(e,n)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{n(e)},t.image.startsWith("gs://")?i.src=await le.refFromURL(t.image).getDownloadURL():(i.crossOrigin="Anonymous",i.src=t.image)})}catch(t){return e.setOptions({icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                            <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                                <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                    <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                                </g>\n                                <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                    <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                    <g transform="matrix(0.410574,0,0,0.410574,34.0498,26.7694)">\n                                        <path d="M0,-7.29C-0.311,-8.247 -1.138,-8.944 -2.133,-9.089L-9.21,-10.117L-12.375,-16.529C-12.819,-17.432 -13.738,-18.003 -14.744,-18.003C-15.75,-18.003 -16.67,-17.432 -17.114,-16.53L-20.279,-10.117L-27.355,-9.089C-28.352,-8.944 -29.179,-8.247 -29.49,-7.29C-29.801,-6.333 -29.541,-5.283 -28.82,-4.581L-23.7,0.41L-24.908,7.459C-25.078,8.45 -24.672,9.452 -23.857,10.043C-23.043,10.635 -21.965,10.713 -21.074,10.244L-14.744,6.917L-8.415,10.244C-8.028,10.447 -7.606,10.548 -7.186,10.548C-6.638,10.548 -6.092,10.377 -5.632,10.043C-4.818,9.452 -4.41,8.45 -4.58,7.458L-5.789,0.41L-0.668,-4.581C0.052,-5.283 0.312,-6.333 0,-7.29" style="fill:white;fill-rule:nonzero;"/>\n                                    </g>\n                                </g>\n                            </svg>'}),void console.error(t)}const i=document.createElement("canvas"),r=i.getContext("2d");i.width=n.width,i.height=n.height,r.drawImage(n,0,0,n.width,n.height);const a='<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n                        <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                        <svg width="50" height="54" viewBox="0 0 50 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\n                            <g transform="matrix(0.999999,0,0,0.999999,17.0011,-13)">\n                                <path d="M0,50L16,50L8,66L0,50Z" style="fill:rgb(255,238,0);"/>\n                            </g>\n                            <g transform="matrix(1.96491,0,0,1.96491,-30.0099,-24.5931)">\n                                <circle cx="27.996" cy="25.239" r="12.214" style="fill:rgb(255,238,0);"/>\n                                <clipPath id="_clip1">\n                                    <circle cx="27.996" cy="25.239" r="12.214"/>\n                                </clipPath>\n                                <g clip-path="url(#_clip1)">\n                                    <g transform="matrix(0.791667,0,0,0.791667,5.83249,5.2582)">\n                                        <circle cx="27.996" cy="25.239" r="12.214" style="fill:white;"/>\n                                        <clipPath id="_clip2">\n                                            <circle cx="27.996" cy="25.239" r="12.214"/>\n                                        </clipPath>\n                                        <g clip-path="url(#_clip2)">\n                                            <g id="Background" transform="matrix(0.023856,0,0,0.023856,-2.53964,-5.29658)">\n                                                <use xlink:href="#_Image3" x="767" y="767" width="1026px" height="1026px"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <defs>\n                                <image id="_Image3" width="1026px" height="1026px" xlink:href="'+i.toDataURL()+'"/>\n                            </defs>\n                        </svg>';e.setOptions({icon:a})}},change:function(e){this.input.length<=this.maxInputLength?this.inputHasError=!1:this.inputHasError=!0},upload:async function(e){function t(){let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");for(let t=0,n=e.length;t<n;t++)switch(e[t]){case"x":e[t]=Math.floor(16*Math.random()).toString(16);break;case"y":e[t]=(Math.floor(4*Math.random())+8).toString(16)}return e.join("")}const n=this,i=le.ref(),r=[],a=[];for(const t of e.target.files)r.push(t);this.isUploading=!0;for(const e of r.sort((e,t)=>e.name>t.name?1:e.name<t.name?-1:0)){const s=i.child("images/"+t()).put(e);try{await new Promise((function(e,t){s.on("state_changed",(function(e){n.progress=e.bytesTransferred/e.totalBytes/r.length+a.length/r.length}),(function(e){t(e)}),(function(){e()}))}))}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}a.push(s.snapshot.ref.fullPath)}he.ref("wonderland/images").push({paths:a,timestamp:Math.floor(new Date/1e3)}),this.progress=null,this.isUploading=!1},learn:async function(e){function t(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}const n=[],i=[];if("attributes"in e)for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}));else{const t=await he.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).once("value");if(t.exists()){const e=t.val();for(const t of this.attributes)t in e.attributes&&(e.attributes[t]>0?i.push({name:t,value:!0}):i.push({name:t,value:!1}))}else for(const e of this.attributes)i.push({name:e,value:!1})}this.word={name:e.name,attributes:i},"user"in e&&(this.word.user=e.user);for(const i of this.prepare(this.character.sequences.filter(e=>"Learn"===e.name)))"Message"===i.type?n.push({type:i.type,speed:i.speed,duration:i.duration,text:t(i.text,e.name)}):n.push(i);n.length>0&&this.sequenceQueue.push(n)},check:function(e){for(const t of this.word.attributes)t===e.target.dataset.attribute&&(t.value=e.target.checked)},share:async function(e){const t=this,n=this.map.getCenter(),i=this.encodeGeohash(n.latitude,n.longitude),r={id:this.user.uid,name:this.user.displayName,image:this.user.photoURL},a=Math.floor(new Date/1e3);if(e.name in this.wordDictionary&&delete this.wordDictionary[e.name],Object.keys(this.reverseWordDictionary).forEach(t=>{this.reverseWordDictionary[t].words.some(t=>t===e.name)&&delete this.reverseWordDictionary[t]}),this.isSubmitting=!0,this.user.providerData[0].providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID){const e=await he.ref(`wonderland/users/${this.user.uid}/link`).once("value");e.exists()&&(r.link=e.val())}he.ref("wonderland/users/"+this.user.uid+"/dictionary/words/"+e.name).transaction((function(t){if(!t){t={attributes:{},timestamp:a};for(const n of e.attributes)n.value?t.attributes[n.name]=a:t.attributes[n.name]=0;return"user"in e&&(t.user={id:e.user.id,name:e.user.name,image:e.user.image}),t}{let n=!1;for(const i of e.attributes){if(!(i.name in t.attributes)){n=!0;break}if(t.attributes[i.name]>0){if(!i.value){n=!0;break}}else if(i.value){n=!0;break}}if(n){let n=!0;const i={attributes:{}};for(const r of e.attributes)r.value?(r.name in t.attributes&&t.attributes[r.name]>0?i.attributes[r.name]=t.attributes[r.name]:i.attributes[r.name]=a-1,n=!1):i.attributes[r.name]=0;return n?null:(i.timestamp=a,i)}}}),(async function(s,o,c){if(o)if(c.exists()){const s=c.val(),o=[];for(const e in s.attributes)"number"==typeof s.attributes[e]&&s.attributes[e]>0&&t.attributes.includes(e)&&o.push(s.attributes[e]);if(1===o.length&&o[0]===s.timestamp){function u(e){var t=arguments;return e.replace(/\{(\d)\}/g,(function(e,n){return t[parseInt(n)+1]}))}he.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return(e||0)+1}));for(const n of t.prepare(t.character.sequences.filter(e=>"Learned"===e.name)))"Message"===n.type&&t.notify({text:u(n.text,e.name),accent:t.character.accent,image:t.character.image});t.isStared=!0,window.setTimeout(()=>{t.isStared=!1},3e3),t.isMuted||t.$refs.twinkle.play()}"user"in e==!1||e.user.id===t.user.uid?he.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(o){const c={};o?(o.key=`${i}${a}`,o.location={latitude:n.latitude,longitude:n.longitude},o.geohash=i,o.timestamp=a):o={key:`${i}${a}`,name:e.name,location:{latitude:n.latitude,longitude:n.longitude},geohash:i,user:r,timestamp:a};for(const e in s.attributes)t.attributes.includes(e)&&(c[e]=s.attributes[e]);return o.attributes=c,o}),(function(e,n,i){n?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}else he.ref("wonderland/users/"+t.user.uid+"/dictionary/count").transaction((function(e){return e&&e>1?e-1:null})),he.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(e){return null}),(function(e,n,i){n?i.exists()||t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1}));else s?(t.notify({text:s.message,accent:t.character.accent,image:t.character.image}),console.error(s),t.isSubmitting=!1):"user"in e==!1||e.user.id===t.user.uid?he.ref("wonderland/tracks/"+await t.digestMessage(`${t.user.uid}&${e.name}`)).transaction((function(t){if(t){t.key=`${i}${a}`,t.location={latitude:n.latitude,longitude:n.longitude},t.geohash=i,t.user=r,t.timestamp=a;for(const n of e.attributes)n.value?t.attributes[n.name]=a-1:t.attributes[n.name]=0}else{t={key:`${i}${a}`,name:e.name,location:{latitude:n.latitude,longitude:n.longitude},geohash:i,attributes:{},user:r,timestamp:a};for(const n of e.attributes)n.value?t.attributes[n.name]=a:t.attributes[n.name]=0}return t}),(function(e,n,i){n?i.exists()&&t.update(!0):e&&(t.notify({text:e.message,accent:t.character.accent,image:t.character.image}),console.error(e)),t.isSubmitting=!1})):t.isSubmitting=!1}))},next:async function(e,t,n=50){let i;if(i=null===t?await he.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().limitToFirst(n+1).once("value"):await he.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(n+1).once("value"),"words"in this.mode&&i.exists()){const e=i.val();null!==this.mode.words&&this.mode.words.length>0&&this.mode.indexes.push(this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes});this.mode.words.length===n+1?this.mode.next=this.mode.words.pop():this.mode.next=null}},previous:async function(e,t,n=50){let i=await he.ref("wonderland/users/"+e+"/dictionary/words").orderByKey().startAt(t).limitToFirst(n).once("value");if("words"in this.mode&&i.exists()){const e=i.val();null!==this.mode.words&&this.mode.words.length>0&&(this.mode.next=this.mode.words[0]),this.mode.words=[];for(const t in e)this.mode.words.push("user"in e[t]?{name:t,attributes:e[t].attributes,user:e[t].user}:{name:t,attributes:e[t].attributes})}},discover:async function(){const e=this,t=[],n={},i=[];for(const e of this.recentWords)t.push(e),n[e.name]=e;for(const e in this.cachedTracks)this.user.uid!==this.cachedTracks[e].user.id&&this.cachedTracks[e].name in n==!1&&t.push(this.cachedTracks[e]);this.isDiscovering=!0;for(const n of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(t))try{if(null!==await new Promise((t,i)=>{he.ref("wonderland/users/"+e.user.uid+"/dictionary/words/"+n.name).transaction((function(e){if(!e)return e}),(function(e,n,r){n?t(r):e?i(e):t(null)}))})){this.isDiscovering=!1,this.learn({name:n.name,attributes:n.attributes,user:n.user});for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),n.name,this.character.alternative.sequences))e.character=this.character.alternative,"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,text:e.text}):i.push(e);return void(i.length>0&&this.sequenceQueue.push(i))}}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}this.isDiscovering=!1;for(const e of this.prepare(this.character.alternative.sequences.filter(e=>"Discover"===e.name),"",this.character.alternative.sequences))"Message"===e.type?i.push({type:e.type,speed:e.speed,duration:e.duration,character:this.character.alternative,text:e.text}):(e.character=this.character.alternative,i.push(e));i.length>0&&this.sequenceQueue.push(i)},digestMessage:async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")},activate:async function(){if(fe=pe=0,this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();await this.talk(this.user.uid,e.filter(e=>e!==this.character.name))||this.talk(this.user.uid)}else this.talk(this.user.uid)},talk:async function(e,t=[]){let n=this.character.sequences.filter(e=>"Activate"===e.name),i=[];if(this.isLoading=!0,t.length>0){const r=Math.floor(new Date/1e3),a=3600,s=Object.assign({},this.states),o=new TinySegmenter,c=[],u=[];for(const n of t){if(n in this.wordDictionary==!1||r-this.wordDictionary[n].timestamp>=a){const t=await he.ref("wonderland/users/"+e+"/dictionary/words/"+n).once("value");if(this.wordDictionary[n]={attributes:[],timestamp:r},t.exists()){const e=t.val();for(let t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[n].attributes.push(t)}}for(const e of this.wordDictionary[n].attributes)c.includes(e)||c.push(e)}for(const h of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(n)){const n=this.prepare([h]);let l=!1;for(const s of n){if("Message"==s.type)for(const h of Array.isArray(s.text)?s.text:o.segment(s.text)){if(Array.isArray(h)){for(const r of n)if("Message"==r.type){const n=await this.generate(e,r.text,t);if(null===n){l=!0;break}{let e,t;[e,t]=n,i.push({type:r.type,speed:r.speed,duration:r.duration,text:e})}}else i.push(r);if(l)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}if(h.length>1&&!u.includes(h)){if(h in this.wordDictionary==!1||r-this.wordDictionary[h].timestamp>=a){const t=await he.ref("wonderland/users/"+e+"/dictionary/words/"+h).once("value");if(this.wordDictionary[h]={attributes:[],timestamp:r},t.exists()){const e=t.val();for(const t in e.attributes)"number"==typeof e.attributes[t]&&e.attributes[t]>0&&this.attributes.includes(t)&&this.wordDictionary[h].attributes.push(t)}}for(const r of this.wordDictionary[h].attributes)if(c.includes(r)){for(const r of n)if("Message"==r.type){const n=await this.generate(e,r.text,t);if(null===n){l=!0;break}{let e,t;[e,t]=n,i.push({type:r.type,speed:r.speed,duration:r.duration,text:e})}}else i.push(r);if(l)break;return i.length>0&&this.sequenceQueue.push(i),this.isLoading=!1,!0}u.push(h)}}if(l){i.splice(0);break}}this.states=s}return this.isLoading=!1,!1}for(const t of this.prepare(n))if("Message"===t.type){const n=await this.generate(e,t.text);if(null===n)return this.isLoading=!1,!1;{let e,r;[e,r]=n,i.push({type:t.type,speed:t.speed,duration:t.duration,text:e})}}else i.push(t);return i.length>0?(this.sequenceQueue.push(i),this.isLoading=!1,!0):(this.isLoading=!1,!1)},generate:async function(e,t,n=[]){function i(e){let t=[],n=Number.MIN_VALUE,i=0;for(let t=0;t<e.length;t++)e[t]>n&&(n=e[t]);for(let t=0;t<e.length;t++)i+=Math.exp(e[t]-n);for(let r=0;r<e.length;r++)t.push(Math.exp(e[r]-n)/i);return t}const r=Math.floor(new Date/1e3);let a=new TinySegmenter,s=Array.isArray(t)?t:a.segment(t),o={},c=[],u=new RegExp("[.#$\\[\\]]"),h={},l="",d=0;const f=Math.pow(10,-6);let p=[{sequence:[],score:1}];for(const t of n){if(t in this.wordDictionary==!1||r-this.wordDictionary[t].timestamp>=3600){const n=await he.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:r},n.exists()){const e=n.val();for(const n in e.attributes)"number"==typeof e.attributes[n]&&e.attributes[n]>0&&this.attributes.includes(n)&&this.wordDictionary[t].attributes.push(n)}}for(const e of this.wordDictionary[t].attributes)e in o?o[e].push(t):o[e]=[t]}for(const t of s){if(!c.includes(t)){if(Array.isArray(t)){let n=[],a=[];for(const i of t)if(i in o){for(const e of o[i])if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e===n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}else{if(i in this.reverseWordDictionary==!1||r-this.reverseWordDictionary[i].timestamp>=3600){const t=await he.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:r},t.exists()){const e=t.val();for(const t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(s.includes(e)&&!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e==n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}if(n.length>0&&a.length>0){const e=i(a);let t=[];for(let i=0;i<p.length;i++)for(let r=0;r<e.length;r++){let a=[].concat(p[i].sequence);a.push({index:d,term:n[r]}),t.push({sequence:a,score:p[i].score*e[r]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}else if(!u.test(t)){let n=[],a=[];if(t in this.wordDictionary==!1||r-this.wordDictionary[t].timestamp>=3600){const n=await he.ref("wonderland/users/"+e+"/dictionary/words/"+t).once("value");if(this.wordDictionary[t]={attributes:[],timestamp:r},n.exists()){const e=n.val();for(const n in e.attributes)"number"==typeof e.attributes[n]&&e.attributes[n]>0&&this.attributes.includes(n)&&this.wordDictionary[t].attributes.push(n)}}for(const i of this.wordDictionary[t].attributes)if(i in o){for(const e of o[i])if(!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e===n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}else{if(i in this.reverseWordDictionary==!1||r-this.reverseWordDictionary[i].timestamp>=3600){const t=await he.ref("wonderland/users/"+e+"/dictionary/words").orderByChild("attributes/"+i).limitToLast(100).startAt(1).once("value");if(this.reverseWordDictionary[i]={words:[],timestamp:r},t.exists()){const e=t.val();for(let t in e)this.reverseWordDictionary[i].words.push(t)}}for(const e of this.reverseWordDictionary[i].words)if(s.includes(e)&&!n.includes(e)){let t=!0;n.push(e);for(const n of this.tags)if(e==n.name){a.push(n.score),t=!1;break}t&&a.push(f)}}if(n.length>0&&a.length>0){const e=i(a);let t=[];for(let i=0;i<p.length;i++)for(let r=0;r<e.length;r++){let a=[].concat(p[i].sequence);a.push({index:d,term:n[r]}),t.push({sequence:a,score:p[i].score*e[r]})}p.splice(0);for(const e of this.take(t.sort((e,t)=>t.score-e.score),10))p.push(e)}}c.push(t)}d++}const m=p[function(e){const t=Math.random();let n=0,i=0;for(let r of e){if(n<=t&&t<n+r)break;n+=r,i++}return i}(i(p.map(e=>e.score)))];for(let e=0;e<s.length;e++)if(s[e]in h)void 0===h[s[e]]?l+=s[e]:l+=h[s[e]];else{let t=!0;for(let n=0;n<m.sequence.length;n++)if(m.sequence[n].index==e){s[e]==m.sequence[n].term?h[s[e]]=void 0:(h[s[e]]=m.sequence[n].term,l+=m.sequence[n].term,t=!1);break}if(t){if(Array.isArray(s[e]))return null;l+=s[e]}}return[l,h]},notify:function(e,t=3e3){const n=this;e.id=window.setTimeout(e=>{for(let t=0;t<n.notifications.length;t++)if(n.notifications[t].id===e.id){n.notifications.splice(t,1);break}},t,e),this.notifications.unshift(e)},blinded:async function(){if(0==this.backgroundImagesQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(this.recentImages))this.backgroundImagesQueue.push(e)}const e=this.backgroundImagesQueue.shift();this.preloadImages.splice(0),this.backgroundImages.splice(0);for(const t of e.paths)try{this.preloadImages.push({id:e.id,url:await le.ref().child(t).getDownloadURL(),timestamp:e.timestamp})}catch(e){this.notify({text:e.message,accent:this.character.accent,image:this.character.image}),console.error(e)}"tags"in e&&this.talk(this.user.uid,e.tags.filter(e=>e!==this.character.name))},load:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},error:function(e){let t=!0;for(let n of this.preloadImages)n.url==e?n.isLoaded=!0:"isLoaded"in n||(t=!1);if(t){let e=0;for(const t of this.preloadImages)t.isLoaded&&(this.backgroundImages.push({index:e,id:t.id,url:t.url,timestamp:t.timestamp}),e++);this.preloadImages.splice(0),this.isBlinded=!1}},scrollToTop(){this.$nextTick(()=>{window.scroll(0,0)})},scrollToEnd:function(){"number"==typeof this.scrollTimeoutID&&clearTimeout(this.scrollTimeoutID),this.scrollTimeoutID=setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),500)},formatDate:function(e){return moment.locale(window.navigator.language),moment(e).format("LT")},animationStart:function(e){this.isAnimating=!0},animationEnd:function(e){this.isPopup||(this.message=null),this.isAnimating=!1},tickerUpdated:function(e){const t=this;this.$nextTick(()=>{for(const e of document.body.querySelectorAll("#input>.columns:last-of-type>.column>.control .clip")){let n=0;for(const t of e.querySelectorAll(":scope .ticker-wrap .ticker .item"))n+=t.getBoundingClientRect().width;n>0&&(t.tickerWidth=Math.min(n/2,document.body.querySelector("#input>.columns:last-of-type>.column>.control .level").getBoundingClientRect().width),e.querySelector(":scope .ticker-wrap .ticker").style.width=n+"px")}})},arrange:function(e,t){let n=[],i=[];for(const r of e)i.length<t?i.push(r):(n.push(i),i=[r]);return n.push(i),n},take:function(e,t){if(e.length>t){let n=[].concat(e);return n.splice(t),n}return e},reverse:function(e){return[].concat(e).reverse()},formatTime:function(e){const t=Math.floor(e),n=Math.floor(t/86400),i=Math.floor(t/3600),r=Math.floor(t/60);return n>0?n+"d":r>0?i>0?i+"h":r+"m":t%60+"s"},digestMessage:async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")},getDistance:function(e,t,n,i){var r=this.deg2rad(n-e),a=this.deg2rad(i-t),s=Math.sin(r/2)*Math.sin(r/2)+Math.cos(this.deg2rad(e))*Math.cos(this.deg2rad(n))*Math.sin(a/2)*Math.sin(a/2);return 6371*(2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)))},deg2rad:function(e){return e*(Math.PI/180)},encodeGeohash:function(e,t,n=12){const i=[16,8,4,2,1];var r=1,a=[],s=[],o=0,c=0;let u="";for(a[0]=-90,a[1]=90,s[0]=-180,s[1]=180;u.length<n;){if(r){const e=(s[0]+s[1])/2;t>e?(c|=i[o],s[0]=e):s[1]=e}else{const t=(a[0]+a[1])/2;e>t?(c|=i[o],a[0]=t):a[1]=t}r=!r,o<4?o++:(u+="0123456789bcdefghjkmnpqrstuvwxyz"[c],o=0,c=0)}return u},decodeGeohash:function(e){const t=[16,8,4,2,1];var n=1,i=[],r=[];i[0]=-90,i[1]=90,r[0]=-180,r[1]=180;for(var a=0;a<e.length;a++)for(var s=e[a],o="0123456789bcdefghjkmnpqrstuvwxyz".indexOf(s),c=0;c<5;c++){const e=t[c];n?(2,o&e?r[0]=(r[0]+r[1])/2:r[1]=(r[0]+r[1])/2):(2,o&e?i[0]=(i[0]+i[1])/2:i[1]=(i[0]+i[1])/2),n=!n}return i[2]=(i[0]+i[1])/2,r[2]=(r[0]+r[1])/2,{latitude:i[2],longitude:r[2],topleft:{latitude:i[0],longitude:r[0]},topright:{latitude:i[1],longitude:r[0]},bottomright:{latitude:i[1],longitude:r[1]},bottomleft:{latitude:i[0],longitude:r[1]}}},getNeighbors:function(e){const t=this.calculateAdjacent(e,"right"),n=this.calculateAdjacent(e,"left");return{top:this.calculateAdjacent(e,"top"),bottom:this.calculateAdjacent(e,"bottom"),right:t,left:n,topleft:this.calculateAdjacent(n,"top"),topright:this.calculateAdjacent(t,"top"),bottomright:this.calculateAdjacent(t,"bottom"),bottomleft:this.calculateAdjacent(n,"bottom")}},calculateAdjacent:function(e,t){const n={right:{even:"bc01fg45238967deuvhjyznpkmstqrwx"},left:{even:"238967debc01fg45kmstqrwxuvhjyznp"},top:{even:"p0r21436x8zb9dcf5h7kjnmqesgutwvy"},bottom:{even:"14365h7k9dcfesgujnmqp0r2twvyx8zb"}},i={right:{even:"bcfguvyz"},left:{even:"0145hjnp"},top:{even:"prxz"},bottom:{even:"028b"}};n.bottom.odd=n.left.even,n.top.odd=n.right.even,n.left.odd=n.bottom.even,n.right.odd=n.top.even,i.bottom.odd=i.left.even,i.top.odd=i.right.even,i.left.odd=i.bottom.even,i.right.odd=i.top.even;var r=(e=e.toLowerCase()).charAt(e.length-1),a=e.length%2?"odd":"even",s=e.substring(0,e.length-1);return-1!=i[t][a].indexOf(r)&&(s=this.calculateAdjacent(s,t)),s+"0123456789bcdefghjkmnpqrstuvwxyz"[n[t][a].indexOf(r)]},prepare:function(e,t=null,n=null){function i(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e))+e}let r=[],a=[];for(const n of e){const e=t;if(null===t&&n.name in this.states&&(e=this.states[n.name]),null!==e&&"state"in n&&null!==n.state){new RegExp(n.state).test(e)&&r.push(n)}}if(0===r.length){for(const t of e)"state"in t!=!1&&null!==t.state||r.push(t);t=null}if(r.length>0){let e=[];for(const n of r[i(0,r.length)].sequence)null!==t&&(this.states[n.name]=t),e.push(n);for(;e.length>0;){const t=e.shift();if("Sequence"==t.type){if("sequence"in t==!1){let r=[],a=[];for(const e of null===n?this.character.sequences:n){let n=this.getSequenceStack(e,t);if(n.length>0){let e=[];do{let t=n.pop();if(n.length>0){let i=[];for(const r of n[n.length-1].sequence)if("Sequence"==r.type){if("sequence"in r){let t=!0;for(const n of e)if(n===r){t=!1;break}t&&i.push(r)}if(r===t)break}for(;i.length>0;)e.push(i.pop())}if("sequence"in t){let n=!0;for(const i of e)if(i===t){n=!1;break}n&&e.push(t)}}while(n.length>0);for(;e.length>0;)r.push(e.pop())}else r.push(e)}if("state"in t){this.states[t.name]=t.state;for(const e of r)if(e.name==t.name){if(!new RegExp(e.state).test(t.state))continue;a.push(e)}}else for(const e of r)if(e.name==t.name){if("state"in e){if(e.name in this.states==!1)continue;if(!new RegExp(e.state).test(this.states[e.name]))continue}a.push(e)}if(a.length>0){let t=0;for(const n of a[i(0,a.length)].sequence)e.splice(t,0,n),t++}}}else a.push(t)}}return a},getSequenceStack:function(e,t){let n=[];if(n.push(e),n[n.length-1]!==t){if("sequence"in e)for(const i of e.sequence)if("Sequence"==i.type){let e=this.getSequenceStack(i,t);if(e.length>0&&e[e.length-1]===t){let t=[];do{t.push(e.pop())}while(e.length>0);do{n.push(t.pop())}while(t.length>0);return n}}n.pop()}return n},animate:async function(e){if(requestAnimationFrame(this.animate),null!==this.character){const i=(e-this.elapsed)/1e3;if(this.elapsed=e,this.sequenceQueue.length>0)fe=0;else if(fe+=i,this.isLoading||(pe+=i),0==this.sequenceQueue.length)if(pe>=10){if(this.cachedDocuments.length>0){if(0==this.documentQueue.length){for(const e of function(e){let t=[].concat(e),n=e.length;for(;n>1;){const e=(i=0,r=n,i=Math.ceil(i),r=Math.floor(r),Math.floor(Math.random()*(r-i))+i);n--;const a=t[n];t[n]=t[e],t[e]=a}var i,r;return t}(this.cachedDocuments))this.documentQueue.push(e)}const e=this.documentQueue.shift();this.talk(this.user.uid,e.filter(e=>e!==this.character.name))}fe=pe=0}else fe>=5&&(this.sequenceQueue.push(this.prepare(this.character.sequences.filter(e=>"Idle"===e.name))),fe=0);if(!this.isLocked&&this.sequenceQueue.length>0){const e=this.sequenceQueue[0];if(e.length>0)if("Animation"==e[0].type){if("frames"in e[0])for(const t of e[0].frames)if(Array.isArray(t))"character"in e[0]?this.animationQueue.push({character:e[0].character,images:t}):this.animationQueue.push({character:this.character,images:t});else if("object"==typeof t&&"iterations"in t)if("images"in t){const n="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:n,images:t.images})}else if("sprites"in t){const n="character"in e[0]?e[0].character:this.character;for(let e=0;e<t.iterations;e++)this.animationQueue.push({character:n,images:t.sprites})}e.shift()}else"Message"==e[0].type&&null===this.message&&0===this.animationQueue.length&&("character"in e[0]?this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:e[0].character,text:e[0].text}:this.message={time:0,duration:e[0].duration,type:{elapsed:-1,speed:e[0].speed,reverse:!1,buffer:"",count:0},character:{name:this.character.name,accent:this.character.accent,image:this.character.image},text:e[0].text},e.shift());else if(null===this.message&&0===this.animationQueue.length){const e=this;return Object.keys(this.cachedImages).forEach((function(t){e.cachedSprites.some(e=>e.source===t)||delete e.cachedImages[t]})),this.sequenceQueue.shift(),void(this.alternative=null)}}if(null!==this.message){if(this.message.type.reverse)if(this.message.type.count>0){if(this.message.type.elapsed+=2*i,this.message.type.elapsed>=1/this.message.type.speed){if(this.message.type.count-1<this.message.text.length){let e=Math.floor(this.message.text.length/2);this.message.type.buffer.length<=e&&this.message.type.count>0&&(this.message.type.count-=1),this.message.type.buffer.length>0&&(this.message.type.buffer=this.message.type.buffer.substring(0,this.message.type.buffer.length-1))}this.message.type.elapsed=0}}else this.isPopup=!1;else if(this.message.type.buffer.length<this.message.text.length){if(this.message.type.elapsed>=0?this.message.type.elapsed+=i:this.isAnimating||(this.isPopup?this.message.type.elapsed=i:this.isPopup=!0),this.message.type.elapsed>=1/this.message.type.speed){let e=this.message.type.buffer.length,t=Math.floor(this.message.text.length/2),n=this.message.text.length;this.message.type.count>=t&&(this.message.type.buffer+=this.message.text.charAt(e)),this.message.type.count<n&&(this.message.type.count+=1),this.message.type.elapsed=0}}else this.message.time+=i,this.message.time>=this.message.duration&&(this.message.type.reverse=!0);if(this.message.text.length===this.message.type.buffer.length){const e=this.message.text.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else{let e=new Array,i="";for(let t=0;t<this.message.text.length;t++)-1==e.indexOf(this.message.text.charAt(t))&&"\n"!=this.message.text.charAt(t)&&null==this.message.text.charAt(t).match(/\s/)&&e.push(this.message.text.charAt(t));if(e.length>0)for(let r=0;r<this.message.type.count;r++)"\n"==this.message.text.charAt(r)?i+="\n":i+=e[(t=0,n=e.length,t=Math.ceil(t),n=Math.floor(n),~~(Math.floor(Math.random()*(n-t))+t))];if(i.length>this.message.type.buffer.length){const e=(this.message.type.buffer+i.substring(this.message.type.buffer.length,i.length)).split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}else if(this.text.length!==this.message.type.buffer.length){const e=this.message.type.buffer.split("");this.text.splice(0);for(let t=0;t<e.length;t++)this.text.push({key:t,value:e[t]})}}}if(this.animationQueue.length>0){const e=this.animationQueue[0];if(!this.isLocked){const t=[];for(const e of this.animationQueue)t.push(e);this.isLocked=!0;for(const e of t)for(const t of e.images)if(t.source in this.cachedImages==!1)try{const e=await new Promise(async(e,n)=>{const i=new Image;i.onload=()=>{e(i)},i.onerror=e=>{n(e)},i.crossOrigin="Anonymous",i.src=t.source});this.cachedImages[t.source]=e}catch(e){console.error(e)}if(this.isLocked=!1,e.character.name===this.character.name){this.cachedSprites.splice(0);for(const t of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,e.images))this.cachedSprites.push(t)}else{this.alternative=this.character.alternative,this.alternativeCachedSprites.splice(0);for(const t of this.render(this.$refs.alternative.getContext("2d"),this.alternativeCanvasWidth,this.alternativeCanvasHeight,e.images))this.alternativeCachedSprites.push(t)}this.animationQueue.shift()}}}var t,n},render:function(e,t,n,i){const r=[];e.clearRect(0,0,t,n);for(const t of i)t.source in this.cachedImages&&(e.globalAlpha="opacity"in t?t.opacity:1,e.drawImage(this.cachedImages[t.source],t.x*window.devicePixelRatio,t.y*window.devicePixelRatio,t.width*window.devicePixelRatio,t.height*window.devicePixelRatio)),r.push(t);return r}},updated:function(){this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height},mounted:async function(){function e(e,t){const n=Math.random();let i=0,r=0;for(let a of e){const e=t(a);if(i<=n&&n<i+e)break;i+=e,r++}return e[r]}const t=this,n=localStorage.getItem("bot"),i=localStorage.getItem("credential");let r=null;const a=[{path:"/assets/milch.json",probability:1}],s=[{path:"/assets/merku.json",probability:1}];if(n)try{const e=JSON.parse(n);null!==e&&(this.isMuted=e.mute)}catch(e){localStorage.removeItem("bot")}if(i)try{r=JSON.parse(i)}catch(e){localStorage.removeItem("credential")}this.$refs.container.after(de.domElement),this.insetTop=this.$refs.indicator.getBoundingClientRect().height,this.insetBottom=this.$refs.blank.getBoundingClientRect().height,this.map=new Microsoft.Maps.Map(this.$refs.map,{mapTypeId:Microsoft.Maps.MapTypeId.canvasLight}),this.map.setOptions({enableHighDpi:window.devicePixelRatio>1,showLocateMeButton:!1,showMapTypeSelector:!1,showZoomButtons:!1,showScalebar:!1,supportedMapTypes:[Microsoft.Maps.MapTypeId.grayscale,Microsoft.Maps.MapTypeId.canvasLight,Microsoft.Maps.MapTypeId.canvasDark]}),this.layer=new Microsoft.Maps.Layer,this.layer.setVisible(!1),this.map.layers.insert(this.layer),Microsoft.Maps.Events.addHandler(this.map,"viewchangeend",()=>{null!==t.user&&t.update()});try{this.progress=1;const t=await fetch(e(a,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(t.statusText);{const n=await t.json(),i=this.prepare(n.sequences.filter(e=>"Start"===e.name),null,n.sequences),r=await fetch(e(s,e=>e.probability).path,{mode:"cors",method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});let a;if(!r.ok)throw new Error(r.statusText);a=await r.json(),this.progress=null,this.canvasSize.width=n.width,this.canvasSize.height=n.height,this.canvasSize.deviceWidth=n.width*window.devicePixelRatio,this.canvasSize.deviceHeight=n.height*window.devicePixelRatio,this.canvasSize.alternative.width=a.width,this.canvasSize.alternative.height=a.height,this.canvasSize.alternative.deviceWidth=a.width*window.devicePixelRatio,this.canvasSize.alternative.deviceHeight=a.height*window.devicePixelRatio;for(const e of i)if("Animation"==e.type&&"frames"in e&&e.frames.length>0){let t=null;if(Array.isArray(e.frames[0])?t=e.frames[0]:"object"==typeof e.frames[0]&&"iterations"in e.frames[0]&&("images"in e.frames[0]&&e.frames[0].images.length>0?t=e.frames[0].images:"sprites"in e.frames[0]&&e.frames[0].sprites.length>0&&(t=e.frames[0].sprites)),null!==t){for(const e of t)if(e.source in this.cachedImages==!1)try{const t=await new Promise(async(t,n)=>{const i=new Image;i.onload=()=>{t(i)},i.onerror=e=>{n(e)},i.crossOrigin="Anonymous",i.src=e.source});this.cachedImages[e.source]=t}catch(e){console.error(e)}this.cachedSprites.splice(0);for(const e of this.render(this.$refs.canvas.getContext("2d"),this.canvasWidth,this.canvasHeight,t))this.cachedSprites.push(e)}break}this.character=n,this.character.alternative=a,this.sequenceQueue.push(i)}}catch(e){this.progress=null,this.notify({text:e.message}),console.error(e)}this.animate(),null===r?(this.mode="sign-in",this.isRevealed=!0):r.providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(r.idToken)).catch(e=>{console.error(e.code,e.message)}):r.providerId===firebase.auth.FacebookAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.FacebookAuthProvider.credential(r.accessToken)).catch(e=>{console.error(e.code,e.message)}):r.providerId===firebase.auth.TwitterAuthProvider.PROVIDER_ID?firebase.auth().signInWithCredential(firebase.auth.TwitterAuthProvider.credential(r.accessToken,r.secret)).catch(e=>{console.error(e.code,e.message)}):(this.mode="sign-in",this.isRevealed=!0),firebase.auth().onAuthStateChanged((function(e){e?(t.user=e,t.update(),he.ref("wonderland/users/"+e.uid+"/dictionary/count").on("value",e=>{const n=e.val();t.stars=null===n?0:n}),he.ref("wonderland/tracks").orderByChild("timestamp").limitToLast(10).on("value",e=>{if(e.exists()){const n=e.val(),i=[];let r=0;for(const e in n)n[e].id=e,i.push(n[e]);for(const e of i.sort((e,t)=>t.timestamp-e.timestamp)){let n=-1;for(let i=0;i<t.recentWords.length;i++)if(t.recentWords[i].name==e.name){n=i;break}n>=0&&t.recentWords.splice(n,1),t.recentWords.splice(r,0,e),r++}for(let e=t.recentWords.length-1;e>=r;e--)t.recentWords.splice(e,1)}})):null!==t.user&&(he.ref("wonderland/users/"+t.user.uid+"/dictionary/count").off("value"),he.ref("wonderland/tracks").off("value"),t.user=null)}))},unmounted:function(){"number"==typeof this.tickIntervalID&&clearInterval(this.tickIntervalID),null!==vrmModel&&(scene.remove(vrmModel.scene),vrmModel=null)}}).mount("#app");window.addEventListener("resize",e=>{t.insetTop=t.$refs.indicator.getBoundingClientRect().height,t.insetBottom=t.$refs.blank.getBoundingClientRect().height,t.canvasSize.width=t.character.width,t.canvasSize.height=t.character.height,t.canvasSize.deviceWidth=t.character.width*window.devicePixelRatio,t.canvasSize.deviceHeight=t.character.height*window.devicePixelRatio,t.canvasSize.alternative.width=t.character.alternative.width,t.canvasSize.alternative.height=t.character.alternative.height,t.canvasSize.alternative.deviceWidth=t.character.alternative.width*window.devicePixelRatio,t.canvasSize.alternative.deviceHeight=t.character.alternative.height*window.devicePixelRatio,t.animationQueue.unshift({character:t.character,images:[].concat(t.cachedSprites)}),null!==t.alternative&&t.animationQueue.unshift({character:t.character.alternative,images:[].concat(t.alternativeCachedSprites)})}),window.addEventListener("click",e=>{}),window.addEventListener("dblclick",e=>{}),window.addEventListener("mousedown",e=>{}),window.addEventListener("mousemove",e=>{}),window.addEventListener("mouseup",e=>{}),window.addEventListener("touchstart",e=>{e.stopPropagation(),0==me?(me++,setTimeout(()=>{me=0},500)):me=0}),window.addEventListener("touchmove",e=>{e.stopPropagation()}),window.addEventListener("touchend",e=>{e.stopPropagation()}),window.addEventListener("touchcancel",e=>{e.stopPropagation()}),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{e.matches?t.isDarkMode=!0:t.isDarkMode=!1})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5pbWVqcy9saWIvYW5pbWUuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJmIiwiZSIsImEiLCJhcHBlbmRDaGlsZCIsImRvbSIsInUiLCJjaGlsZHJlbiIsImxlbmd0aCIsInN0eWxlIiwiZGlzcGxheSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNzc1RleHQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJrIiwicGVyZm9ybWFuY2UiLCJEYXRlIiwibm93IiwiZyIsIlBhbmVsIiwiaCIsInNlbGYiLCJtZW1vcnkiLCJSRVZJU0lPTiIsImFkZFBhbmVsIiwic2hvd1BhbmVsIiwiYmVnaW4iLCJlbmQiLCJ1cGRhdGUiLCJ1c2VkSlNIZWFwU2l6ZSIsImpzSGVhcFNpemVMaW1pdCIsInRoaXMiLCJkb21FbGVtZW50Iiwic2V0TW9kZSIsIkluZmluaXR5IiwiTWF0aCIsInJvdW5kIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInYiLCJxIiwid2lkdGgiLCJoZWlnaHQiLCJiIiwiZ2V0Q29udGV4dCIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImZpbGxUZXh0IiwiZ2xvYmFsQWxwaGEiLCJ3IiwibWluIiwibWF4IiwiZHJhd0ltYWdlIiwiZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MiLCJsb29wQmVnaW4iLCJjaGFuZ2VCZWdpbiIsImNoYW5nZSIsImNoYW5nZUNvbXBsZXRlIiwibG9vcENvbXBsZXRlIiwiY29tcGxldGUiLCJsb29wIiwiZGlyZWN0aW9uIiwiYXV0b3BsYXkiLCJ0aW1lbGluZU9mZnNldCIsImRlZmF1bHRUd2VlblNldHRpbmdzIiwiZHVyYXRpb24iLCJkZWxheSIsImVuZERlbGF5IiwiZWFzaW5nIiwidmFsaWRUcmFuc2Zvcm1zIiwiY2FjaGUiLCJDU1MiLCJzcHJpbmdzIiwibWluTWF4IiwidmFsIiwic3RyaW5nQ29udGFpbnMiLCJzdHIiLCJ0ZXh0IiwiaW5kZXhPZiIsImFwcGx5QXJndW1lbnRzIiwiZnVuYyIsImFyZ3MiLCJhcHBseSIsImlzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5Iiwib2JqIiwidG9TdHJpbmciLCJwdGgiLCJzdmciLCJTVkdFbGVtZW50IiwiaW5wIiwiSFRNTElucHV0RWxlbWVudCIsIm5vZGVUeXBlIiwiZm5jIiwidW5kIiwibmlsIiwiaGV4IiwidGVzdCIsInJnYiIsImhzbCIsImNvbCIsInBhcnNlRWFzaW5nUGFyYW1ldGVycyIsInN0cmluZyIsIm1hdGNoIiwiZXhlYyIsInNwbGl0IiwibWFwIiwicGFyc2VGbG9hdCIsInNwcmluZyIsInBhcmFtcyIsIm1hc3MiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwidmVsb2NpdHkiLCJ3MCIsInNxcnQiLCJ6ZXRhIiwid2QiLCJzb2x2ZXIiLCJwcm9ncmVzcyIsImV4cCIsImNvcyIsInNpbiIsImNhY2hlZCIsImVsYXBzZWQiLCJyZXN0Iiwic3RlcHMiLCJjZWlsIiwiZWFzZXMiLCJmdW5jdGlvbkVhc2luZ3MiLCJiZXppZXIiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsIm1YMSIsIm1ZMSIsIm1YMiIsIm1ZMiIsInNhbXBsZVZhbHVlcyIsIkZsb2F0MzJBcnJheSIsIngiLCJnZXRURm9yWCIsImFYIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJrU3BsaW5lVGFibGVTaXplIiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUEiLCJhQiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJhYnMiLCJiaW5hcnlTdWJkaXZpZGUiLCJwZW5uZXIiLCJsaW5lYXIiLCJTaW5lIiwiUEkiLCJDaXJjIiwiQmFjayIsIkJvdW5jZSIsInBvdzIiLCJwb3ciLCJFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiYXNpbiIsImZvckVhY2giLCJrZXlzIiwiZWFzZUluIiwicGFyc2VFYXNpbmdzIiwiZWFzZSIsInNlbGVjdFN0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXJBcnJheSIsImNhbGxiYWNrIiwibGVuIiwidGhpc0FyZyIsImFyZ3VtZW50cyIsInJlc3VsdCIsInB1c2giLCJmbGF0dGVuQXJyYXkiLCJyZWR1Y2UiLCJjb25jYXQiLCJ0b0FycmF5IiwiTm9kZUxpc3QiLCJIVE1MQ29sbGVjdGlvbiIsInNsaWNlIiwiYXJyYXlDb250YWlucyIsInNvbWUiLCJjbG9uZU9iamVjdCIsImNsb25lIiwicmVwbGFjZU9iamVjdFByb3BzIiwibzEiLCJvMiIsIm1lcmdlT2JqZWN0cyIsImNvbG9yVG9SZ2IiLCJyZ2JWYWx1ZSIsImhleFZhbHVlIiwicmVwbGFjZSIsInBhcnNlSW50IiwiaGV4VG9SZ2JhIiwiaHNsVmFsdWUiLCJodWUycmdiIiwiaHNsVG9SZ2JhIiwiZ2V0VW5pdCIsImdldEZ1bmN0aW9uVmFsdWUiLCJhbmltYXRhYmxlIiwidGFyZ2V0IiwiaWQiLCJ0b3RhbCIsImdldEF0dHJpYnV0ZSIsImVsIiwicHJvcCIsImNvbnZlcnRQeFRvVW5pdCIsInVuaXQiLCJ0ZW1wRWwiLCJ0YWdOYW1lIiwicGFyZW50RWwiLCJwYXJlbnROb2RlIiwiYm9keSIsInBvc2l0aW9uIiwiZmFjdG9yIiwib2Zmc2V0V2lkdGgiLCJyZW1vdmVDaGlsZCIsImNvbnZlcnRlZFVuaXQiLCJnZXRDU1NWYWx1ZSIsInVwcGVyY2FzZVByb3BOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldEFuaW1hdGlvblR5cGUiLCJnZXRFbGVtZW50VHJhbnNmb3JtcyIsInRyYW5zZm9ybSIsInJlZyIsInRyYW5zZm9ybXMiLCJNYXAiLCJzZXQiLCJnZXRUcmFuc2Zvcm1WYWx1ZSIsInByb3BOYW1lIiwiZGVmYXVsdFZhbCIsImdldFRyYW5zZm9ybVVuaXQiLCJsaXN0IiwiZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZSIsImdldFJlbGF0aXZlVmFsdWUiLCJ0byIsImZyb20iLCJvcGVyYXRvciIsInkiLCJ2YWxpZGF0ZVZhbHVlIiwib3JpZ2luYWxVbml0IiwidW5pdExlc3MiLCJzdWJzdHIiLCJnZXREaXN0YW5jZSIsInAxIiwicDIiLCJnZXRQb2x5bGluZUxlbmd0aCIsInByZXZpb3VzUG9zIiwicG9pbnRzIiwidG90YWxMZW5ndGgiLCJudW1iZXJPZkl0ZW1zIiwiY3VycmVudFBvcyIsImdldEl0ZW0iLCJnZXRUb3RhbExlbmd0aCIsImdldENpcmNsZUxlbmd0aCIsImdldFJlY3RMZW5ndGgiLCJnZXRMaW5lTGVuZ3RoIiwiZ2V0UG9seWdvbkxlbmd0aCIsImdldFBhcmVudFN2ZyIsInBhdGhFbCIsInN2Z0RhdGEiLCJwYXJlbnRTdmdFbCIsImdldFBhcmVudFN2Z0VsIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInZpZXdCb3hBdHRyIiwidmlld0JveCIsInZXIiwidkgiLCJnZXRQYXRoUHJvZ3Jlc3MiLCJwYXRoIiwiaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHIiwicG9pbnQiLCJvZmZzZXQiLCJnZXRQb2ludEF0TGVuZ3RoIiwicDAiLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuMiIsImRlY29tcG9zZVZhbHVlIiwicmd4Iiwib3JpZ2luYWwiLCJudW1iZXJzIiwiTnVtYmVyIiwic3RyaW5ncyIsInBhcnNlVGFyZ2V0cyIsInRhcmdldHMiLCJpdGVtIiwicG9zIiwiZ2V0QW5pbWF0YWJsZXMiLCJwYXJzZWQiLCJub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyIsInR3ZWVuU2V0dGluZ3MiLCJzZXR0aW5ncyIsInByb3BBcnJheSIsImdldFByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwia2V5ZnJhbWVzIiwicHJvcGVydHlOYW1lcyIsIm5ld0tleSIsImZsYXR0ZW5LZXlmcmFtZXMiLCJ0d2VlbnMiLCJub3JtYWxpemVUd2VlbnMiLCJwcmV2aW91c1R3ZWVuIiwidHdlZW4iLCJub3JtYWxpemVUd2VlblZhbHVlcyIsInR3ZWVuVmFsdWUiLCJ0b1VuaXQiLCJvcmlnaW5hbFZhbHVlIiwicHJldmlvdXNWYWx1ZSIsImZyb21Vbml0Iiwic3RhcnQiLCJpc1BhdGgiLCJpc0NvbG9yIiwic2V0UHJvZ3Jlc3NWYWx1ZSIsImNzcyIsImF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIm1hbnVhbCIsImxhc3QiLCJzZXRUYXJnZXRzVmFsdWUiLCJ2YWx1ZVVuaXQiLCJhbmltVHlwZSIsImdldEFuaW1hdGlvbnMiLCJhbmltYXRhYmxlcyIsImxhc3RUd2VlbiIsInR5cGUiLCJjcmVhdGVBbmltYXRpb24iLCJnZXRJbnN0YW5jZVRpbWluZ3MiLCJhbmltYXRpb25zIiwiYW5pbUxlbmd0aCIsImdldFRsT2Zmc2V0IiwiYW5pbSIsInRpbWluZ3MiLCJpbnN0YW5jZUlEIiwiYWN0aXZlSW5zdGFuY2VzIiwiZW5naW5lIiwicmFmIiwic3RlcCIsImFjdGl2ZUluc3RhbmNlc0xlbmd0aCIsImFjdGl2ZUluc3RhbmNlIiwicGF1c2VkIiwic3BsaWNlIiwidGljayIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVuZGVmaW5lZCIsImFuaW1lIiwic3VzcGVuZFdoZW5Eb2N1bWVudEhpZGRlbiIsImlzRG9jdW1lbnRIaWRkZW4iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImluc3RhbmNlIiwiX29uRG9jdW1lbnRWaXNpYmlsaXR5IiwiaGlkZGVuIiwic3RhcnRUaW1lIiwibGFzdFRpbWUiLCJjaGlsZHJlbkxlbmd0aCIsInJlc29sdmUiLCJtYWtlUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwiX3Jlc29sdmUiLCJmaW5pc2hlZCIsImluc3RhbmNlU2V0dGluZ3MiLCJjcmVhdGVOZXdJbnN0YW5jZSIsInRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uIiwicmV2ZXJzZWQiLCJjaGlsZCIsImFkanVzdFRpbWUiLCJ0aW1lIiwicmVzZXRUaW1lIiwiY3VycmVudFRpbWUiLCJzcGVlZCIsInNlZWtDaGlsZCIsInNlZWsiLCJzZXRBbmltYXRpb25zUHJvZ3Jlc3MiLCJpbnNUaW1lIiwiYW5pbWF0aW9uc0xlbmd0aCIsInR3ZWVuTGVuZ3RoIiwiZWFzZWQiLCJpc05hTiIsInRvTnVtYmVyc0xlbmd0aCIsInRvTnVtYmVyIiwiZnJvbU51bWJlciIsInN0cmluZ3NMZW5ndGgiLCJuJDEiLCJjdXJyZW50VmFsdWUiLCJzZXRDYWxsYmFjayIsImNiIiwicGFzc1Rocm91Z2giLCJzZXRJbnN0YW5jZVByb2dyZXNzIiwiZW5naW5lVGltZSIsImluc0R1cmF0aW9uIiwiaW5zRGVsYXkiLCJpbnNFbmREZWxheSIsInJldmVyc2VQbGF5YmFjayIsImkkMSIsInN5bmNJbnN0YW5jZUNoaWxkcmVuIiwiYmVnYW4iLCJsb29wQmVnYW4iLCJjaGFuZ2VCZWdhbiIsImNoYW5nZUNvbXBsZXRlZCIsInJlbWFpbmluZyIsImNvbXBsZXRlZCIsInJlc2V0IiwicGF1c2UiLCJwbGF5IiwicmV2ZXJzZSIsInJlc3RhcnQiLCJyZW1vdmUiLCJyZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlIiwicmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zIiwidGFyZ2V0c0FycmF5IiwiY2hpbGRBbmltYXRpb25zIiwidmVyc2lvbiIsInJ1bm5pbmciLCJjb252ZXJ0UHgiLCJwZXJjZW50Iiwic2V0RGFzaG9mZnNldCIsInBhdGhMZW5ndGgiLCJzdGFnZ2VyIiwiZ3JpZCIsImF4aXMiLCJmcm9tSW5kZXgiLCJmcm9tRmlyc3QiLCJmcm9tQ2VudGVyIiwiZnJvbUxhc3QiLCJpc1JhbmdlIiwidmFsMSIsInZhbDIiLCJ2YWx1ZXMiLCJtYXhWYWx1ZSIsImluZGV4IiwiZnJvbVgiLCJmcm9tWSIsImZsb29yIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwidGltZWxpbmUiLCJ0bCIsImFkZCIsImluc3RhbmNlUGFyYW1zIiwidGxJbmRleCIsImlucyIsImluc1BhcmFtcyIsInRsRHVyYXRpb24iLCJyYW5kb20iLCJmaXJlYmFzZSIsImluaXRpYWxpemVBcHAiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJwcm9qZWN0SWQiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJhbmFseXRpY3MiLCJkZWJ1ZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsImRhdGFiYXNlIiwic3RvcmFnZSIsInN0YXRzIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiY2xhc3NMaXN0IiwiaWRsZVRpbWUiLCJhY3RpdmF0ZVRpbWUiLCJ0YXBDb3VudCIsImV2ZW50IiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsIm9udXBkYXRlZm91bmQiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImNvZGUiLCJtZXNzYWdlIiwiY29udHJvbGxlciIsImRhdGEiLCJjb21tYW5kIiwicG9zdE1lc3NhZ2UiLCJjYWNoZXMiLCJhcHAiLCJWdWUiLCJjcmVhdGVBcHAiLCJpc0RlYnVnIiwiaXNEYXJrTW9kZSIsImlzTXV0ZWQiLCJpc0xvYWRpbmciLCJpc1VwZGF0aW5nIiwiaXNMb2NhdGluZyIsImlzUmV2ZWFsZWQiLCJpc092ZXJsYXllZCIsImlzQmxpbmRlZCIsImlzUG9wdXAiLCJpc0V4cGFuZGVkIiwiaXNMZWFybmluZyIsImlzQW5pbWF0aW5nIiwiaXNIYW5naW5nT24iLCJpc1N1Ym1pdHRpbmciLCJpc0Rpc2NvdmVyaW5nIiwiaXNTdGFyZWQiLCJpc0xvY2tlZCIsImNhbnZhc1NpemUiLCJkZXZpY2VXaWR0aCIsImRldmljZUhlaWdodCIsImFsdGVybmF0aXZlIiwiY2FjaGVkSW1hZ2VzIiwiY2FjaGVkU3ByaXRlcyIsImFsdGVybmF0aXZlQ2FjaGVkU3ByaXRlcyIsImFuaW1hdGlvblF1ZXVlIiwibGF5ZXIiLCJxdWVyeVF1ZXVlIiwicXVlcnlDYWNoZSIsImNhY2hlZFRyYWNrcyIsImNhY2hlZERvY3VtZW50cyIsImRvY3VtZW50UXVldWUiLCJzZXF1ZW5jZVF1ZXVlIiwidXNlciIsImlucHV0IiwiYW5pbWF0ZWRJbnB1dExlbmd0aCIsIm1heElucHV0TGVuZ3RoIiwiaW5wdXRIYXNFcnJvciIsIm1lc3NhZ2VzIiwibWF4TWVzc2FnZXMiLCJ3b3JkIiwicmVjZW50V29yZHMiLCJ0YWdzIiwibWF4VGFncyIsInNjcm9sbFRpbWVvdXRJRCIsInRpY2tJbnRlcnZhbElEIiwic3RhcnMiLCJhbmltYXRlZFN0YXJzIiwic2NyZWVuc2hvdCIsIm5vdGlmaWNhdGlvbnMiLCJub3RpZmljYXRpb25IZWlnaHQiLCJhbmltYXRlZE5vdGlmaWNhdGlvbkhlaWdodCIsInJlY2VudEltYWdlcyIsImJhY2tncm91bmRJbWFnZXNRdWV1ZSIsImJhY2tncm91bmRJbWFnZXMiLCJwcmVsb2FkSW1hZ2VzIiwiaXNVcGxvYWRpbmciLCJjdXJyZW50QW5pbWF0aW9ucyIsImJsZW5kU2hhcGVBbmltYXRpb25zIiwiaW5zZXRUb3AiLCJpbnNldEJvdHRvbSIsInBvcHVwVGV4dEhlaWdodCIsImFuaW1hdGVkUG9wdXBUZXh0SGVpZ2h0IiwidGlja2VyV2lkdGgiLCJhbmltYXRlZFRpY2tlcldpZHRoIiwibGVhZGVyYm9hcmQiLCJsZWFkZXJib2FyZEhlaWdodCIsImFuaW1hdGVkTGVhZGVyYm9hcmRIZWlnaHQiLCJzdGF0ZXMiLCJjaGFyYWN0ZXIiLCJ3b3JkRGljdGlvbmFyeSIsInJldmVyc2VXb3JkRGljdGlvbmFyeSIsImF0dHJpYnV0ZXMiLCJ3YXRjaCIsIm5ld1ZhbHVlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtdXRlIiwicmVtb3ZlSXRlbSIsIndvcmRzIiwiaGFuZGxlciIsIiRuZXh0VGljayIsImNsaXAiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImRlZXAiLCJlbGVtZW50cyIsImZyYW1lUmF0ZSIsInZpc2liaWxpdHkiLCJhbmltYXRpb24iLCJhbmltYXRlIiwiZmlsbCIsIml0ZXJhdGlvbnMiLCIkcmVmcyIsInBvcHVwVGV4dCIsImNvdW50IiwibWV0aG9kcyIsInNpZ25JbiIsImF1dGgiLCJHb29nbGVBdXRoUHJvdmlkZXIiLCJQUk9WSURFUl9JRCIsInNpZ25JbldpdGhQb3B1cCIsImNyZWRlbnRpYWwiLCJwcm92aWRlckRhdGEiLCJjdXJyZW50VXNlciIsInVwZGF0ZVByb2ZpbGUiLCJkaXNwbGF5TmFtZSIsInBob3RvVVJMIiwicHJvdmlkZXJJZCIsImFjY2Vzc1Rva2VuIiwiaWRUb2tlbiIsIkZhY2Vib29rQXV0aFByb3ZpZGVyIiwicHJvdmlkZXIiLCJhZGRTY29wZSIsIlR3aXR0ZXJBdXRoUHJvdmlkZXIiLCJ0aW1lc3RhbXAiLCJwaG90b1VybCIsInJlZiIsInVpZCIsInRyYW5zYWN0aW9uIiwiY3VycmVudCIsImFkZGl0aW9uYWxVc2VySW5mbyIsInVzZXJuYW1lIiwibGluayIsInNlY3JldCIsInNpZ25PdXQiLCJyZWZyZXNoIiwiYXN5bmMiLCJpZ25vcmUiLCJjZW50ZXJMb2NhdGlvbiIsImdldENlbnRlciIsInRyYWNrcyIsImZldGNoIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJoYW5kbGVySWQiLCJoYW5kbGVycyIsIk1pY3Jvc29mdCIsIk1hcHMiLCJFdmVudHMiLCJyZW1vdmVIYW5kbGVyIiwiZW50aXRpZXMiLCJwdXNocGluIiwiaXNVcGRhdGVkIiwiZ2VvaGFzaCIsInRyYWNrIiwicHVzaHBpbklkIiwiUHVzaHBpbiIsIkxvY2F0aW9uIiwidGl0bGUiLCJzdWJUaXRsZSIsImZvcm1hdFRpbWUiLCJpY29uIiwic2V0SW1hZ2UiLCJhZGRIYW5kbGVyIiwic2V0TG9jYXRpb24iLCJzZXRPcHRpb25zIiwiaWRzIiwidHJhY2tEaWN0aW9uYXJ5IiwidHJhY2tSYW5raW5nIiwiYXNzaWduIiwic29ydCIsInJlc3VsdHMiLCJlcHNpbG9uIiwiZG9jdW1lbnRzIiwidGVybUZyZXF1ZW5jaWVzIiwiaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5Iiwic2NvcmVEaWN0aW9uYXJ5Iiwic2NvcmVzIiwibWF4U2NvcmUiLCJ0b2tlbnMiLCJ0ZXJtU2V0IiwiaW5jbHVkZXMiLCJsb2ciLCJ0ZiIsInRva2VuIiwidGVybUZyZXF1ZW5jeSIsInRmaWRmIiwidGVybSIsInNjb3JlIiwibm90aWZ5IiwiYWNjZW50IiwiaW1hZ2UiLCJjZW50ZXJHZW9oYXNoIiwiZW5jb2RlR2VvaGFzaCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCJnZXRab29tIiwiZ2VvaGFzaGVzIiwidGVtcFJlY2VudCIsInByaW1pdGl2ZXMiLCJkZWNvZGVHZW9oYXNoIiwidGVtcENhY2hlIiwiUG9seWdvbiIsInRvcGxlZnQiLCJ0b3ByaWdodCIsImJvdHRvbXJpZ2h0IiwiYm90dG9tbGVmdCIsImZpbGxDb2xvciIsInN0cm9rZUNvbG9yIiwic3Ryb2tlVGhpY2tuZXNzIiwibmVpZ2hib3JzIiwiZ2V0TmVpZ2hib3JzIiwic2V0UHJpbWl0aXZlcyIsInNuYXBzaG90IiwiZGF0YWJhc2VSb290Iiwib3JkZXJCeUNoaWxkIiwibGltaXRUb0xhc3QiLCJzdGFydEF0IiwiZW5kQXQiLCJwYWRFbmQiLCJvbmNlIiwiZXhpc3RzIiwiZGljdGlvbmFyeSIsInNoaWZ0IiwicmVjZW50IiwidGFrZSIsImxvY2F0ZSIsInBlcm1pc3Npb25TdGF0dXMiLCJwZXJtaXNzaW9ucyIsInF1ZXJ5Iiwic3RhdGUiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInNldFZpZXciLCJjZW50ZXIiLCJjb29yZHMiLCJ6b29tIiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwidGltZW91dCIsIm1heGltdW1BZ2UiLCJzZW5kIiwibGVhcm4iLCJzZWxlY3RlZCIsInJlamVjdCIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInN0YXJ0c1dpdGgiLCJzcmMiLCJyZWZGcm9tVVJMIiwiZ2V0RG93bmxvYWRVUkwiLCJjcm9zc09yaWdpbiIsImN0eCIsImlubGluZVN2ZyIsInRvRGF0YVVSTCIsInVwbG9hZCIsImdlbmVyYXRlVXVpZCIsImNoYXJzIiwiam9pbiIsInN0b3JhZ2VSZWYiLCJmaWxlcyIsInBhdGhzIiwiZmlsZSIsInVwbG9hZFRhc2siLCJwdXQiLCJvbiIsImJ5dGVzVHJhbnNmZXJyZWQiLCJ0b3RhbEJ5dGVzIiwiZnVsbFBhdGgiLCJmb3JtYXQiLCJzZXF1ZW5jZSIsInByZXBhcmUiLCJzZXF1ZW5jZXMiLCJmaWx0ZXIiLCJjaGVjayIsImRhdGFzZXQiLCJjaGVja2VkIiwic2hhcmUiLCJ1cGRhdGVSZXF1aXJlZCIsImRlbGV0ZVJlcXVpcmVkIiwiY29tbWl0dGVkIiwidGltZXN0YW1wcyIsInNldFRpbWVvdXQiLCJ0d2lua2xlIiwiZGlnZXN0TWVzc2FnZSIsIm5leHQiLCJ1c2VySWQiLCJsaW1pdCIsIm9yZGVyQnlLZXkiLCJsaW1pdFRvRmlyc3QiLCJpbmRleGVzIiwicG9wIiwicHJldmlvdXMiLCJkaXNjb3ZlciIsIndvcmRTZXQiLCJhcnJheSIsInRlbXAiLCJzaHVmZmxlIiwibXNnVWludDgiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImhhc2hCdWZmZXIiLCJjcnlwdG8iLCJzdWJ0bGUiLCJkaWdlc3QiLCJVaW50OEFycmF5IiwicGFkU3RhcnQiLCJhY3RpdmF0ZSIsInRhbGsiLCJ0ZW1wU3RhdGVzIiwic2VnbWVudGVyIiwiVGlueVNlZ21lbnRlciIsInRva2VuU2V0IiwicHJlcGFyZWRTZXF1ZW5jZSIsImlzQWJvcnRlZCIsInNlZ21lbnQiLCJnZW5lcmF0ZSIsImhpbnRzIiwic29mdG1heCIsIk1JTl9WQUxVRSIsInN1bSIsImhpbnREaWN0aW9uYXJ5IiwicmVnZXgiLCJSZWdFeHAiLCJjYWNoRGljdGlvbmFyeSIsInRlcm1zIiwiaXNOZXciLCJ0YWciLCJwcm9iYWJpbGl0aWVzIiwiY2FuZGlkYXRlcyIsImoiLCJjYW5kaWRhdGUiLCJwcm9iYWJpbGl0eSIsImNob2ljZSIsInVuc2hpZnQiLCJibGluZGVkIiwidXJsIiwibG9hZCIsImlzQ29tcGxldGVkIiwiaXNMb2FkZWQiLCJzY3JvbGwiLCJzY3JvbGxUb0VuZCIsImNsZWFyVGltZW91dCIsInNjcm9sbFRvIiwic2Nyb2xsSGVpZ2h0IiwiZm9ybWF0RGF0ZSIsIm1vbWVudCIsImxvY2FsZSIsImxhbmd1YWdlIiwiYW5pbWF0aW9uU3RhcnQiLCJhbmltYXRpb25FbmQiLCJ0aWNrZXJVcGRhdGVkIiwiYXJyYW5nZSIsImNvbGxlY3Rpb24iLCJyb3dzIiwiY29sdW1ucyIsImRheXMiLCJob3VycyIsIm1pbnV0ZXMiLCJsYXQxIiwibG9uMSIsImxhdDIiLCJsb24yIiwiZExhdCIsImRlZzJyYWQiLCJkTG9uIiwiZGVnIiwicHJlY2lzaW9uIiwiQklUUyIsImlzX2V2ZW4iLCJsYXQiLCJsb24iLCJiaXQiLCJjaCIsIm1pZCIsImNkIiwibWFzayIsInJpZ2h0R2VvaGFzaCIsImNhbGN1bGF0ZUFkamFjZW50IiwibGVmdEdlb2hhc2giLCJzcmNIYXNoIiwiZGlyIiwiTkVJR0hCT1JTIiwiZXZlbiIsIkJPUkRFUlMiLCJvZGQiLCJsYXN0Q2hyIiwiY2hhckF0IiwiYmFzZSIsInNlbGVjdGVkU2VxdWVuY2VzIiwiX3JhbmRvbSIsImNob29zZWRTZXF1ZW5jZXMiLCJmbGF0dGVuZWRTZXF1ZW5jZSIsInRlbXBTdGF0ZSIsInF1ZXVlIiwidHJhY2VkU2VxdWVuY2VzIiwiY2FsbGFibGVTZXF1ZW5jZXMiLCJzZXF1ZW5jZVN0YWNrIiwiZ2V0U2VxdWVuY2VTdGFjayIsInN0YWNrIiwicG9wcGVkU2VxdWVuY2UiLCJ0ZW1wU3RhY2siLCJ0ZW1wU2VxdWVuY2UiLCJzb3VyY2VTZXF1ZW5jZSIsInRhcmdldFNlcXVlbmNlIiwiZGVsdGFUaW1lIiwiZnJhbWVzIiwiaW1hZ2VzIiwic3ByaXRlcyIsImJ1ZmZlciIsInNvdXJjZSIsImNoYXJhY3RlcnMiLCJjaGFyQXJyYXkiLCJyYW5kb21CdWZmZXIiLCJzcHJpdGUiLCJyZW5kZXIiLCJjYW52YXMiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImFsdGVybmF0aXZlQ2FudmFzV2lkdGgiLCJhbHRlcm5hdGl2ZUNhbnZhc0hlaWdodCIsImNsZWFyUmVjdCIsIm9wYWNpdHkiLCJ1cGRhdGVkIiwiaW5kaWNhdG9yIiwiYmxhbmsiLCJtb3VudGVkIiwiYm90U3RvcmFnZUl0ZW0iLCJjcmVkZW50aWFsU3RvcmFnZUl0ZW0iLCJhbHRlcm5hdGl2ZXMiLCJib3QiLCJwYXJzZSIsImNvbnRhaW5lciIsImFmdGVyIiwibWFwVHlwZUlkIiwiTWFwVHlwZUlkIiwiY2FudmFzTGlnaHQiLCJlbmFibGVIaWdoRHBpIiwic2hvd0xvY2F0ZU1lQnV0dG9uIiwic2hvd01hcFR5cGVTZWxlY3RvciIsInNob3dab29tQnV0dG9ucyIsInNob3dTY2FsZWJhciIsInN1cHBvcnRlZE1hcFR5cGVzIiwiZ3JheXNjYWxlIiwiY2FudmFzRGFyayIsIkxheWVyIiwic2V0VmlzaWJsZSIsImxheWVycyIsImluc2VydCIsInJlc3BvbnNlMSIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImpzb24iLCJyZXNwb25zZTIiLCJzaWduSW5XaXRoQ3JlZGVudGlhbCIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsInRlbXBXb3JkcyIsInJlbW92ZUluZGV4Iiwib2ZmIiwidW5tb3VudGVkIiwiY2xlYXJJbnRlcnZhbCIsInZybU1vZGVsIiwic2NlbmUiLCJtb3VudCIsInN0b3BQcm9wYWdhdGlvbiIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FB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aUIsY0FBZW1lLElBQ25DQSxFQUFNa2Ysb0JBRVY1N0IsT0FBTzY3QixXQUFXLGdDQUFnQ3Q5QixpQkFBaUIsU0FBVVosSUFDckVBLEVBQUVtK0IsUUFDRm5lLEVBQUlJLFlBQWEsRUFFakJKLEVBQUlJLFlBQWEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9qc1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIvLyBzdGF0cy5qcyAtIGh0dHA6Ly9naXRodWIuY29tL21yZG9vYi9zdGF0cy5qc1xuKGZ1bmN0aW9uKGYsZSl7XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6Zi5TdGF0cz1lKCl9KSh0aGlzLGZ1bmN0aW9uKCl7dmFyIGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGEpe2MuYXBwZW5kQ2hpbGQoYS5kb20pO3JldHVybiBhfWZ1bmN0aW9uIHUoYSl7Zm9yKHZhciBkPTA7ZDxjLmNoaWxkcmVuLmxlbmd0aDtkKyspYy5jaGlsZHJlbltkXS5zdHlsZS5kaXNwbGF5PWQ9PT1hP1wiYmxvY2tcIjpcIm5vbmVcIjtsPWF9dmFyIGw9MCxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO2N1cnNvcjpwb2ludGVyO29wYWNpdHk6MC45O3otaW5kZXg6MTAwMDBcIjtjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTtcbnUoKytsJWMuY2hpbGRyZW4ubGVuZ3RoKX0sITEpO3ZhciBrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCksZz1rLGE9MCxyPWUobmV3IGYuUGFuZWwoXCJGUFNcIixcIiMwZmZcIixcIiMwMDJcIikpLGg9ZShuZXcgZi5QYW5lbChcIk1TXCIsXCIjMGYwXCIsXCIjMDIwXCIpKTtpZihzZWxmLnBlcmZvcm1hbmNlJiZzZWxmLnBlcmZvcm1hbmNlLm1lbW9yeSl2YXIgdD1lKG5ldyBmLlBhbmVsKFwiTUJcIixcIiNmMDhcIixcIiMyMDFcIikpO3UoMCk7cmV0dXJue1JFVklTSU9OOjE2LGRvbTpjLGFkZFBhbmVsOmUsc2hvd1BhbmVsOnUsYmVnaW46ZnVuY3Rpb24oKXtrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCl9LGVuZDpmdW5jdGlvbigpe2ErKzt2YXIgYz0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpO2gudXBkYXRlKGMtaywyMDApO2lmKGM+ZysxRTMmJihyLnVwZGF0ZSgxRTMqYS8oYy1nKSwxMDApLGc9YyxhPTAsdCkpe3ZhciBkPXBlcmZvcm1hbmNlLm1lbW9yeTt0LnVwZGF0ZShkLnVzZWRKU0hlYXBTaXplL1xuMTA0ODU3NixkLmpzSGVhcFNpemVMaW1pdC8xMDQ4NTc2KX1yZXR1cm4gY30sdXBkYXRlOmZ1bmN0aW9uKCl7az10aGlzLmVuZCgpfSxkb21FbGVtZW50OmMsc2V0TW9kZTp1fX07Zi5QYW5lbD1mdW5jdGlvbihlLGYsbCl7dmFyIGM9SW5maW5pdHksaz0wLGc9TWF0aC5yb3VuZCxhPWcod2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLHI9ODAqYSxoPTQ4KmEsdD0zKmEsdj0yKmEsZD0zKmEsbT0xNSphLG49NzQqYSxwPTMwKmEscT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Eud2lkdGg9cjtxLmhlaWdodD1oO3Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOjgwcHg7aGVpZ2h0OjQ4cHhcIjt2YXIgYj1xLmdldENvbnRleHQoXCIyZFwiKTtiLmZvbnQ9XCJib2xkIFwiKzkqYStcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7Yi50ZXh0QmFzZWxpbmU9XCJ0b3BcIjtiLmZpbGxTdHlsZT1sO2IuZmlsbFJlY3QoMCwwLHIsaCk7Yi5maWxsU3R5bGU9ZjtiLmZpbGxUZXh0KGUsdCx2KTtcbmIuZmlsbFJlY3QoZCxtLG4scCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCxtLG4scCk7cmV0dXJue2RvbTpxLHVwZGF0ZTpmdW5jdGlvbihoLHcpe2M9TWF0aC5taW4oYyxoKTtrPU1hdGgubWF4KGssaCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPTE7Yi5maWxsUmVjdCgwLDAscixtKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZyhoKStcIiBcIitlK1wiIChcIitnKGMpK1wiLVwiK2coaykrXCIpXCIsdCx2KTtiLmRyYXdJbWFnZShxLGQrYSxtLG4tYSxwLGQsbSxuLWEscCk7Yi5maWxsUmVjdChkK24tYSxtLGEscCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCtuLWEsbSxhLGcoKDEtaC93KSpwKSl9fX07cmV0dXJuIGZ9KTtcbiIsIi8qXG4gKiBhbmltZS5qcyB2My4yLjFcbiAqIChjKSAyMDIwIEp1bGlhbiBHYXJuaWVyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGFuaW1lanMuY29tXG4gKi9cblxuLy8gRGVmYXVsdHNcblxudmFyIGRlZmF1bHRJbnN0YW5jZVNldHRpbmdzID0ge1xuICB1cGRhdGU6IG51bGwsXG4gIGJlZ2luOiBudWxsLFxuICBsb29wQmVnaW46IG51bGwsXG4gIGNoYW5nZUJlZ2luOiBudWxsLFxuICBjaGFuZ2U6IG51bGwsXG4gIGNoYW5nZUNvbXBsZXRlOiBudWxsLFxuICBsb29wQ29tcGxldGU6IG51bGwsXG4gIGNvbXBsZXRlOiBudWxsLFxuICBsb29wOiAxLFxuICBkaXJlY3Rpb246ICdub3JtYWwnLFxuICBhdXRvcGxheTogdHJ1ZSxcbiAgdGltZWxpbmVPZmZzZXQ6IDBcbn07XG5cbnZhciBkZWZhdWx0VHdlZW5TZXR0aW5ncyA9IHtcbiAgZHVyYXRpb246IDEwMDAsXG4gIGRlbGF5OiAwLFxuICBlbmREZWxheTogMCxcbiAgZWFzaW5nOiAnZWFzZU91dEVsYXN0aWMoMSwgLjUpJyxcbiAgcm91bmQ6IDBcbn07XG5cbnZhciB2YWxpZFRyYW5zZm9ybXMgPSBbJ3RyYW5zbGF0ZVgnLCAndHJhbnNsYXRlWScsICd0cmFuc2xhdGVaJywgJ3JvdGF0ZScsICdyb3RhdGVYJywgJ3JvdGF0ZVknLCAncm90YXRlWicsICdzY2FsZScsICdzY2FsZVgnLCAnc2NhbGVZJywgJ3NjYWxlWicsICdza2V3JywgJ3NrZXdYJywgJ3NrZXdZJywgJ3BlcnNwZWN0aXZlJywgJ21hdHJpeCcsICdtYXRyaXgzZCddO1xuXG4vLyBDYWNoaW5nXG5cbnZhciBjYWNoZSA9IHtcbiAgQ1NTOiB7fSxcbiAgc3ByaW5nczoge31cbn07XG5cbi8vIFV0aWxzXG5cbmZ1bmN0aW9uIG1pbk1heCh2YWwsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIG1pbiksIG1heCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ0NvbnRhaW5zKHN0ciwgdGV4dCkge1xuICByZXR1cm4gc3RyLmluZGV4T2YodGV4dCkgPiAtMTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBcmd1bWVudHMoZnVuYywgYXJncykge1xuICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbn1cblxudmFyIGlzID0ge1xuICBhcnI6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBBcnJheS5pc0FycmF5KGEpOyB9LFxuICBvYmo6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBzdHJpbmdDb250YWlucyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSksICdPYmplY3QnKTsgfSxcbiAgcHRoOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMub2JqKGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ3RvdGFsTGVuZ3RoJyk7IH0sXG4gIHN2ZzogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgaW5zdGFuY2VvZiBTVkdFbGVtZW50OyB9LFxuICBpbnA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudDsgfSxcbiAgZG9tOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5ub2RlVHlwZSB8fCBpcy5zdmcoYSk7IH0sXG4gIHN0cjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAnc3RyaW5nJzsgfSxcbiAgZm5jOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICdmdW5jdGlvbic7IH0sXG4gIHVuZDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAndW5kZWZpbmVkJzsgfSxcbiAgbmlsOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMudW5kKGEpIHx8IGEgPT09IG51bGw7IH0sXG4gIGhleDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIC8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KGEpOyB9LFxuICByZ2I6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXnJnYi8udGVzdChhKTsgfSxcbiAgaHNsOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gL15oc2wvLnRlc3QoYSk7IH0sXG4gIGNvbDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIChpcy5oZXgoYSkgfHwgaXMucmdiKGEpIHx8IGlzLmhzbChhKSk7IH0sXG4gIGtleTogZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiAhZGVmYXVsdFR3ZWVuU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gJ3RhcmdldHMnICYmIGEgIT09ICdrZXlmcmFtZXMnOyB9LFxufTtcblxuLy8gRWFzaW5nc1xuXG5mdW5jdGlvbiBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoc3RyaW5nKSB7XG4gIHZhciBtYXRjaCA9IC9cXCgoW14pXSspXFwpLy5leGVjKHN0cmluZyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwYXJzZUZsb2F0KHApOyB9KSA6IFtdO1xufVxuXG4vLyBTcHJpbmcgc29sdmVyIGluc3BpcmVkIGJ5IFdlYmtpdCBDb3B5cmlnaHQgwqkgMjAxNiBBcHBsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIGh0dHBzOi8vd2Via2l0Lm9yZy9kZW1vcy9zcHJpbmcvc3ByaW5nLmpzXG5cbmZ1bmN0aW9uIHNwcmluZyhzdHJpbmcsIGR1cmF0aW9uKSB7XG5cbiAgdmFyIHBhcmFtcyA9IHBhcnNlRWFzaW5nUGFyYW1ldGVycyhzdHJpbmcpO1xuICB2YXIgbWFzcyA9IG1pbk1heChpcy51bmQocGFyYW1zWzBdKSA/IDEgOiBwYXJhbXNbMF0sIC4xLCAxMDApO1xuICB2YXIgc3RpZmZuZXNzID0gbWluTWF4KGlzLnVuZChwYXJhbXNbMV0pID8gMTAwIDogcGFyYW1zWzFdLCAuMSwgMTAwKTtcbiAgdmFyIGRhbXBpbmcgPSBtaW5NYXgoaXMudW5kKHBhcmFtc1syXSkgPyAxMCA6IHBhcmFtc1syXSwgLjEsIDEwMCk7XG4gIHZhciB2ZWxvY2l0eSA9ICBtaW5NYXgoaXMudW5kKHBhcmFtc1szXSkgPyAwIDogcGFyYW1zWzNdLCAuMSwgMTAwKTtcbiAgdmFyIHcwID0gTWF0aC5zcXJ0KHN0aWZmbmVzcyAvIG1hc3MpO1xuICB2YXIgemV0YSA9IGRhbXBpbmcgLyAoMiAqIE1hdGguc3FydChzdGlmZm5lc3MgKiBtYXNzKSk7XG4gIHZhciB3ZCA9IHpldGEgPCAxID8gdzAgKiBNYXRoLnNxcnQoMSAtIHpldGEgKiB6ZXRhKSA6IDA7XG4gIHZhciBhID0gMTtcbiAgdmFyIGIgPSB6ZXRhIDwgMSA/ICh6ZXRhICogdzAgKyAtdmVsb2NpdHkpIC8gd2QgOiAtdmVsb2NpdHkgKyB3MDtcblxuICBmdW5jdGlvbiBzb2x2ZXIodCkge1xuICAgIHZhciBwcm9ncmVzcyA9IGR1cmF0aW9uID8gKGR1cmF0aW9uICogdCkgLyAxMDAwIDogdDtcbiAgICBpZiAoemV0YSA8IDEpIHtcbiAgICAgIHByb2dyZXNzID0gTWF0aC5leHAoLXByb2dyZXNzICogemV0YSAqIHcwKSAqIChhICogTWF0aC5jb3Mod2QgKiBwcm9ncmVzcykgKyBiICogTWF0aC5zaW4od2QgKiBwcm9ncmVzcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzcyA9IChhICsgYiAqIHByb2dyZXNzKSAqIE1hdGguZXhwKC1wcm9ncmVzcyAqIHcwKTtcbiAgICB9XG4gICAgaWYgKHQgPT09IDAgfHwgdCA9PT0gMSkgeyByZXR1cm4gdDsgfVxuICAgIHJldHVybiAxIC0gcHJvZ3Jlc3M7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICB2YXIgY2FjaGVkID0gY2FjaGUuc3ByaW5nc1tzdHJpbmddO1xuICAgIGlmIChjYWNoZWQpIHsgcmV0dXJuIGNhY2hlZDsgfVxuICAgIHZhciBmcmFtZSA9IDEvNjtcbiAgICB2YXIgZWxhcHNlZCA9IDA7XG4gICAgdmFyIHJlc3QgPSAwO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIGVsYXBzZWQgKz0gZnJhbWU7XG4gICAgICBpZiAoc29sdmVyKGVsYXBzZWQpID09PSAxKSB7XG4gICAgICAgIHJlc3QrKztcbiAgICAgICAgaWYgKHJlc3QgPj0gMTYpIHsgYnJlYWs7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3QgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZHVyYXRpb24gPSBlbGFwc2VkICogZnJhbWUgKiAxMDAwO1xuICAgIGNhY2hlLnNwcmluZ3Nbc3RyaW5nXSA9IGR1cmF0aW9uO1xuICAgIHJldHVybiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiBkdXJhdGlvbiA/IHNvbHZlciA6IGdldER1cmF0aW9uO1xuXG59XG5cbi8vIEJhc2ljIHN0ZXBzIGVhc2luZyBpbXBsZW1lbnRhdGlvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9mci9kb2NzL1dlYi9DU1MvdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cblxuZnVuY3Rpb24gc3RlcHMoc3RlcHMpIHtcbiAgaWYgKCBzdGVwcyA9PT0gdm9pZCAwICkgc3RlcHMgPSAxMDtcblxuICByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIE1hdGguY2VpbCgobWluTWF4KHQsIDAuMDAwMDAxLCAxKSkgKiBzdGVwcykgKiAoMSAvIHN0ZXBzKTsgfTtcbn1cblxuLy8gQmV6aWVyRWFzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZ1xuXG52YXIgYmV6aWVyID0gKGZ1bmN0aW9uICgpIHtcblxuICB2YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xuICB2YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuXG4gIGZ1bmN0aW9uIEEoYUExLCBhQTIpIHsgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMSB9XG4gIGZ1bmN0aW9uIEIoYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIGFBMiAtIDYuMCAqIGFBMSB9XG4gIGZ1bmN0aW9uIEMoYUExKSAgICAgIHsgcmV0dXJuIDMuMCAqIGFBMSB9XG5cbiAgZnVuY3Rpb24gY2FsY0JlemllcihhVCwgYUExLCBhQTIpIHsgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUIH1cbiAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpIH1cblxuICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkgeyBhQiA9IGN1cnJlbnRUOyB9IGVsc2UgeyBhQSA9IGN1cnJlbnRUOyB9XG4gICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gMC4wMDAwMDAxICYmICsraSA8IDEwKTtcbiAgICByZXR1cm4gY3VycmVudFQ7XG4gIH1cblxuICBmdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgeyByZXR1cm4gYUd1ZXNzVDsgfVxuICAgICAgdmFyIGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgfVxuICAgIHJldHVybiBhR3Vlc3NUO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV6aWVyKG1YMSwgbVkxLCBtWDIsIG1ZMikge1xuXG4gICAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7IHJldHVybjsgfVxuICAgIHZhciBzYW1wbGVWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuXG4gICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuICAgICAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRURm9yWChhWCkge1xuXG4gICAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDA7XG4gICAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgIH1cblxuICAgICAgLS1jdXJyZW50U2FtcGxlO1xuXG4gICAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICB2YXIgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG4gICAgICB2YXIgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG5cbiAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gMC4wMDEpIHtcbiAgICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7IHJldHVybiB4OyB9XG4gICAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSAxKSB7IHJldHVybiB4OyB9XG4gICAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIGJlemllcjtcblxufSkoKTtcblxudmFyIHBlbm5lciA9IChmdW5jdGlvbiAoKSB7XG5cbiAgLy8gQmFzZWQgb24galF1ZXJ5IFVJJ3MgaW1wbGVtZW5hdGlvbiBvZiBlYXNpbmcgZXF1YXRpb25zIGZyb20gUm9iZXJ0IFBlbm5lciAoaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZylcblxuICB2YXIgZWFzZXMgPSB7IGxpbmVhcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH07IH0gfTtcblxuICB2YXIgZnVuY3Rpb25FYXNpbmdzID0ge1xuICAgIFNpbmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiAxIC0gTWF0aC5jb3ModCAqIE1hdGguUEkgLyAyKTsgfTsgfSxcbiAgICBDaXJjOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpOyB9OyB9LFxuICAgIEJhY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0ICogdCAqICgzICogdCAtIDIpOyB9OyB9LFxuICAgIEJvdW5jZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBwb3cyLCBiID0gNDtcbiAgICAgIHdoaWxlICh0IDwgKCggcG93MiA9IE1hdGgucG93KDIsIC0tYikpIC0gMSkgLyAxMSkge31cbiAgICAgIHJldHVybiAxIC8gTWF0aC5wb3coNCwgMyAtIGIpIC0gNy41NjI1ICogTWF0aC5wb3coKCBwb3cyICogMyAtIDIgKSAvIDIyIC0gdCwgMilcbiAgICB9OyB9LFxuICAgIEVsYXN0aWM6IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgICAgaWYgKCBhbXBsaXR1ZGUgPT09IHZvaWQgMCApIGFtcGxpdHVkZSA9IDE7XG4gICAgICBpZiAoIHBlcmlvZCA9PT0gdm9pZCAwICkgcGVyaW9kID0gLjU7XG5cbiAgICAgIHZhciBhID0gbWluTWF4KGFtcGxpdHVkZSwgMSwgMTApO1xuICAgICAgdmFyIHAgPSBtaW5NYXgocGVyaW9kLCAuMSwgMik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuICh0ID09PSAwIHx8IHQgPT09IDEpID8gdCA6IFxuICAgICAgICAgIC1hICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSAqIE1hdGguc2luKCgoKHQgLSAxKSAtIChwIC8gKE1hdGguUEkgKiAyKSAqIE1hdGguYXNpbigxIC8gYSkpKSAqIChNYXRoLlBJICogMikpIC8gcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBiYXNlRWFzaW5ncyA9IFsnUXVhZCcsICdDdWJpYycsICdRdWFydCcsICdRdWludCcsICdFeHBvJ107XG5cbiAgYmFzZUVhc2luZ3MuZm9yRWFjaChmdW5jdGlvbiAobmFtZSwgaSkge1xuICAgIGZ1bmN0aW9uRWFzaW5nc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiBNYXRoLnBvdyh0LCBpICsgMik7IH07IH07XG4gIH0pO1xuXG4gIE9iamVjdC5rZXlzKGZ1bmN0aW9uRWFzaW5ncykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBlYXNlSW4gPSBmdW5jdGlvbkVhc2luZ3NbbmFtZV07XG4gICAgZWFzZXNbJ2Vhc2VJbicgKyBuYW1lXSA9IGVhc2VJbjtcbiAgICBlYXNlc1snZWFzZU91dCcgKyBuYW1lXSA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gMSAtIGVhc2VJbihhLCBiKSgxIC0gdCk7IH07IH07XG4gICAgZWFzZXNbJ2Vhc2VJbk91dCcgKyBuYW1lXSA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCA8IDAuNSA/IGVhc2VJbihhLCBiKSh0ICogMikgLyAyIDogXG4gICAgICAxIC0gZWFzZUluKGEsIGIpKHQgKiAtMiArIDIpIC8gMjsgfTsgfTtcbiAgICBlYXNlc1snZWFzZU91dEluJyArIG5hbWVdID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0IDwgMC41ID8gKDEgLSBlYXNlSW4oYSwgYikoMSAtIHQgKiAyKSkgLyAyIDogXG4gICAgICAoZWFzZUluKGEsIGIpKHQgKiAyIC0gMSkgKyAxKSAvIDI7IH07IH07XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlcztcblxufSkoKTtcblxuZnVuY3Rpb24gcGFyc2VFYXNpbmdzKGVhc2luZywgZHVyYXRpb24pIHtcbiAgaWYgKGlzLmZuYyhlYXNpbmcpKSB7IHJldHVybiBlYXNpbmc7IH1cbiAgdmFyIG5hbWUgPSBlYXNpbmcuc3BsaXQoJygnKVswXTtcbiAgdmFyIGVhc2UgPSBwZW5uZXJbbmFtZV07XG4gIHZhciBhcmdzID0gcGFyc2VFYXNpbmdQYXJhbWV0ZXJzKGVhc2luZyk7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ3NwcmluZycgOiByZXR1cm4gc3ByaW5nKGVhc2luZywgZHVyYXRpb24pO1xuICAgIGNhc2UgJ2N1YmljQmV6aWVyJyA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhiZXppZXIsIGFyZ3MpO1xuICAgIGNhc2UgJ3N0ZXBzJyA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhzdGVwcywgYXJncyk7XG4gICAgZGVmYXVsdCA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhlYXNlLCBhcmdzKTtcbiAgfVxufVxuXG4vLyBTdHJpbmdzXG5cbmZ1bmN0aW9uIHNlbGVjdFN0cmluZyhzdHIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHN0cik7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLy8gQXJyYXlzXG5cbmZ1bmN0aW9uIGZpbHRlckFycmF5KGFyciwgY2FsbGJhY2spIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaSBpbiBhcnIpIHtcbiAgICAgIHZhciB2YWwgPSBhcnJbaV07XG4gICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWwsIGksIGFycikpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkFycmF5KGFycikge1xuICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5jb25jYXQoaXMuYXJyKGIpID8gZmxhdHRlbkFycmF5KGIpIDogYik7IH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShvKSB7XG4gIGlmIChpcy5hcnIobykpIHsgcmV0dXJuIG87IH1cbiAgaWYgKGlzLnN0cihvKSkgeyBvID0gc2VsZWN0U3RyaW5nKG8pIHx8IG87IH1cbiAgaWYgKG8gaW5zdGFuY2VvZiBOb2RlTGlzdCB8fCBvIGluc3RhbmNlb2YgSFRNTENvbGxlY3Rpb24pIHsgcmV0dXJuIFtdLnNsaWNlLmNhbGwobyk7IH1cbiAgcmV0dXJuIFtvXTtcbn1cblxuZnVuY3Rpb24gYXJyYXlDb250YWlucyhhcnIsIHZhbCkge1xuICByZXR1cm4gYXJyLnNvbWUoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgPT09IHZhbDsgfSk7XG59XG5cbi8vIE9iamVjdHNcblxuZnVuY3Rpb24gY2xvbmVPYmplY3Qobykge1xuICB2YXIgY2xvbmUgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBvKSB7IGNsb25lW3BdID0gb1twXTsgfVxuICByZXR1cm4gY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VPYmplY3RQcm9wcyhvMSwgbzIpIHtcbiAgdmFyIG8gPSBjbG9uZU9iamVjdChvMSk7XG4gIGZvciAodmFyIHAgaW4gbzEpIHsgb1twXSA9IG8yLmhhc093blByb3BlcnR5KHApID8gbzJbcF0gOiBvMVtwXTsgfVxuICByZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3RzKG8xLCBvMikge1xuICB2YXIgbyA9IGNsb25lT2JqZWN0KG8xKTtcbiAgZm9yICh2YXIgcCBpbiBvMikgeyBvW3BdID0gaXMudW5kKG8xW3BdKSA/IG8yW3BdIDogbzFbcF07IH1cbiAgcmV0dXJuIG87XG59XG5cbi8vIENvbG9yc1xuXG5mdW5jdGlvbiByZ2JUb1JnYmEocmdiVmFsdWUpIHtcbiAgdmFyIHJnYiA9IC9yZ2JcXCgoXFxkKyxcXHMqW1xcZF0rLFxccypbXFxkXSspXFwpL2cuZXhlYyhyZ2JWYWx1ZSk7XG4gIHJldHVybiByZ2IgPyAoXCJyZ2JhKFwiICsgKHJnYlsxXSkgKyBcIiwxKVwiKSA6IHJnYlZhbHVlO1xufVxuXG5mdW5jdGlvbiBoZXhUb1JnYmEoaGV4VmFsdWUpIHtcbiAgdmFyIHJneCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XG4gIHZhciBoZXggPSBoZXhWYWx1ZS5yZXBsYWNlKHJneCwgZnVuY3Rpb24gKG0sIHIsIGcsIGIpIHsgcmV0dXJuIHIgKyByICsgZyArIGcgKyBiICsgYjsgfSApO1xuICB2YXIgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gIHZhciByID0gcGFyc2VJbnQocmdiWzFdLCAxNik7XG4gIHZhciBnID0gcGFyc2VJbnQocmdiWzJdLCAxNik7XG4gIHZhciBiID0gcGFyc2VJbnQocmdiWzNdLCAxNik7XG4gIHJldHVybiAoXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLDEpXCIpO1xufVxuXG5mdW5jdGlvbiBoc2xUb1JnYmEoaHNsVmFsdWUpIHtcbiAgdmFyIGhzbCA9IC9oc2xcXCgoXFxkKyksXFxzKihbXFxkLl0rKSUsXFxzKihbXFxkLl0rKSVcXCkvZy5leGVjKGhzbFZhbHVlKSB8fCAvaHNsYVxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspXFwpL2cuZXhlYyhoc2xWYWx1ZSk7XG4gIHZhciBoID0gcGFyc2VJbnQoaHNsWzFdLCAxMCkgLyAzNjA7XG4gIHZhciBzID0gcGFyc2VJbnQoaHNsWzJdLCAxMCkgLyAxMDA7XG4gIHZhciBsID0gcGFyc2VJbnQoaHNsWzNdLCAxMCkgLyAxMDA7XG4gIHZhciBhID0gaHNsWzRdIHx8IDE7XG4gIGZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgdCkge1xuICAgIGlmICh0IDwgMCkgeyB0ICs9IDE7IH1cbiAgICBpZiAodCA+IDEpIHsgdCAtPSAxOyB9XG4gICAgaWYgKHQgPCAxLzYpIHsgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7IH1cbiAgICBpZiAodCA8IDEvMikgeyByZXR1cm4gcTsgfVxuICAgIGlmICh0IDwgMi8zKSB7IHJldHVybiBwICsgKHEgLSBwKSAqICgyLzMgLSB0KSAqIDY7IH1cbiAgICByZXR1cm4gcDtcbiAgfVxuICB2YXIgciwgZywgYjtcbiAgaWYgKHMgPT0gMCkge1xuICAgIHIgPSBnID0gYiA9IGw7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpO1xuICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxLzMpO1xuICB9XG4gIHJldHVybiAoXCJyZ2JhKFwiICsgKHIgKiAyNTUpICsgXCIsXCIgKyAoZyAqIDI1NSkgKyBcIixcIiArIChiICogMjU1KSArIFwiLFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gY29sb3JUb1JnYih2YWwpIHtcbiAgaWYgKGlzLnJnYih2YWwpKSB7IHJldHVybiByZ2JUb1JnYmEodmFsKTsgfVxuICBpZiAoaXMuaGV4KHZhbCkpIHsgcmV0dXJuIGhleFRvUmdiYSh2YWwpOyB9XG4gIGlmIChpcy5oc2wodmFsKSkgeyByZXR1cm4gaHNsVG9SZ2JhKHZhbCk7IH1cbn1cblxuLy8gVW5pdHNcblxuZnVuY3Rpb24gZ2V0VW5pdCh2YWwpIHtcbiAgdmFyIHNwbGl0ID0gL1srLV0/XFxkKlxcLj9cXGQrKD86XFwuXFxkKyk/KD86W2VFXVsrLV0/XFxkKyk/KCV8cHh8cHR8ZW18cmVtfGlufGNtfG1tfGV4fGNofHBjfHZ3fHZofHZtaW58dm1heHxkZWd8cmFkfHR1cm4pPyQvLmV4ZWModmFsKTtcbiAgaWYgKHNwbGl0KSB7IHJldHVybiBzcGxpdFsxXTsgfVxufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1Vbml0KHByb3BOYW1lKSB7XG4gIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3RyYW5zbGF0ZScpIHx8IHByb3BOYW1lID09PSAncGVyc3BlY3RpdmUnKSB7IHJldHVybiAncHgnOyB9XG4gIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3JvdGF0ZScpIHx8IHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAnc2tldycpKSB7IHJldHVybiAnZGVnJzsgfVxufVxuXG4vLyBWYWx1ZXNcblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25WYWx1ZSh2YWwsIGFuaW1hdGFibGUpIHtcbiAgaWYgKCFpcy5mbmModmFsKSkgeyByZXR1cm4gdmFsOyB9XG4gIHJldHVybiB2YWwoYW5pbWF0YWJsZS50YXJnZXQsIGFuaW1hdGFibGUuaWQsIGFuaW1hdGFibGUudG90YWwpO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUoZWwsIHByb3ApIHtcbiAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShwcm9wKTtcbn1cblxuZnVuY3Rpb24gY29udmVydFB4VG9Vbml0KGVsLCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgdmFsdWVVbml0ID0gZ2V0VW5pdCh2YWx1ZSk7XG4gIGlmIChhcnJheUNvbnRhaW5zKFt1bml0LCAnZGVnJywgJ3JhZCcsICd0dXJuJ10sIHZhbHVlVW5pdCkpIHsgcmV0dXJuIHZhbHVlOyB9XG4gIHZhciBjYWNoZWQgPSBjYWNoZS5DU1NbdmFsdWUgKyB1bml0XTtcbiAgaWYgKCFpcy51bmQoY2FjaGVkKSkgeyByZXR1cm4gY2FjaGVkOyB9XG4gIHZhciBiYXNlbGluZSA9IDEwMDtcbiAgdmFyIHRlbXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwudGFnTmFtZSk7XG4gIHZhciBwYXJlbnRFbCA9IChlbC5wYXJlbnROb2RlICYmIChlbC5wYXJlbnROb2RlICE9PSBkb2N1bWVudCkpID8gZWwucGFyZW50Tm9kZSA6IGRvY3VtZW50LmJvZHk7XG4gIHBhcmVudEVsLmFwcGVuZENoaWxkKHRlbXBFbCk7XG4gIHRlbXBFbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHRlbXBFbC5zdHlsZS53aWR0aCA9IGJhc2VsaW5lICsgdW5pdDtcbiAgdmFyIGZhY3RvciA9IGJhc2VsaW5lIC8gdGVtcEVsLm9mZnNldFdpZHRoO1xuICBwYXJlbnRFbC5yZW1vdmVDaGlsZCh0ZW1wRWwpO1xuICB2YXIgY29udmVydGVkVW5pdCA9IGZhY3RvciAqIHBhcnNlRmxvYXQodmFsdWUpO1xuICBjYWNoZS5DU1NbdmFsdWUgKyB1bml0XSA9IGNvbnZlcnRlZFVuaXQ7XG4gIHJldHVybiBjb252ZXJ0ZWRVbml0O1xufVxuXG5mdW5jdGlvbiBnZXRDU1NWYWx1ZShlbCwgcHJvcCwgdW5pdCkge1xuICBpZiAocHJvcCBpbiBlbC5zdHlsZSkge1xuICAgIHZhciB1cHBlcmNhc2VQcm9wTmFtZSA9IHByb3AucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgdmFsdWUgPSBlbC5zdHlsZVtwcm9wXSB8fCBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHVwcGVyY2FzZVByb3BOYW1lKSB8fCAnMCc7XG4gICAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvblR5cGUoZWwsIHByb3ApIHtcbiAgaWYgKGlzLmRvbShlbCkgJiYgIWlzLmlucChlbCkgJiYgKCFpcy5uaWwoZ2V0QXR0cmlidXRlKGVsLCBwcm9wKSkgfHwgKGlzLnN2ZyhlbCkgJiYgZWxbcHJvcF0pKSkgeyByZXR1cm4gJ2F0dHJpYnV0ZSc7IH1cbiAgaWYgKGlzLmRvbShlbCkgJiYgYXJyYXlDb250YWlucyh2YWxpZFRyYW5zZm9ybXMsIHByb3ApKSB7IHJldHVybiAndHJhbnNmb3JtJzsgfVxuICBpZiAoaXMuZG9tKGVsKSAmJiAocHJvcCAhPT0gJ3RyYW5zZm9ybScgJiYgZ2V0Q1NTVmFsdWUoZWwsIHByb3ApKSkgeyByZXR1cm4gJ2Nzcyc7IH1cbiAgaWYgKGVsW3Byb3BdICE9IG51bGwpIHsgcmV0dXJuICdvYmplY3QnOyB9XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRUcmFuc2Zvcm1zKGVsKSB7XG4gIGlmICghaXMuZG9tKGVsKSkgeyByZXR1cm47IH1cbiAgdmFyIHN0ciA9IGVsLnN0eWxlLnRyYW5zZm9ybSB8fCAnJztcbiAgdmFyIHJlZyAgPSAvKFxcdyspXFwoKFteKV0qKVxcKS9nO1xuICB2YXIgdHJhbnNmb3JtcyA9IG5ldyBNYXAoKTtcbiAgdmFyIG07IHdoaWxlIChtID0gcmVnLmV4ZWMoc3RyKSkgeyB0cmFuc2Zvcm1zLnNldChtWzFdLCBtWzJdKTsgfVxuICByZXR1cm4gdHJhbnNmb3Jtcztcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtVmFsdWUoZWwsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KSB7XG4gIHZhciBkZWZhdWx0VmFsID0gc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdzY2FsZScpID8gMSA6IDAgKyBnZXRUcmFuc2Zvcm1Vbml0KHByb3BOYW1lKTtcbiAgdmFyIHZhbHVlID0gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpLmdldChwcm9wTmFtZSkgfHwgZGVmYXVsdFZhbDtcbiAgaWYgKGFuaW1hdGFibGUpIHtcbiAgICBhbmltYXRhYmxlLnRyYW5zZm9ybXMubGlzdC5zZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICBhbmltYXRhYmxlLnRyYW5zZm9ybXNbJ2xhc3QnXSA9IHByb3BOYW1lO1xuICB9XG4gIHJldHVybiB1bml0ID8gY29udmVydFB4VG9Vbml0KGVsLCB2YWx1ZSwgdW5pdCkgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCB1bml0LCBhbmltYXRhYmxlKSB7XG4gIHN3aXRjaCAoZ2V0QW5pbWF0aW9uVHlwZSh0YXJnZXQsIHByb3BOYW1lKSkge1xuICAgIGNhc2UgJ3RyYW5zZm9ybSc6IHJldHVybiBnZXRUcmFuc2Zvcm1WYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KTtcbiAgICBjYXNlICdjc3MnOiByZXR1cm4gZ2V0Q1NTVmFsdWUodGFyZ2V0LCBwcm9wTmFtZSwgdW5pdCk7XG4gICAgY2FzZSAnYXR0cmlidXRlJzogcmV0dXJuIGdldEF0dHJpYnV0ZSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICBkZWZhdWx0OiByZXR1cm4gdGFyZ2V0W3Byb3BOYW1lXSB8fCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlVmFsdWUodG8sIGZyb20pIHtcbiAgdmFyIG9wZXJhdG9yID0gL14oXFwqPXxcXCs9fC09KS8uZXhlYyh0byk7XG4gIGlmICghb3BlcmF0b3IpIHsgcmV0dXJuIHRvOyB9XG4gIHZhciB1ID0gZ2V0VW5pdCh0bykgfHwgMDtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KGZyb20pO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQodG8ucmVwbGFjZShvcGVyYXRvclswXSwgJycpKTtcbiAgc3dpdGNoIChvcGVyYXRvclswXVswXSkge1xuICAgIGNhc2UgJysnOiByZXR1cm4geCArIHkgKyB1O1xuICAgIGNhc2UgJy0nOiByZXR1cm4geCAtIHkgKyB1O1xuICAgIGNhc2UgJyonOiByZXR1cm4geCAqIHkgKyB1O1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVmFsdWUodmFsLCB1bml0KSB7XG4gIGlmIChpcy5jb2wodmFsKSkgeyByZXR1cm4gY29sb3JUb1JnYih2YWwpOyB9XG4gIGlmICgvXFxzL2cudGVzdCh2YWwpKSB7IHJldHVybiB2YWw7IH1cbiAgdmFyIG9yaWdpbmFsVW5pdCA9IGdldFVuaXQodmFsKTtcbiAgdmFyIHVuaXRMZXNzID0gb3JpZ2luYWxVbml0ID8gdmFsLnN1YnN0cigwLCB2YWwubGVuZ3RoIC0gb3JpZ2luYWxVbml0Lmxlbmd0aCkgOiB2YWw7XG4gIGlmICh1bml0KSB7IHJldHVybiB1bml0TGVzcyArIHVuaXQ7IH1cbiAgcmV0dXJuIHVuaXRMZXNzO1xufVxuXG4vLyBnZXRUb3RhbExlbmd0aCgpIGVxdWl2YWxlbnQgZm9yIGNpcmNsZSwgcmVjdCwgcG9seWxpbmUsIHBvbHlnb24gYW5kIGxpbmUgc2hhcGVzXG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vU2ViTGFtYmxhLzNlMDU1MGM0OTZjMjM2NzA5NzQ0XG5cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSk7XG59XG5cbmZ1bmN0aW9uIGdldENpcmNsZUxlbmd0aChlbCkge1xuICByZXR1cm4gTWF0aC5QSSAqIDIgKiBnZXRBdHRyaWJ1dGUoZWwsICdyJyk7XG59XG5cbmZ1bmN0aW9uIGdldFJlY3RMZW5ndGgoZWwpIHtcbiAgcmV0dXJuIChnZXRBdHRyaWJ1dGUoZWwsICd3aWR0aCcpICogMikgKyAoZ2V0QXR0cmlidXRlKGVsLCAnaGVpZ2h0JykgKiAyKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGluZUxlbmd0aChlbCkge1xuICByZXR1cm4gZ2V0RGlzdGFuY2UoXG4gICAge3g6IGdldEF0dHJpYnV0ZShlbCwgJ3gxJyksIHk6IGdldEF0dHJpYnV0ZShlbCwgJ3kxJyl9LCBcbiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDInKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTInKX1cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9seWxpbmVMZW5ndGgoZWwpIHtcbiAgdmFyIHBvaW50cyA9IGVsLnBvaW50cztcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcbiAgdmFyIHByZXZpb3VzUG9zO1xuICBmb3IgKHZhciBpID0gMCA7IGkgPCBwb2ludHMubnVtYmVyT2ZJdGVtczsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnRQb3MgPSBwb2ludHMuZ2V0SXRlbShpKTtcbiAgICBpZiAoaSA+IDApIHsgdG90YWxMZW5ndGggKz0gZ2V0RGlzdGFuY2UocHJldmlvdXNQb3MsIGN1cnJlbnRQb3MpOyB9XG4gICAgcHJldmlvdXNQb3MgPSBjdXJyZW50UG9zO1xuICB9XG4gIHJldHVybiB0b3RhbExlbmd0aDtcbn1cblxuZnVuY3Rpb24gZ2V0UG9seWdvbkxlbmd0aChlbCkge1xuICB2YXIgcG9pbnRzID0gZWwucG9pbnRzO1xuICByZXR1cm4gZ2V0UG9seWxpbmVMZW5ndGgoZWwpICsgZ2V0RGlzdGFuY2UocG9pbnRzLmdldEl0ZW0ocG9pbnRzLm51bWJlck9mSXRlbXMgLSAxKSwgcG9pbnRzLmdldEl0ZW0oMCkpO1xufVxuXG4vLyBQYXRoIGFuaW1hdGlvblxuXG5mdW5jdGlvbiBnZXRUb3RhbExlbmd0aChlbCkge1xuICBpZiAoZWwuZ2V0VG90YWxMZW5ndGgpIHsgcmV0dXJuIGVsLmdldFRvdGFsTGVuZ3RoKCk7IH1cbiAgc3dpdGNoKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2NpcmNsZSc6IHJldHVybiBnZXRDaXJjbGVMZW5ndGgoZWwpO1xuICAgIGNhc2UgJ3JlY3QnOiByZXR1cm4gZ2V0UmVjdExlbmd0aChlbCk7XG4gICAgY2FzZSAnbGluZSc6IHJldHVybiBnZXRMaW5lTGVuZ3RoKGVsKTtcbiAgICBjYXNlICdwb2x5bGluZSc6IHJldHVybiBnZXRQb2x5bGluZUxlbmd0aChlbCk7XG4gICAgY2FzZSAncG9seWdvbic6IHJldHVybiBnZXRQb2x5Z29uTGVuZ3RoKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXREYXNob2Zmc2V0KGVsKSB7XG4gIHZhciBwYXRoTGVuZ3RoID0gZ2V0VG90YWxMZW5ndGgoZWwpO1xuICBlbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwYXRoTGVuZ3RoKTtcbiAgcmV0dXJuIHBhdGhMZW5ndGg7XG59XG5cbi8vIE1vdGlvbiBwYXRoXG5cbmZ1bmN0aW9uIGdldFBhcmVudFN2Z0VsKGVsKSB7XG4gIHZhciBwYXJlbnRFbCA9IGVsLnBhcmVudE5vZGU7XG4gIHdoaWxlIChpcy5zdmcocGFyZW50RWwpKSB7XG4gICAgaWYgKCFpcy5zdmcocGFyZW50RWwucGFyZW50Tm9kZSkpIHsgYnJlYWs7IH1cbiAgICBwYXJlbnRFbCA9IHBhcmVudEVsLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHBhcmVudEVsO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRTdmcocGF0aEVsLCBzdmdEYXRhKSB7XG4gIHZhciBzdmcgPSBzdmdEYXRhIHx8IHt9O1xuICB2YXIgcGFyZW50U3ZnRWwgPSBzdmcuZWwgfHwgZ2V0UGFyZW50U3ZnRWwocGF0aEVsKTtcbiAgdmFyIHJlY3QgPSBwYXJlbnRTdmdFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHZpZXdCb3hBdHRyID0gZ2V0QXR0cmlidXRlKHBhcmVudFN2Z0VsLCAndmlld0JveCcpO1xuICB2YXIgd2lkdGggPSByZWN0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gIHZhciB2aWV3Qm94ID0gc3ZnLnZpZXdCb3ggfHwgKHZpZXdCb3hBdHRyID8gdmlld0JveEF0dHIuc3BsaXQoJyAnKSA6IFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7XG4gIHJldHVybiB7XG4gICAgZWw6IHBhcmVudFN2Z0VsLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgeDogdmlld0JveFswXSAvIDEsXG4gICAgeTogdmlld0JveFsxXSAvIDEsXG4gICAgdzogd2lkdGgsXG4gICAgaDogaGVpZ2h0LFxuICAgIHZXOiB2aWV3Qm94WzJdLFxuICAgIHZIOiB2aWV3Qm94WzNdXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aChwYXRoLCBwZXJjZW50KSB7XG4gIHZhciBwYXRoRWwgPSBpcy5zdHIocGF0aCkgPyBzZWxlY3RTdHJpbmcocGF0aClbMF0gOiBwYXRoO1xuICB2YXIgcCA9IHBlcmNlbnQgfHwgMTAwO1xuICByZXR1cm4gZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvcGVydHk6IHByb3BlcnR5LFxuICAgICAgZWw6IHBhdGhFbCxcbiAgICAgIHN2ZzogZ2V0UGFyZW50U3ZnKHBhdGhFbCksXG4gICAgICB0b3RhbExlbmd0aDogZ2V0VG90YWxMZW5ndGgocGF0aEVsKSAqIChwIC8gMTAwKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXRoUHJvZ3Jlc3MocGF0aCwgcHJvZ3Jlc3MsIGlzUGF0aFRhcmdldEluc2lkZVNWRykge1xuICBmdW5jdGlvbiBwb2ludChvZmZzZXQpIHtcbiAgICBpZiAoIG9mZnNldCA9PT0gdm9pZCAwICkgb2Zmc2V0ID0gMDtcblxuICAgIHZhciBsID0gcHJvZ3Jlc3MgKyBvZmZzZXQgPj0gMSA/IHByb2dyZXNzICsgb2Zmc2V0IDogMDtcbiAgICByZXR1cm4gcGF0aC5lbC5nZXRQb2ludEF0TGVuZ3RoKGwpO1xuICB9XG4gIHZhciBzdmcgPSBnZXRQYXJlbnRTdmcocGF0aC5lbCwgcGF0aC5zdmcpO1xuICB2YXIgcCA9IHBvaW50KCk7XG4gIHZhciBwMCA9IHBvaW50KC0xKTtcbiAgdmFyIHAxID0gcG9pbnQoKzEpO1xuICB2YXIgc2NhbGVYID0gaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHID8gMSA6IHN2Zy53IC8gc3ZnLnZXO1xuICB2YXIgc2NhbGVZID0gaXNQYXRoVGFyZ2V0SW5zaWRlU1ZHID8gMSA6IHN2Zy5oIC8gc3ZnLnZIO1xuICBzd2l0Y2ggKHBhdGgucHJvcGVydHkpIHtcbiAgICBjYXNlICd4JzogcmV0dXJuIChwLnggLSBzdmcueCkgKiBzY2FsZVg7XG4gICAgY2FzZSAneSc6IHJldHVybiAocC55IC0gc3ZnLnkpICogc2NhbGVZO1xuICAgIGNhc2UgJ2FuZ2xlJzogcmV0dXJuIE1hdGguYXRhbjIocDEueSAtIHAwLnksIHAxLnggLSBwMC54KSAqIDE4MCAvIE1hdGguUEk7XG4gIH1cbn1cblxuLy8gRGVjb21wb3NlIHZhbHVlXG5cbmZ1bmN0aW9uIGRlY29tcG9zZVZhbHVlKHZhbCwgdW5pdCkge1xuICAvLyBjb25zdCByZ3ggPSAvLT9cXGQqXFwuP1xcZCsvZzsgLy8gaGFuZGxlcyBiYXNpYyBudW1iZXJzXG4gIC8vIGNvbnN0IHJneCA9IC9bKy1dP1xcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT8vZzsgLy8gaGFuZGxlcyBleHBvbmVudHMgbm90YXRpb25cbiAgdmFyIHJneCA9IC9bKy1dP1xcZCpcXC4/XFxkKyg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPy9nOyAvLyBoYW5kbGVzIGV4cG9uZW50cyBub3RhdGlvblxuICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVZhbHVlKChpcy5wdGgodmFsKSA/IHZhbC50b3RhbExlbmd0aCA6IHZhbCksIHVuaXQpICsgJyc7XG4gIHJldHVybiB7XG4gICAgb3JpZ2luYWw6IHZhbHVlLFxuICAgIG51bWJlcnM6IHZhbHVlLm1hdGNoKHJneCkgPyB2YWx1ZS5tYXRjaChyZ3gpLm1hcChOdW1iZXIpIDogWzBdLFxuICAgIHN0cmluZ3M6IChpcy5zdHIodmFsKSB8fCB1bml0KSA/IHZhbHVlLnNwbGl0KHJneCkgOiBbXVxuICB9XG59XG5cbi8vIEFuaW1hdGFibGVzXG5cbmZ1bmN0aW9uIHBhcnNlVGFyZ2V0cyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXRzQXJyYXkgPSB0YXJnZXRzID8gKGZsYXR0ZW5BcnJheShpcy5hcnIodGFyZ2V0cykgPyB0YXJnZXRzLm1hcCh0b0FycmF5KSA6IHRvQXJyYXkodGFyZ2V0cykpKSA6IFtdO1xuICByZXR1cm4gZmlsdGVyQXJyYXkodGFyZ2V0c0FycmF5LCBmdW5jdGlvbiAoaXRlbSwgcG9zLCBzZWxmKSB7IHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT09IHBvczsgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGFibGVzKHRhcmdldHMpIHtcbiAgdmFyIHBhcnNlZCA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgcmV0dXJuIHBhcnNlZC5tYXAoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICByZXR1cm4ge3RhcmdldDogdCwgaWQ6IGksIHRvdGFsOiBwYXJzZWQubGVuZ3RoLCB0cmFuc2Zvcm1zOiB7IGxpc3Q6IGdldEVsZW1lbnRUcmFuc2Zvcm1zKHQpIH0gfTtcbiAgfSk7XG59XG5cbi8vIFByb3BlcnRpZXNcblxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydHlUd2VlbnMocHJvcCwgdHdlZW5TZXR0aW5ncykge1xuICB2YXIgc2V0dGluZ3MgPSBjbG9uZU9iamVjdCh0d2VlblNldHRpbmdzKTtcbiAgLy8gT3ZlcnJpZGUgZHVyYXRpb24gaWYgZWFzaW5nIGlzIGEgc3ByaW5nXG4gIGlmICgvXnNwcmluZy8udGVzdChzZXR0aW5ncy5lYXNpbmcpKSB7IHNldHRpbmdzLmR1cmF0aW9uID0gc3ByaW5nKHNldHRpbmdzLmVhc2luZyk7IH1cbiAgaWYgKGlzLmFycihwcm9wKSkge1xuICAgIHZhciBsID0gcHJvcC5sZW5ndGg7XG4gICAgdmFyIGlzRnJvbVRvID0gKGwgPT09IDIgJiYgIWlzLm9iaihwcm9wWzBdKSk7XG4gICAgaWYgKCFpc0Zyb21Ubykge1xuICAgICAgLy8gRHVyYXRpb24gZGl2aWRlZCBieSB0aGUgbnVtYmVyIG9mIHR3ZWVuc1xuICAgICAgaWYgKCFpcy5mbmModHdlZW5TZXR0aW5ncy5kdXJhdGlvbikpIHsgc2V0dGluZ3MuZHVyYXRpb24gPSB0d2VlblNldHRpbmdzLmR1cmF0aW9uIC8gbDsgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcmFuc2Zvcm0gW2Zyb20sIHRvXSB2YWx1ZXMgc2hvcnRoYW5kIHRvIGEgdmFsaWQgdHdlZW4gdmFsdWVcbiAgICAgIHByb3AgPSB7dmFsdWU6IHByb3B9O1xuICAgIH1cbiAgfVxuICB2YXIgcHJvcEFycmF5ID0gaXMuYXJyKHByb3ApID8gcHJvcCA6IFtwcm9wXTtcbiAgcmV0dXJuIHByb3BBcnJheS5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICB2YXIgb2JqID0gKGlzLm9iaih2KSAmJiAhaXMucHRoKHYpKSA/IHYgOiB7dmFsdWU6IHZ9O1xuICAgIC8vIERlZmF1bHQgZGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgZmlyc3QgdHdlZW5cbiAgICBpZiAoaXMudW5kKG9iai5kZWxheSkpIHsgb2JqLmRlbGF5ID0gIWkgPyB0d2VlblNldHRpbmdzLmRlbGF5IDogMDsgfVxuICAgIC8vIERlZmF1bHQgZW5kRGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgbGFzdCB0d2VlblxuICAgIGlmIChpcy51bmQob2JqLmVuZERlbGF5KSkgeyBvYmouZW5kRGVsYXkgPSBpID09PSBwcm9wQXJyYXkubGVuZ3RoIC0gMSA/IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXkgOiAwOyB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSkubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBtZXJnZU9iamVjdHMoaywgc2V0dGluZ3MpOyB9KTtcbn1cblxuXG5mdW5jdGlvbiBmbGF0dGVuS2V5ZnJhbWVzKGtleWZyYW1lcykge1xuICB2YXIgcHJvcGVydHlOYW1lcyA9IGZpbHRlckFycmF5KGZsYXR0ZW5BcnJheShrZXlmcmFtZXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIE9iamVjdC5rZXlzKGtleSk7IH0pKSwgZnVuY3Rpb24gKHApIHsgcmV0dXJuIGlzLmtleShwKTsgfSlcbiAgLnJlZHVjZShmdW5jdGlvbiAoYSxiKSB7IGlmIChhLmluZGV4T2YoYikgPCAwKSB7IGEucHVzaChiKTsgfSByZXR1cm4gYTsgfSwgW10pO1xuICB2YXIgcHJvcGVydGllcyA9IHt9O1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggaSApIHtcbiAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eU5hbWVzW2ldO1xuICAgIHByb3BlcnRpZXNbcHJvcE5hbWVdID0ga2V5ZnJhbWVzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbmV3S2V5ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGtleSkge1xuICAgICAgICBpZiAoaXMua2V5KHApKSB7XG4gICAgICAgICAgaWYgKHAgPT0gcHJvcE5hbWUpIHsgbmV3S2V5LnZhbHVlID0ga2V5W3BdOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3S2V5W3BdID0ga2V5W3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3S2V5O1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlOYW1lcy5sZW5ndGg7IGkrKykgbG9vcCggaSApO1xuICByZXR1cm4gcHJvcGVydGllcztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpIHtcbiAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgdmFyIGtleWZyYW1lcyA9IHBhcmFtcy5rZXlmcmFtZXM7XG4gIGlmIChrZXlmcmFtZXMpIHsgcGFyYW1zID0gbWVyZ2VPYmplY3RzKGZsYXR0ZW5LZXlmcmFtZXMoa2V5ZnJhbWVzKSwgcGFyYW1zKTsgfVxuICBmb3IgKHZhciBwIGluIHBhcmFtcykge1xuICAgIGlmIChpcy5rZXkocCkpIHtcbiAgICAgIHByb3BlcnRpZXMucHVzaCh7XG4gICAgICAgIG5hbWU6IHAsXG4gICAgICAgIHR3ZWVuczogbm9ybWFsaXplUHJvcGVydHlUd2VlbnMocGFyYW1zW3BdLCB0d2VlblNldHRpbmdzKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wZXJ0aWVzO1xufVxuXG4vLyBUd2VlbnNcblxuZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5WYWx1ZXModHdlZW4sIGFuaW1hdGFibGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiB0d2Vlbikge1xuICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUodHdlZW5bcF0sIGFuaW1hdGFibGUpO1xuICAgIGlmIChpcy5hcnIodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gZ2V0RnVuY3Rpb25WYWx1ZSh2LCBhbmltYXRhYmxlKTsgfSk7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAxKSB7IHZhbHVlID0gdmFsdWVbMF07IH1cbiAgICB9XG4gICAgdFtwXSA9IHZhbHVlO1xuICB9XG4gIHQuZHVyYXRpb24gPSBwYXJzZUZsb2F0KHQuZHVyYXRpb24pO1xuICB0LmRlbGF5ID0gcGFyc2VGbG9hdCh0LmRlbGF5KTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3ZWVucyhwcm9wLCBhbmltYXRhYmxlKSB7XG4gIHZhciBwcmV2aW91c1R3ZWVuO1xuICByZXR1cm4gcHJvcC50d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHR3ZWVuID0gbm9ybWFsaXplVHdlZW5WYWx1ZXModCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHR3ZWVuVmFsdWUgPSB0d2Vlbi52YWx1ZTtcbiAgICB2YXIgdG8gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzFdIDogdHdlZW5WYWx1ZTtcbiAgICB2YXIgdG9Vbml0ID0gZ2V0VW5pdCh0byk7XG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUsIHRvVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi50by5vcmlnaW5hbCA6IG9yaWdpbmFsVmFsdWU7XG4gICAgdmFyIGZyb20gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzBdIDogcHJldmlvdXNWYWx1ZTtcbiAgICB2YXIgZnJvbVVuaXQgPSBnZXRVbml0KGZyb20pIHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7XG4gICAgdmFyIHVuaXQgPSB0b1VuaXQgfHwgZnJvbVVuaXQ7XG4gICAgaWYgKGlzLnVuZCh0bykpIHsgdG8gPSBwcmV2aW91c1ZhbHVlOyB9XG4gICAgdHdlZW4uZnJvbSA9IGRlY29tcG9zZVZhbHVlKGZyb20sIHVuaXQpO1xuICAgIHR3ZWVuLnRvID0gZGVjb21wb3NlVmFsdWUoZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSksIHVuaXQpO1xuICAgIHR3ZWVuLnN0YXJ0ID0gcHJldmlvdXNUd2VlbiA/IHByZXZpb3VzVHdlZW4uZW5kIDogMDtcbiAgICB0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydCArIHR3ZWVuLmRlbGF5ICsgdHdlZW4uZHVyYXRpb24gKyB0d2Vlbi5lbmREZWxheTtcbiAgICB0d2Vlbi5lYXNpbmcgPSBwYXJzZUVhc2luZ3ModHdlZW4uZWFzaW5nLCB0d2Vlbi5kdXJhdGlvbik7XG4gICAgdHdlZW4uaXNQYXRoID0gaXMucHRoKHR3ZWVuVmFsdWUpO1xuICAgIHR3ZWVuLmlzUGF0aFRhcmdldEluc2lkZVNWRyA9IHR3ZWVuLmlzUGF0aCAmJiBpcy5zdmcoYW5pbWF0YWJsZS50YXJnZXQpO1xuICAgIHR3ZWVuLmlzQ29sb3IgPSBpcy5jb2wodHdlZW4uZnJvbS5vcmlnaW5hbCk7XG4gICAgaWYgKHR3ZWVuLmlzQ29sb3IpIHsgdHdlZW4ucm91bmQgPSAxOyB9XG4gICAgcHJldmlvdXNUd2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfSk7XG59XG5cbi8vIFR3ZWVuIHByb2dyZXNzXG5cbnZhciBzZXRQcm9ncmVzc1ZhbHVlID0ge1xuICBjc3M6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnN0eWxlW3BdID0gdjsgfSxcbiAgYXR0cmlidXRlOiBmdW5jdGlvbiAodCwgcCwgdikgeyByZXR1cm4gdC5zZXRBdHRyaWJ1dGUocCwgdik7IH0sXG4gIG9iamVjdDogZnVuY3Rpb24gKHQsIHAsIHYpIHsgcmV0dXJuIHRbcF0gPSB2OyB9LFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uICh0LCBwLCB2LCB0cmFuc2Zvcm1zLCBtYW51YWwpIHtcbiAgICB0cmFuc2Zvcm1zLmxpc3Quc2V0KHAsIHYpO1xuICAgIGlmIChwID09PSB0cmFuc2Zvcm1zLmxhc3QgfHwgbWFudWFsKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB0cmFuc2Zvcm1zLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIHByb3ApIHsgc3RyICs9IHByb3AgKyBcIihcIiArIHZhbHVlICsgXCIpIFwiOyB9KTtcbiAgICAgIHQuc3R5bGUudHJhbnNmb3JtID0gc3RyO1xuICAgIH1cbiAgfVxufTtcblxuLy8gU2V0IFZhbHVlIGhlbHBlclxuXG5mdW5jdGlvbiBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcykge1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKTtcbiAgYW5pbWF0YWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbWF0YWJsZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUocHJvcGVydGllc1twcm9wZXJ0eV0sIGFuaW1hdGFibGUpO1xuICAgICAgdmFyIHRhcmdldCA9IGFuaW1hdGFibGUudGFyZ2V0O1xuICAgICAgdmFyIHZhbHVlVW5pdCA9IGdldFVuaXQodmFsdWUpO1xuICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgICB2YXIgdW5pdCA9IHZhbHVlVW5pdCB8fCBnZXRVbml0KG9yaWdpbmFsVmFsdWUpO1xuICAgICAgdmFyIHRvID0gZ2V0UmVsYXRpdmVWYWx1ZSh2YWxpZGF0ZVZhbHVlKHZhbHVlLCB1bml0KSwgb3JpZ2luYWxWYWx1ZSk7XG4gICAgICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgc2V0UHJvZ3Jlc3NWYWx1ZVthbmltVHlwZV0odGFyZ2V0LCBwcm9wZXJ0eSwgdG8sIGFuaW1hdGFibGUudHJhbnNmb3JtcywgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gQW5pbWF0aW9uc1xuXG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCkge1xuICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUpO1xuICBpZiAoYW5pbVR5cGUpIHtcbiAgICB2YXIgdHdlZW5zID0gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpO1xuICAgIHZhciBsYXN0VHdlZW4gPSB0d2VlbnNbdHdlZW5zLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBhbmltVHlwZSxcbiAgICAgIHByb3BlcnR5OiBwcm9wLm5hbWUsXG4gICAgICBhbmltYXRhYmxlOiBhbmltYXRhYmxlLFxuICAgICAgdHdlZW5zOiB0d2VlbnMsXG4gICAgICBkdXJhdGlvbjogbGFzdFR3ZWVuLmVuZCxcbiAgICAgIGRlbGF5OiB0d2VlbnNbMF0uZGVsYXksXG4gICAgICBlbmREZWxheTogbGFzdFR3ZWVuLmVuZERlbGF5XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIGZpbHRlckFycmF5KGZsYXR0ZW5BcnJheShhbmltYXRhYmxlcy5tYXAoZnVuY3Rpb24gKGFuaW1hdGFibGUpIHtcbiAgICByZXR1cm4gcHJvcGVydGllcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHJldHVybiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCk7XG4gICAgfSk7XG4gIH0pKSwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFpcy51bmQoYSk7IH0pO1xufVxuXG4vLyBDcmVhdGUgSW5zdGFuY2VcblxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpIHtcbiAgdmFyIGFuaW1MZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDtcbiAgdmFyIGdldFRsT2Zmc2V0ID0gZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGFuaW0udGltZWxpbmVPZmZzZXQgPyBhbmltLnRpbWVsaW5lT2Zmc2V0IDogMDsgfTtcbiAgdmFyIHRpbWluZ3MgPSB7fTtcbiAgdGltaW5ncy5kdXJhdGlvbiA9IGFuaW1MZW5ndGggPyBNYXRoLm1heC5hcHBseShNYXRoLCBhbmltYXRpb25zLm1hcChmdW5jdGlvbiAoYW5pbSkgeyByZXR1cm4gZ2V0VGxPZmZzZXQoYW5pbSkgKyBhbmltLmR1cmF0aW9uOyB9KSkgOiB0d2VlblNldHRpbmdzLmR1cmF0aW9uO1xuICB0aW1pbmdzLmRlbGF5ID0gYW5pbUxlbmd0aCA/IE1hdGgubWluLmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZGVsYXk7XG4gIHRpbWluZ3MuZW5kRGVsYXkgPSBhbmltTGVuZ3RoID8gdGltaW5ncy5kdXJhdGlvbiAtIE1hdGgubWF4LmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZHVyYXRpb24gLSBhbmltLmVuZERlbGF5OyB9KSkgOiB0d2VlblNldHRpbmdzLmVuZERlbGF5O1xuICByZXR1cm4gdGltaW5ncztcbn1cblxudmFyIGluc3RhbmNlSUQgPSAwO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpIHtcbiAgdmFyIGluc3RhbmNlU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MsIHBhcmFtcyk7XG4gIHZhciB0d2VlblNldHRpbmdzID0gcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRUd2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICB2YXIgcHJvcGVydGllcyA9IGdldFByb3BlcnRpZXModHdlZW5TZXR0aW5ncywgcGFyYW1zKTtcbiAgdmFyIGFuaW1hdGFibGVzID0gZ2V0QW5pbWF0YWJsZXMocGFyYW1zLnRhcmdldHMpO1xuICB2YXIgYW5pbWF0aW9ucyA9IGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpO1xuICB2YXIgdGltaW5ncyA9IGdldEluc3RhbmNlVGltaW5ncyhhbmltYXRpb25zLCB0d2VlblNldHRpbmdzKTtcbiAgdmFyIGlkID0gaW5zdGFuY2VJRDtcbiAgaW5zdGFuY2VJRCsrO1xuICByZXR1cm4gbWVyZ2VPYmplY3RzKGluc3RhbmNlU2V0dGluZ3MsIHtcbiAgICBpZDogaWQsXG4gICAgY2hpbGRyZW46IFtdLFxuICAgIGFuaW1hdGFibGVzOiBhbmltYXRhYmxlcyxcbiAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgIGR1cmF0aW9uOiB0aW1pbmdzLmR1cmF0aW9uLFxuICAgIGRlbGF5OiB0aW1pbmdzLmRlbGF5LFxuICAgIGVuZERlbGF5OiB0aW1pbmdzLmVuZERlbGF5XG4gIH0pO1xufVxuXG4vLyBDb3JlXG5cbnZhciBhY3RpdmVJbnN0YW5jZXMgPSBbXTtcblxudmFyIGVuZ2luZSA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByYWY7XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoIXJhZiAmJiAoIWlzRG9jdW1lbnRIaWRkZW4oKSB8fCAhYW5pbWUuc3VzcGVuZFdoZW5Eb2N1bWVudEhpZGRlbikgJiYgYWN0aXZlSW5zdGFuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3RlcCh0KSB7XG4gICAgLy8gbWVtbyBvbiBhbGdvcml0aG0gaXNzdWU6XG4gICAgLy8gZGFuZ2Vyb3VzIGl0ZXJhdGlvbiBvdmVyIG11dGFibGUgYGFjdGl2ZUluc3RhbmNlc2BcbiAgICAvLyAodGhhdCBjb2xsZWN0aW9uIG1heSBiZSB1cGRhdGVkIGZyb20gd2l0aGluIGNhbGxiYWNrcyBvZiBgdGlja2AtZWQgYW5pbWF0aW9uIGluc3RhbmNlcylcbiAgICB2YXIgYWN0aXZlSW5zdGFuY2VzTGVuZ3RoID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhY3RpdmVJbnN0YW5jZXNMZW5ndGgpIHtcbiAgICAgIHZhciBhY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlc1tpXTtcbiAgICAgIGlmICghYWN0aXZlSW5zdGFuY2UucGF1c2VkKSB7XG4gICAgICAgIGFjdGl2ZUluc3RhbmNlLnRpY2sodCk7XG4gICAgICAgIGkrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUluc3RhbmNlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGFjdGl2ZUluc3RhbmNlc0xlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByYWYgPSBpID4gMCA/IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgaWYgKCFhbmltZS5zdXNwZW5kV2hlbkRvY3VtZW50SGlkZGVuKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKGlzRG9jdW1lbnRIaWRkZW4oKSkge1xuICAgICAgLy8gc3VzcGVuZCB0aWNrc1xuICAgICAgcmFmID0gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICB9IGVsc2UgeyAvLyBpcyBiYWNrIHRvIGFjdGl2ZSB0YWJcbiAgICAgIC8vIGZpcnN0IGFkanVzdCBhbmltYXRpb25zIHRvIGNvbnNpZGVyIHRoZSB0aW1lIHRoYXQgdGlja3Mgd2VyZSBzdXNwZW5kZWRcbiAgICAgIGFjdGl2ZUluc3RhbmNlcy5mb3JFYWNoKFxuICAgICAgICBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlIC5fb25Eb2N1bWVudFZpc2liaWxpdHkoKTsgfVxuICAgICAgKTtcbiAgICAgIGVuZ2luZSgpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgfVxuXG4gIHJldHVybiBwbGF5O1xufSkoKTtcblxuZnVuY3Rpb24gaXNEb2N1bWVudEhpZGRlbigpIHtcbiAgcmV0dXJuICEhZG9jdW1lbnQgJiYgZG9jdW1lbnQuaGlkZGVuO1xufVxuXG4vLyBQdWJsaWMgSW5zdGFuY2VcblxuZnVuY3Rpb24gYW5pbWUocGFyYW1zKSB7XG4gIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuXG4gIHZhciBzdGFydFRpbWUgPSAwLCBsYXN0VGltZSA9IDAsIG5vdyA9IDA7XG4gIHZhciBjaGlsZHJlbiwgY2hpbGRyZW5MZW5ndGggPSAwO1xuICB2YXIgcmVzb2x2ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbWFrZVByb21pc2UoaW5zdGFuY2UpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHdpbmRvdy5Qcm9taXNlICYmIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfcmVzb2x2ZSkgeyByZXR1cm4gcmVzb2x2ZSA9IF9yZXNvbHZlOyB9KTtcbiAgICBpbnN0YW5jZS5maW5pc2hlZCA9IHByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpO1xuICB2YXIgcHJvbWlzZSA9IG1ha2VQcm9taXNlKGluc3RhbmNlKTtcblxuICBmdW5jdGlvbiB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gaW5zdGFuY2UuZGlyZWN0aW9uO1xuICAgIGlmIChkaXJlY3Rpb24gIT09ICdhbHRlcm5hdGUnKSB7XG4gICAgICBpbnN0YW5jZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb24gIT09ICdub3JtYWwnID8gJ25vcm1hbCcgOiAncmV2ZXJzZSc7XG4gICAgfVxuICAgIGluc3RhbmNlLnJldmVyc2VkID0gIWluc3RhbmNlLnJldmVyc2VkO1xuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBjaGlsZC5yZXZlcnNlZCA9IGluc3RhbmNlLnJldmVyc2VkOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkanVzdFRpbWUodGltZSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5yZXZlcnNlZCA/IGluc3RhbmNlLmR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRpbWUoKSB7XG4gICAgc3RhcnRUaW1lID0gMDtcbiAgICBsYXN0VGltZSA9IGFkanVzdFRpbWUoaW5zdGFuY2UuY3VycmVudFRpbWUpICogKDEgLyBhbmltZS5zcGVlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWVrQ2hpbGQodGltZSwgY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQpIHsgY2hpbGQuc2Vlayh0aW1lIC0gY2hpbGQudGltZWxpbmVPZmZzZXQpOyB9XG4gIH1cblxuICBmdW5jdGlvbiBzeW5jSW5zdGFuY2VDaGlsZHJlbih0aW1lKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykgeyBzZWVrQ2hpbGQodGltZSwgY2hpbGRyZW5baV0pOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IGNoaWxkcmVuTGVuZ3RoOyBpJDEtLTspIHsgc2Vla0NoaWxkKHRpbWUsIGNoaWxkcmVuW2kkMV0pOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSBpbnN0YW5jZS5hbmltYXRpb25zO1xuICAgIHZhciBhbmltYXRpb25zTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBhbmltYXRpb25zTGVuZ3RoKSB7XG4gICAgICB2YXIgYW5pbSA9IGFuaW1hdGlvbnNbaV07XG4gICAgICB2YXIgYW5pbWF0YWJsZSA9IGFuaW0uYW5pbWF0YWJsZTtcbiAgICAgIHZhciB0d2VlbnMgPSBhbmltLnR3ZWVucztcbiAgICAgIHZhciB0d2Vlbkxlbmd0aCA9IHR3ZWVucy5sZW5ndGggLSAxO1xuICAgICAgdmFyIHR3ZWVuID0gdHdlZW5zW3R3ZWVuTGVuZ3RoXTtcbiAgICAgIC8vIE9ubHkgY2hlY2sgZm9yIGtleWZyYW1lcyBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHR3ZWVuXG4gICAgICBpZiAodHdlZW5MZW5ndGgpIHsgdHdlZW4gPSBmaWx0ZXJBcnJheSh0d2VlbnMsIGZ1bmN0aW9uICh0KSB7IHJldHVybiAoaW5zVGltZSA8IHQuZW5kKTsgfSlbMF0gfHwgdHdlZW47IH1cbiAgICAgIHZhciBlbGFwc2VkID0gbWluTWF4KGluc1RpbWUgLSB0d2Vlbi5zdGFydCAtIHR3ZWVuLmRlbGF5LCAwLCB0d2Vlbi5kdXJhdGlvbikgLyB0d2Vlbi5kdXJhdGlvbjtcbiAgICAgIHZhciBlYXNlZCA9IGlzTmFOKGVsYXBzZWQpID8gMSA6IHR3ZWVuLmVhc2luZyhlbGFwc2VkKTtcbiAgICAgIHZhciBzdHJpbmdzID0gdHdlZW4udG8uc3RyaW5ncztcbiAgICAgIHZhciByb3VuZCA9IHR3ZWVuLnJvdW5kO1xuICAgICAgdmFyIG51bWJlcnMgPSBbXTtcbiAgICAgIHZhciB0b051bWJlcnNMZW5ndGggPSB0d2Vlbi50by5udW1iZXJzLmxlbmd0aDtcbiAgICAgIHZhciBwcm9ncmVzcyA9ICh2b2lkIDApO1xuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0b051bWJlcnNMZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgdmFsdWUgPSAodm9pZCAwKTtcbiAgICAgICAgdmFyIHRvTnVtYmVyID0gdHdlZW4udG8ubnVtYmVyc1tuXTtcbiAgICAgICAgdmFyIGZyb21OdW1iZXIgPSB0d2Vlbi5mcm9tLm51bWJlcnNbbl0gfHwgMDtcbiAgICAgICAgaWYgKCF0d2Vlbi5pc1BhdGgpIHtcbiAgICAgICAgICB2YWx1ZSA9IGZyb21OdW1iZXIgKyAoZWFzZWQgKiAodG9OdW1iZXIgLSBmcm9tTnVtYmVyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBnZXRQYXRoUHJvZ3Jlc3ModHdlZW4udmFsdWUsIGVhc2VkICogdG9OdW1iZXIsIHR3ZWVuLmlzUGF0aFRhcmdldEluc2lkZVNWRyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdW5kKSB7XG4gICAgICAgICAgaWYgKCEodHdlZW4uaXNDb2xvciAmJiBuID4gMikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIHJvdW5kKSAvIHJvdW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gTWFudWFsIEFycmF5LnJlZHVjZSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlc1xuICAgICAgdmFyIHN0cmluZ3NMZW5ndGggPSBzdHJpbmdzLmxlbmd0aDtcbiAgICAgIGlmICghc3RyaW5nc0xlbmd0aCkge1xuICAgICAgICBwcm9ncmVzcyA9IG51bWJlcnNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzcyA9IHN0cmluZ3NbMF07XG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc3RyaW5nc0xlbmd0aDsgcysrKSB7XG4gICAgICAgICAgdmFyIGEgPSBzdHJpbmdzW3NdO1xuICAgICAgICAgIHZhciBiID0gc3RyaW5nc1tzICsgMV07XG4gICAgICAgICAgdmFyIG4kMSA9IG51bWJlcnNbc107XG4gICAgICAgICAgaWYgKCFpc05hTihuJDEpKSB7XG4gICAgICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgJyAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFByb2dyZXNzVmFsdWVbYW5pbS50eXBlXShhbmltYXRhYmxlLnRhcmdldCwgYW5pbS5wcm9wZXJ0eSwgcHJvZ3Jlc3MsIGFuaW1hdGFibGUudHJhbnNmb3Jtcyk7XG4gICAgICBhbmltLmN1cnJlbnRWYWx1ZSA9IHByb2dyZXNzO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENhbGxiYWNrKGNiKSB7XG4gICAgaWYgKGluc3RhbmNlW2NiXSAmJiAhaW5zdGFuY2UucGFzc1Rocm91Z2gpIHsgaW5zdGFuY2VbY2JdKGluc3RhbmNlKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gY291bnRJdGVyYXRpb24oKSB7XG4gICAgaWYgKGluc3RhbmNlLnJlbWFpbmluZyAmJiBpbnN0YW5jZS5yZW1haW5pbmcgIT09IHRydWUpIHtcbiAgICAgIGluc3RhbmNlLnJlbWFpbmluZy0tO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSkge1xuICAgIHZhciBpbnNEdXJhdGlvbiA9IGluc3RhbmNlLmR1cmF0aW9uO1xuICAgIHZhciBpbnNEZWxheSA9IGluc3RhbmNlLmRlbGF5O1xuICAgIHZhciBpbnNFbmREZWxheSA9IGluc0R1cmF0aW9uIC0gaW5zdGFuY2UuZW5kRGVsYXk7XG4gICAgdmFyIGluc1RpbWUgPSBhZGp1c3RUaW1lKGVuZ2luZVRpbWUpO1xuICAgIGluc3RhbmNlLnByb2dyZXNzID0gbWluTWF4KChpbnNUaW1lIC8gaW5zRHVyYXRpb24pICogMTAwLCAwLCAxMDApO1xuICAgIGluc3RhbmNlLnJldmVyc2VQbGF5YmFjayA9IGluc1RpbWUgPCBpbnN0YW5jZS5jdXJyZW50VGltZTtcbiAgICBpZiAoY2hpbGRyZW4pIHsgc3luY0luc3RhbmNlQ2hpbGRyZW4oaW5zVGltZSk7IH1cbiAgICBpZiAoIWluc3RhbmNlLmJlZ2FuICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgaW5zdGFuY2UuYmVnYW4gPSB0cnVlO1xuICAgICAgc2V0Q2FsbGJhY2soJ2JlZ2luJyk7XG4gICAgfVxuICAgIGlmICghaW5zdGFuY2UubG9vcEJlZ2FuICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgaW5zdGFuY2UubG9vcEJlZ2FuID0gdHJ1ZTtcbiAgICAgIHNldENhbGxiYWNrKCdsb29wQmVnaW4nKTtcbiAgICB9XG4gICAgaWYgKGluc1RpbWUgPD0gaW5zRGVsYXkgJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgIT09IDApIHtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcygwKTtcbiAgICB9XG4gICAgaWYgKChpbnNUaW1lID49IGluc0VuZERlbGF5ICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lICE9PSBpbnNEdXJhdGlvbikgfHwgIWluc0R1cmF0aW9uKSB7XG4gICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zRHVyYXRpb24pO1xuICAgIH1cbiAgICBpZiAoaW5zVGltZSA+IGluc0RlbGF5ICYmIGluc1RpbWUgPCBpbnNFbmREZWxheSkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5jaGFuZ2VCZWdhbikge1xuICAgICAgICBpbnN0YW5jZS5jaGFuZ2VCZWdhbiA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBzZXRDYWxsYmFjaygnY2hhbmdlQmVnaW4nKTtcbiAgICAgIH1cbiAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2UnKTtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNUaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGluc3RhbmNlLmNoYW5nZUJlZ2FuKSB7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUJlZ2FuID0gZmFsc2U7XG4gICAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2VDb21wbGV0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IG1pbk1heChpbnNUaW1lLCAwLCBpbnNEdXJhdGlvbik7XG4gICAgaWYgKGluc3RhbmNlLmJlZ2FuKSB7IHNldENhbGxiYWNrKCd1cGRhdGUnKTsgfVxuICAgIGlmIChlbmdpbmVUaW1lID49IGluc0R1cmF0aW9uKSB7XG4gICAgICBsYXN0VGltZSA9IDA7XG4gICAgICBjb3VudEl0ZXJhdGlvbigpO1xuICAgICAgaWYgKCFpbnN0YW5jZS5yZW1haW5pbmcpIHtcbiAgICAgICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5jb21wbGV0ZWQpIHtcbiAgICAgICAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTtcbiAgICAgICAgICBzZXRDYWxsYmFjaygnY29tcGxldGUnKTtcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLnBhc3NUaHJvdWdoICYmICdQcm9taXNlJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHByb21pc2UgPSBtYWtlUHJvbWlzZShpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydFRpbWUgPSBub3c7XG4gICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTtcbiAgICAgICAgaW5zdGFuY2UubG9vcEJlZ2FuID0gZmFsc2U7XG4gICAgICAgIGlmIChpbnN0YW5jZS5kaXJlY3Rpb24gPT09ICdhbHRlcm5hdGUnKSB7XG4gICAgICAgICAgdG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGluc3RhbmNlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IGluc3RhbmNlLmRpcmVjdGlvbjtcbiAgICBpbnN0YW5jZS5wYXNzVGhyb3VnaCA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmN1cnJlbnRUaW1lID0gMDtcbiAgICBpbnN0YW5jZS5wcm9ncmVzcyA9IDA7XG4gICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICBpbnN0YW5jZS5iZWdhbiA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmxvb3BCZWdhbiA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmNoYW5nZUJlZ2FuID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY29tcGxldGVkID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuY2hhbmdlQ29tcGxldGVkID0gZmFsc2U7XG4gICAgaW5zdGFuY2UucmV2ZXJzZVBsYXliYWNrID0gZmFsc2U7XG4gICAgaW5zdGFuY2UucmV2ZXJzZWQgPSBkaXJlY3Rpb24gPT09ICdyZXZlcnNlJztcbiAgICBpbnN0YW5jZS5yZW1haW5pbmcgPSBpbnN0YW5jZS5sb29wO1xuICAgIGNoaWxkcmVuID0gaW5zdGFuY2UuY2hpbGRyZW47XG4gICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IGNoaWxkcmVuTGVuZ3RoOyBpLS07KSB7IGluc3RhbmNlLmNoaWxkcmVuW2ldLnJlc2V0KCk7IH1cbiAgICBpZiAoaW5zdGFuY2UucmV2ZXJzZWQgJiYgaW5zdGFuY2UubG9vcCAhPT0gdHJ1ZSB8fCAoZGlyZWN0aW9uID09PSAnYWx0ZXJuYXRlJyAmJiBpbnN0YW5jZS5sb29wID09PSAxKSkgeyBpbnN0YW5jZS5yZW1haW5pbmcrKzsgfVxuICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnN0YW5jZS5yZXZlcnNlZCA/IGluc3RhbmNlLmR1cmF0aW9uIDogMCk7XG4gIH07XG5cbiAgLy8gaW50ZXJuYWwgbWV0aG9kIChmb3IgZW5naW5lKSB0byBhZGp1c3QgYW5pbWF0aW9uIHRpbWluZ3MgYmVmb3JlIHJlc3RvcmluZyBlbmdpbmUgdGlja3MgKHJBRilcbiAgaW5zdGFuY2UuX29uRG9jdW1lbnRWaXNpYmlsaXR5ID0gcmVzZXRUaW1lO1xuXG4gIC8vIFNldCBWYWx1ZSBoZWxwZXJcblxuICBpbnN0YW5jZS5zZXQgPSBmdW5jdGlvbih0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgc2V0VGFyZ2V0c1ZhbHVlKHRhcmdldHMsIHByb3BlcnRpZXMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICBpbnN0YW5jZS50aWNrID0gZnVuY3Rpb24odCkge1xuICAgIG5vdyA9IHQ7XG4gICAgaWYgKCFzdGFydFRpbWUpIHsgc3RhcnRUaW1lID0gbm93OyB9XG4gICAgc2V0SW5zdGFuY2VQcm9ncmVzcygobm93ICsgKGxhc3RUaW1lIC0gc3RhcnRUaW1lKSkgKiBhbmltZS5zcGVlZCk7XG4gIH07XG5cbiAgaW5zdGFuY2Uuc2VlayA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICBzZXRJbnN0YW5jZVByb2dyZXNzKGFkanVzdFRpbWUodGltZSkpO1xuICB9O1xuXG4gIGluc3RhbmNlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTtcbiAgICByZXNldFRpbWUoKTtcbiAgfTtcblxuICBpbnN0YW5jZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5wYXVzZWQpIHsgcmV0dXJuOyB9XG4gICAgaWYgKGluc3RhbmNlLmNvbXBsZXRlZCkgeyBpbnN0YW5jZS5yZXNldCgpOyB9XG4gICAgaW5zdGFuY2UucGF1c2VkID0gZmFsc2U7XG4gICAgYWN0aXZlSW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xuICAgIHJlc2V0VGltZSgpO1xuICAgIGVuZ2luZSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJldmVyc2UgPSBmdW5jdGlvbigpIHtcbiAgICB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpO1xuICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IGluc3RhbmNlLnJldmVyc2VkID8gZmFsc2UgOiB0cnVlO1xuICAgIHJlc2V0VGltZSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpbnN0YW5jZS5yZXNldCgpO1xuICAgIGluc3RhbmNlLnBsYXkoKTtcbiAgfTtcblxuICBpbnN0YW5jZS5yZW1vdmUgPSBmdW5jdGlvbih0YXJnZXRzKSB7XG4gICAgdmFyIHRhcmdldHNBcnJheSA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgICByZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlKHRhcmdldHNBcnJheSwgaW5zdGFuY2UpO1xuICB9O1xuXG4gIGluc3RhbmNlLnJlc2V0KCk7XG5cbiAgaWYgKGluc3RhbmNlLmF1dG9wbGF5KSB7IGluc3RhbmNlLnBsYXkoKTsgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcblxufVxuXG4vLyBSZW1vdmUgdGFyZ2V0cyBmcm9tIGFuaW1hdGlvblxuXG5mdW5jdGlvbiByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zKSB7XG4gIGZvciAodmFyIGEgPSBhbmltYXRpb25zLmxlbmd0aDsgYS0tOykge1xuICAgIGlmIChhcnJheUNvbnRhaW5zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9uc1thXS5hbmltYXRhYmxlLnRhcmdldCkpIHtcbiAgICAgIGFuaW1hdGlvbnMuc3BsaWNlKGEsIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUYXJnZXRzRnJvbUluc3RhbmNlKHRhcmdldHNBcnJheSwgaW5zdGFuY2UpIHtcbiAgdmFyIGFuaW1hdGlvbnMgPSBpbnN0YW5jZS5hbmltYXRpb25zO1xuICB2YXIgY2hpbGRyZW4gPSBpbnN0YW5jZS5jaGlsZHJlbjtcbiAgcmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9ucyk7XG4gIGZvciAodmFyIGMgPSBjaGlsZHJlbi5sZW5ndGg7IGMtLTspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltjXTtcbiAgICB2YXIgY2hpbGRBbmltYXRpb25zID0gY2hpbGQuYW5pbWF0aW9ucztcbiAgICByZW1vdmVUYXJnZXRzRnJvbUFuaW1hdGlvbnModGFyZ2V0c0FycmF5LCBjaGlsZEFuaW1hdGlvbnMpO1xuICAgIGlmICghY2hpbGRBbmltYXRpb25zLmxlbmd0aCAmJiAhY2hpbGQuY2hpbGRyZW4ubGVuZ3RoKSB7IGNoaWxkcmVuLnNwbGljZShjLCAxKTsgfVxuICB9XG4gIGlmICghYW5pbWF0aW9ucy5sZW5ndGggJiYgIWNoaWxkcmVuLmxlbmd0aCkgeyBpbnN0YW5jZS5wYXVzZSgpOyB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRhcmdldHNGcm9tQWN0aXZlSW5zdGFuY2VzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldHNBcnJheSA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgZm9yICh2YXIgaSA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7IGktLTspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZXNbaV07XG4gICAgcmVtb3ZlVGFyZ2V0c0Zyb21JbnN0YW5jZSh0YXJnZXRzQXJyYXksIGluc3RhbmNlKTtcbiAgfVxufVxuXG4vLyBTdGFnZ2VyIGhlbHBlcnNcblxuZnVuY3Rpb24gc3RhZ2dlcih2YWwsIHBhcmFtcykge1xuICBpZiAoIHBhcmFtcyA9PT0gdm9pZCAwICkgcGFyYW1zID0ge307XG5cbiAgdmFyIGRpcmVjdGlvbiA9IHBhcmFtcy5kaXJlY3Rpb24gfHwgJ25vcm1hbCc7XG4gIHZhciBlYXNpbmcgPSBwYXJhbXMuZWFzaW5nID8gcGFyc2VFYXNpbmdzKHBhcmFtcy5lYXNpbmcpIDogbnVsbDtcbiAgdmFyIGdyaWQgPSBwYXJhbXMuZ3JpZDtcbiAgdmFyIGF4aXMgPSBwYXJhbXMuYXhpcztcbiAgdmFyIGZyb21JbmRleCA9IHBhcmFtcy5mcm9tIHx8IDA7XG4gIHZhciBmcm9tRmlyc3QgPSBmcm9tSW5kZXggPT09ICdmaXJzdCc7XG4gIHZhciBmcm9tQ2VudGVyID0gZnJvbUluZGV4ID09PSAnY2VudGVyJztcbiAgdmFyIGZyb21MYXN0ID0gZnJvbUluZGV4ID09PSAnbGFzdCc7XG4gIHZhciBpc1JhbmdlID0gaXMuYXJyKHZhbCk7XG4gIHZhciB2YWwxID0gaXNSYW5nZSA/IHBhcnNlRmxvYXQodmFsWzBdKSA6IHBhcnNlRmxvYXQodmFsKTtcbiAgdmFyIHZhbDIgPSBpc1JhbmdlID8gcGFyc2VGbG9hdCh2YWxbMV0pIDogMDtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KGlzUmFuZ2UgPyB2YWxbMV0gOiB2YWwpIHx8IDA7XG4gIHZhciBzdGFydCA9IHBhcmFtcy5zdGFydCB8fCAwICsgKGlzUmFuZ2UgPyB2YWwxIDogMCk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIG1heFZhbHVlID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbCwgaSwgdCkge1xuICAgIGlmIChmcm9tRmlyc3QpIHsgZnJvbUluZGV4ID0gMDsgfVxuICAgIGlmIChmcm9tQ2VudGVyKSB7IGZyb21JbmRleCA9ICh0IC0gMSkgLyAyOyB9XG4gICAgaWYgKGZyb21MYXN0KSB7IGZyb21JbmRleCA9IHQgLSAxOyB9XG4gICAgaWYgKCF2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdDsgaW5kZXgrKykge1xuICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChNYXRoLmFicyhmcm9tSW5kZXggLSBpbmRleCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmcm9tWCA9ICFmcm9tQ2VudGVyID8gZnJvbUluZGV4JWdyaWRbMF0gOiAoZ3JpZFswXS0xKS8yO1xuICAgICAgICAgIHZhciBmcm9tWSA9ICFmcm9tQ2VudGVyID8gTWF0aC5mbG9vcihmcm9tSW5kZXgvZ3JpZFswXSkgOiAoZ3JpZFsxXS0xKS8yO1xuICAgICAgICAgIHZhciB0b1ggPSBpbmRleCVncmlkWzBdO1xuICAgICAgICAgIHZhciB0b1kgPSBNYXRoLmZsb29yKGluZGV4L2dyaWRbMF0pO1xuICAgICAgICAgIHZhciBkaXN0YW5jZVggPSBmcm9tWCAtIHRvWDtcbiAgICAgICAgICB2YXIgZGlzdGFuY2VZID0gZnJvbVkgLSB0b1k7XG4gICAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5zcXJ0KGRpc3RhbmNlWCAqIGRpc3RhbmNlWCArIGRpc3RhbmNlWSAqIGRpc3RhbmNlWSk7XG4gICAgICAgICAgaWYgKGF4aXMgPT09ICd4JykgeyB2YWx1ZSA9IC1kaXN0YW5jZVg7IH1cbiAgICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7IHZhbHVlID0gLWRpc3RhbmNlWTsgfVxuICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhWYWx1ZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoZWFzaW5nKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gZWFzaW5nKHZhbCAvIG1heFZhbHVlKSAqIG1heFZhbHVlOyB9KTsgfVxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gYXhpcyA/ICh2YWwgPCAwKSA/IHZhbCAqIC0xIDogLXZhbCA6IE1hdGguYWJzKG1heFZhbHVlIC0gdmFsKTsgfSk7IH1cbiAgICB9XG4gICAgdmFyIHNwYWNpbmcgPSBpc1JhbmdlID8gKHZhbDIgLSB2YWwxKSAvIG1heFZhbHVlIDogdmFsMTtcbiAgICByZXR1cm4gc3RhcnQgKyAoc3BhY2luZyAqIChNYXRoLnJvdW5kKHZhbHVlc1tpXSAqIDEwMCkgLyAxMDApKSArIHVuaXQ7XG4gIH1cbn1cblxuLy8gVGltZWxpbmVcblxuZnVuY3Rpb24gdGltZWxpbmUocGFyYW1zKSB7XG4gIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuICB2YXIgdGwgPSBhbmltZShwYXJhbXMpO1xuICB0bC5kdXJhdGlvbiA9IDA7XG4gIHRsLmFkZCA9IGZ1bmN0aW9uKGluc3RhbmNlUGFyYW1zLCB0aW1lbGluZU9mZnNldCkge1xuICAgIHZhciB0bEluZGV4ID0gYWN0aXZlSW5zdGFuY2VzLmluZGV4T2YodGwpO1xuICAgIHZhciBjaGlsZHJlbiA9IHRsLmNoaWxkcmVuO1xuICAgIGlmICh0bEluZGV4ID4gLTEpIHsgYWN0aXZlSW5zdGFuY2VzLnNwbGljZSh0bEluZGV4LCAxKTsgfVxuICAgIGZ1bmN0aW9uIHBhc3NUaHJvdWdoKGlucykgeyBpbnMucGFzc1Rocm91Z2ggPSB0cnVlOyB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgeyBwYXNzVGhyb3VnaChjaGlsZHJlbltpXSk7IH1cbiAgICB2YXIgaW5zUGFyYW1zID0gbWVyZ2VPYmplY3RzKGluc3RhbmNlUGFyYW1zLCByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcykpO1xuICAgIGluc1BhcmFtcy50YXJnZXRzID0gaW5zUGFyYW1zLnRhcmdldHMgfHwgcGFyYW1zLnRhcmdldHM7XG4gICAgdmFyIHRsRHVyYXRpb24gPSB0bC5kdXJhdGlvbjtcbiAgICBpbnNQYXJhbXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICBpbnNQYXJhbXMuZGlyZWN0aW9uID0gdGwuZGlyZWN0aW9uO1xuICAgIGluc1BhcmFtcy50aW1lbGluZU9mZnNldCA9IGlzLnVuZCh0aW1lbGluZU9mZnNldCkgPyB0bER1cmF0aW9uIDogZ2V0UmVsYXRpdmVWYWx1ZSh0aW1lbGluZU9mZnNldCwgdGxEdXJhdGlvbik7XG4gICAgcGFzc1Rocm91Z2godGwpO1xuICAgIHRsLnNlZWsoaW5zUGFyYW1zLnRpbWVsaW5lT2Zmc2V0KTtcbiAgICB2YXIgaW5zID0gYW5pbWUoaW5zUGFyYW1zKTtcbiAgICBwYXNzVGhyb3VnaChpbnMpO1xuICAgIGNoaWxkcmVuLnB1c2goaW5zKTtcbiAgICB2YXIgdGltaW5ncyA9IGdldEluc3RhbmNlVGltaW5ncyhjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB0bC5kZWxheSA9IHRpbWluZ3MuZGVsYXk7XG4gICAgdGwuZW5kRGVsYXkgPSB0aW1pbmdzLmVuZERlbGF5O1xuICAgIHRsLmR1cmF0aW9uID0gdGltaW5ncy5kdXJhdGlvbjtcbiAgICB0bC5zZWVrKDApO1xuICAgIHRsLnJlc2V0KCk7XG4gICAgaWYgKHRsLmF1dG9wbGF5KSB7IHRsLnBsYXkoKTsgfVxuICAgIHJldHVybiB0bDtcbiAgfTtcbiAgcmV0dXJuIHRsO1xufVxuXG5hbmltZS52ZXJzaW9uID0gJzMuMi4xJztcbmFuaW1lLnNwZWVkID0gMTtcbi8vIFRPRE86I3JldmlldzogbmFtaW5nLCBkb2N1bWVudGF0aW9uXG5hbmltZS5zdXNwZW5kV2hlbkRvY3VtZW50SGlkZGVuID0gdHJ1ZTtcbmFuaW1lLnJ1bm5pbmcgPSBhY3RpdmVJbnN0YW5jZXM7XG5hbmltZS5yZW1vdmUgPSByZW1vdmVUYXJnZXRzRnJvbUFjdGl2ZUluc3RhbmNlcztcbmFuaW1lLmdldCA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWU7XG5hbmltZS5zZXQgPSBzZXRUYXJnZXRzVmFsdWU7XG5hbmltZS5jb252ZXJ0UHggPSBjb252ZXJ0UHhUb1VuaXQ7XG5hbmltZS5wYXRoID0gZ2V0UGF0aDtcbmFuaW1lLnNldERhc2hvZmZzZXQgPSBzZXREYXNob2Zmc2V0O1xuYW5pbWUuc3RhZ2dlciA9IHN0YWdnZXI7XG5hbmltZS50aW1lbGluZSA9IHRpbWVsaW5lO1xuYW5pbWUuZWFzaW5nID0gcGFyc2VFYXNpbmdzO1xuYW5pbWUucGVubmVyID0gcGVubmVyO1xuYW5pbWUucmFuZG9tID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhbmltZTtcbiIsImltcG9ydCAqIGFzIFN0YXRzIGZyb20gJ3N0YXRzLmpzJ1xyXG5pbXBvcnQgYW5pbWUgZnJvbSAnYW5pbWVqcy9saWIvYW5pbWUuZXMuanMnO1xyXG5cclxuLy8gWW91ciB3ZWIgYXBwJ3MgRmlyZWJhc2UgY29uZmlndXJhdGlvblxyXG52YXIgZmlyZWJhc2VDb25maWcgPSB7XHJcbiAgICBhcGlLZXk6IFwiQUl6YVN5RFRWeERKajdycUc5TC1DbHZiYTJUYW85QjBoa2N4amNFXCIsXHJcbiAgICBhdXRoRG9tYWluOiBcIm1pbGNoY2hhbi5maXJlYmFzZWFwcC5jb21cIixcclxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vbWlsY2hjaGFuLmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBwcm9qZWN0SWQ6IFwibWlsY2hjaGFuXCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcIm1pbGNoY2hhbi5hcHBzcG90LmNvbVwiLFxyXG4gICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMzU1Njk4OTcxODg5XCIsXHJcbiAgICBhcHBJZDogXCIxOjM1NTY5ODk3MTg4OTp3ZWI6ZTM2NTNjNWMzMWJkNzI4OWNkNDU1MFwiLFxyXG4gICAgbWVhc3VyZW1lbnRJZDogXCJHLTM5OThGSllOV1hcIlxyXG59O1xyXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXHJcbmZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG5maXJlYmFzZS5hbmFseXRpY3MoKTtcclxuXHJcbmNvbnN0IGRlYnVnID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSkgPT09IFwiZGVidWdcIjtcclxuLy9jb25zdCBjaGFubmVsID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSk7XHJcbmNvbnN0IGRhdGFiYXNlUm9vdCA9IFwid29uZGVybGFuZFwiO1xyXG4vL2NvbnN0IGRhdGFiYXNlQ2hhbm5lbCA9IGNoYW5uZWwubGVuZ3RoID4gMCA/IGRhdGFiYXNlUm9vdCArICcvY2hhbm5lbHMvJyArIGNoYW5uZWwgOiBkYXRhYmFzZVJvb3Q7XHJcbmNvbnN0IGRhdGFiYXNlTWVzc2FnZXMgPSBkYXRhYmFzZVJvb3QgKyBcIi9mZWVkXCI7XHJcbmxldCBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCk7XHJcbmxldCBzdG9yYWdlID0gZmlyZWJhc2Uuc3RvcmFnZSgpO1xyXG5jb25zdCBtaWxjaCA9IHsgbmFtZTogXCLjg5/jg6vjg5LjgaHjgoPjgpNcIiwgYWNjZW50OiBcIiNmZmE2YmJcIiwgaW1hZ2U6IFwiL2ltYWdlcy9NaWxjaC5wbmdcIiB9O1xyXG5jb25zdCBtZXJrdSA9IHsgbmFtZTogXCLjg6Hjg6vjgq/jgaHjgoPjgpNcIiwgYWNjZW50OiBcIiM1YmNiZTFcIiwgaW1hZ2U6IFwiL2ltYWdlcy9NZXJrdS5wbmdcIiB9O1xyXG5jb25zdCBzdGF0cyA9IG5ldyBTdGF0cygpO1xyXG5cclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS50b3AgPSBcImF1dG9cIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5ib3R0b20gPSBcIjBcIjtcclxuc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCJhdXRvXCI7XHJcbnN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucmlnaHQgPSBcIjBcIjtcclxuXHJcbmlmICghZGVidWcpIHtcclxuICAgIHN0YXRzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImlzLWhpZGRlblwiKTtcclxufVxyXG5cclxubGV0IGlkbGVUaW1lID0gMC4wO1xyXG5jb25zdCBibGlua1RocmVzaG9sZCA9IDUuMDtcclxubGV0IGFjdGl2YXRlVGltZSA9IDAuMDtcclxuY29uc3QgYWN0aXZhdGVUaHJlc2hvbGQgPSAxMC4wO1xyXG5sZXQgdGFwQ291bnQgPSAwO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChldmVudCkgPT4ge1xyXG4gICAgaWYgKFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvcikge1xyXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKFwic3cuanNcIikudGhlbihyZWdpc3RyYXRpb24gPT4ge1xyXG4gICAgICAgICAgICByZWdpc3RyYXRpb24ub251cGRhdGVmb3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyICE9PSBudWxsICYmIFwiY29tbWFuZFwiIGluIGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS5jb21tYW5kID09PSBcImNhY2hlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogXCJjbGVhclwiLCBjYWNoZXM6IGV2ZW50LmRhdGEuY2FjaGVzIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGFwcCA9IFZ1ZS5jcmVhdGVBcHAoe1xyXG4gICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpc0RlYnVnOiBkZWJ1ZyxcclxuICAgICAgICAgICAgICAgIGlzRGFya01vZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNNdXRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc1VwZGF0aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzTG9jYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNSZXZlYWxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc092ZXJsYXllZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0JsaW5kZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNQb3B1cDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzTGVhcm5pbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNBbmltYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNIYW5naW5nT246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGlzRGlzY292ZXJpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNTdGFyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNMb2NrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2FudmFzU2l6ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwLCBkZXZpY2VXaWR0aDogMCwgZGV2aWNlSGVpZ2h0OiAwLCBhbHRlcm5hdGl2ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwLCBkZXZpY2VXaWR0aDogMCwgZGV2aWNlSGVpZ2h0OiAwIH0gfSxcclxuICAgICAgICAgICAgICAgIGNhY2hlZEltYWdlczoge30sXHJcbiAgICAgICAgICAgICAgICBjYWNoZWRTcHJpdGVzOiBbXSxcclxuICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlQ2FjaGVkU3ByaXRlczogW10sXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25RdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkOiAwLFxyXG4gICAgICAgICAgICAgICAgbWFwOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBtb2RlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcXVlcnlRdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBxdWVyeUNhY2hlOiB7fSxcclxuICAgICAgICAgICAgICAgIGNhY2hlZFRyYWNrczoge30sXHJcbiAgICAgICAgICAgICAgICBjYWNoZWREb2N1bWVudHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRRdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZVF1ZXVlOiBbXSxcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgdXNlcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIGlucHV0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRJbnB1dExlbmd0aDogMCxcclxuICAgICAgICAgICAgICAgIG1heElucHV0TGVuZ3RoOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBpbnB1dEhhc0Vycm9yOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIG1heE1lc3NhZ2VzOiAxMCxcclxuICAgICAgICAgICAgICAgIHdvcmQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWNlbnRXb3JkczogW10sXHJcbiAgICAgICAgICAgICAgICB0YWdzOiBbXSxcclxuICAgICAgICAgICAgICAgIG1heFRhZ3M6IDEwLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVGltZW91dElEOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICB0aWNrSW50ZXJ2YWxJRDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgc3RhcnM6IC0xLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWRTdGFyczogMCxcclxuICAgICAgICAgICAgICAgIHNjcmVlbnNob3Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25zOiBbXSxcclxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVkTm90aWZpY2F0aW9uSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgcmVjZW50SW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZXNRdWV1ZTogW10sXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgIHByZWxvYWRJbWFnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgaXNVcGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uczogbnVsbCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb25zOiBbXSxcclxuICAgICAgICAgICAgICAgIGJsZW5kU2hhcGVBbmltYXRpb25zOiBbXSxcclxuICAgICAgICAgICAgICAgIGluc2V0VG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgaW5zZXRCb3R0b206IDAsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBbXSxcclxuICAgICAgICAgICAgICAgIHBvcHVwVGV4dEhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVkUG9wdXBUZXh0SGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgdGlja2VyV2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZFRpY2tlcldpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgbGVhZGVyYm9hcmRIZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZExlYWRlcmJvYXJkSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHN0YXRlczoge30sXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHdvcmREaWN0aW9uYXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIHJldmVyc2VXb3JkRGljdGlvbmFyeToge30sXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBbXCLlkI3liY1cIiwgXCLmiYDlsZ5cIiwgXCLmmYLplpNcIiwgXCLloLTmiYBcIiwgXCLjgZnjgovkuotcIiwgXCLnlJ/jgY3nialcIiwgXCLpo5/jgbnnialcIiwgXCLpo7Ljgb/nialcIiwgXCLogZ7jgY/jgoLjga5cIiwgXCLopovjgovjgoLjga5cIiwgXCLoqq3jgoDjgoLjga5cIiwgXCLkvb/jgYbnialcIiwgXCLouqvjgavjgaTjgZHjgovjgoLjga5cIiwgXCLkuZfjgornialcIiwgXCLpg6jkvY1cIiwgXCLnl4XmsJdcIl1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2F0Y2g6IHtcclxuICAgICAgICAgICAgaXNNdXRlZChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImJvdFwiLCBKU09OLnN0cmluZ2lmeSh7IG11dGU6IG5ld1ZhbHVlIH0pKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImJvdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd29yZHM6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjbGlwIG9mIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAuY2xpcFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgY2xpcC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIC50aWNrZXItd3JhcCAudGlja2VyIC5pdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnRpY2tlcldpZHRoID0gTWF0aC5taW4od2lkdGggLyAyLCBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQ+LmNvbHVtbnM6bGFzdC1vZi10eXBlPi5jb2x1bW4+LmNvbnRyb2wgLmxldmVsXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGlja2VyV2lkdGgobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0geyB3aWR0aDogdGhpcy5hbmltYXRlZFRpY2tlcldpZHRoIH07XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYW5pbWF0ZWRUaWNrZXJXaWR0aCA9IG9iai53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlczoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiNhcHA+LmJhY2tncm91bmQ+ZGl2XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGVsZW1lbnRzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFtZVJhdGUgPSAxNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlmcmFtZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lcy5wdXNoKHsgdmlzaWJpbGl0eTogXCJ2aXNpYmxlXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZXMucHVzaCh7IHZpc2liaWxpdHk6IFwiaGlkZGVuXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IGVsZW1lbnQuYW5pbWF0ZShrZXlmcmFtZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2ZvcndhcmRzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiAnc3RlcHMoJyArIG9mZnNldCArICcpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAgLyBmcmFtZVJhdGUgKiBlbGVtZW50cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lID0gYW5pbWF0aW9uLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uc3RhcnRUaW1lID0gc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXBwLmlzUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5wb3B1cFRleHRIZWlnaHQgPSBhcHAuJHJlZnMucG9wdXBUZXh0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcG9wdXBUZXh0SGVpZ2h0KG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IGhlaWdodDogdGhpcy5hbmltYXRlZFBvcHVwVGV4dEhlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZFBvcHVwVGV4dEhlaWdodCA9IG9iai5oZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAubm90aWZpY2F0aW9uSGVpZ2h0ID0gYXBwLiRyZWZzLm5vdGlmaWNhdGlvbnMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uSGVpZ2h0KG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IGhlaWdodDogdGhpcy5hbmltYXRlZE5vdGlmaWNhdGlvbkhlaWdodCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1lKHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZE5vdGlmaWNhdGlvbkhlaWdodCA9IG9iai5oZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmxlYWRlcmJvYXJkSGVpZ2h0ID0gYXBwLiRyZWZzLmxlYWRlcmJvYXJkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkSGVpZ2h0KG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IGhlaWdodDogdGhpcy5hbmltYXRlZExlYWRlcmJvYXJkSGVpZ2h0IH07XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IG9iaixcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVkTGVhZGVyYm9hcmRIZWlnaHQgPSBvYmouaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXJzKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB7IGNvdW50OiB0aGlzLmFuaW1hdGVkU3RhcnMgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZFN0YXJzID0gb2JqLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHsgY291bnQ6IGFwcC5hbmltYXRlZElucHV0TGVuZ3RoIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogYXBwLmlucHV0Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5hbmltYXRlZElucHV0TGVuZ3RoID0gb2JqLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBzaWduSW46IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ID09PSBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUG9wdXAobmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUge2ZpcmViYXNlLmF1dGguT0F1dGhDcmVkZW50aWFsfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IHJlc3VsdC5jcmVkZW50aWFsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC51c2VyLnByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnVwZGF0ZVByb2ZpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkYXRhLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBkYXRhLnBob3RvVVJMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNyZWRlbnRpYWxcIiwgSlNPTi5zdHJpbmdpZnkoeyBwcm92aWRlcklkOiBjcmVkZW50aWFsLnByb3ZpZGVySWQsIGFjY2Vzc1Rva2VuOiBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuLCBpZFRva2VuOiBjcmVkZW50aWFsLmlkVG9rZW4gfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNyZWRlbnRpYWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKFwicHVibGljX3Byb2ZpbGVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUG9wdXAocHJvdmlkZXIpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUge2ZpcmViYXNlLmF1dGguT0F1dGhDcmVkZW50aWFsfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IHJlc3VsdC5jcmVkZW50aWFsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC51c2VyLnByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnVwZGF0ZVByb2ZpbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkYXRhLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBkYXRhLnBob3RvVVJMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNyZWRlbnRpYWxcIiwgSlNPTi5zdHJpbmdpZnkoeyBwcm92aWRlcklkOiBjcmVkZW50aWFsLnByb3ZpZGVySWQsIGFjY2Vzc1Rva2VuOiBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJjcmVkZW50aWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBmaXJlYmFzZS5hdXRoLlR3aXR0ZXJBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFBvcHVwKG5ldyBmaXJlYmFzZS5hdXRoLlR3aXR0ZXJBdXRoUHJvdmlkZXIoKSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7ZmlyZWJhc2UuYXV0aC5PQXV0aENyZWRlbnRpYWx9ICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVkZW50aWFsID0gcmVzdWx0LmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHJlc3VsdC51c2VyLnByb3ZpZGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvdG9VcmwgPSBkYXRhLnBob3RvVVJMLnJlcGxhY2UoL19ub3JtYWxcXC5qcGckLywgJy5qcGcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIudXBkYXRlUHJvZmlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGRhdGEuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9VUkw6IHBob3RvVXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGAke2RhdGFiYXNlUm9vdH0vdXNlcnMvJHtyZXN1bHQudXNlci51aWR9YCkudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1wibGlua1wiXSA9IGBodHRwczovL3R3aXR0ZXIuY29tLyR7cmVzdWx0LmFkZGl0aW9uYWxVc2VySW5mby51c2VybmFtZX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7IGxpbms6IGBodHRwczovL3R3aXR0ZXIuY29tLyR7cmVzdWx0LmFkZGl0aW9uYWxVc2VySW5mby51c2VybmFtZX1gLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY3JlZGVudGlhbFwiLCBKU09OLnN0cmluZ2lmeSh7IHByb3ZpZGVySWQ6IGNyZWRlbnRpYWwucHJvdmlkZXJJZCwgYWNjZXNzVG9rZW46IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW4sIHNlY3JldDogY3JlZGVudGlhbC5zZWNyZXQgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNyZWRlbnRpYWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2lnbk91dDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiBcImNhY2hlc1wiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLypmaXJlYmFzZS5hdXRoKCkuc2lnbkluQW5vbnltb3VzbHkoKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsqL1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWZyZXNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGFzeW5jIGZ1bmN0aW9uIChpZ25vcmUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyTG9jYXRpb24gPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrcyA9IGF3YWl0IHRoaXMuZmV0Y2goaWdub3JlLCBjZW50ZXJMb2NhdGlvbi5sYXRpdHVkZSwgY2VudGVyTG9jYXRpb24ubG9uZ2l0dWRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYWNoZWRUcmFja3MpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXJJZCBvZiBzZWxmLmNhY2hlZFRyYWNrc1trZXldLmhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaWNyb3NvZnQuTWFwcy5FdmVudHMucmVtb3ZlSGFuZGxlcihoYW5kbGVySWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5lbnRpdGllcy5yZW1vdmUoc2VsZi5jYWNoZWRUcmFja3Nba2V5XS5wdXNocGluKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmNhY2hlZFRyYWNrc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0cmFja3MgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXNVcGRhdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ2VvaGFzaCBpbiB0cmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3NbZ2VvaGFzaF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwdXNocGluSWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zdCB3b3JkcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5jYWNoZWRUcmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2suaWQgPT09IHRoaXMuY2FjaGVkVHJhY2tzW2lkXS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNocGluSWQgPSBpZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHVzaHBpbklkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVzaHBpbiA9IG5ldyBNaWNyb3NvZnQuTWFwcy5QdXNocGluKG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbih0cmFjay5sb2NhdGlvbi5sYXRpdHVkZSwgdHJhY2subG9jYXRpb24ubG9uZ2l0dWRlKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2submFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVGl0bGU6IHRoaXMuZm9ybWF0VGltZSh0aW1lc3RhbXAgLSB0cmFjay50aW1lc3RhbXApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcIi9pbWFnZXMvTWFya2VyLVN0YXIuc3ZnXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZShwdXNocGluLCB0cmFjay51c2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZiAoXCJkaWN0aW9uYXJ5XCIgaW4gdHJhY2sgJiYgXCJ3b3Jkc1wiIGluIHRyYWNrLmRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIGluIHRyYWNrLmRpY3Rpb25hcnkud29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZFdvcmQgPSBPYmplY3QuYXNzaWduKHt9LCB0cmFjay5kaWN0aW9uYXJ5LndvcmRzW3dvcmRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRXb3JkW1wibmFtZVwiXSA9IHdvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNsb25lZFdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5zb3J0KCh4LCB5KSA9PiB5LnRpbWVzdGFtcCAtIHgudGltZXN0YW1wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tbXCJ3b3Jkc1wiXSA9IHdvcmRzOyovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW4uaWRdID0gdHJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbi5pZF1bXCJwdXNocGluXCJdID0gcHVzaHBpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluLmlkXVtcImhhbmRsZXJzXCJdID0gW01pY3Jvc29mdC5NYXBzLkV2ZW50cy5hZGRIYW5kbGVyKHB1c2hwaW4sICdjbGljaycsIGFzeW5jIChhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubW9kZSA9IHRoaXMuY2FjaGVkVHJhY2tzW2FyZ3MudGFyZ2V0LmlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1JldmVhbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgTWljcm9zb2Z0Lk1hcHMuRXZlbnRzLmFkZEhhbmRsZXIocHVzaHBpbiwgJ2RibGNsaWNrJywgKGFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBzZWxmLmNhY2hlZFRyYWNrc1thcmdzLnRhcmdldC5pZF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLmVudGl0aWVzLnB1c2gocHVzaHBpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhY2sudGltZXN0YW1wID4gdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXS50aW1lc3RhbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwdXNocGluID0gdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXVtcInB1c2hwaW5cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdW1wiaGFuZGxlcnNcIl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hwaW4uc2V0TG9jYXRpb24obmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHRyYWNrLmxvY2F0aW9uLmxhdGl0dWRlLCB0cmFjay5sb2NhdGlvbi5sb25naXR1ZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNocGluLnNldE9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2submFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVGl0bGU6IHRoaXMuZm9ybWF0VGltZSh0aW1lc3RhbXAgLSB0cmFjay50aW1lc3RhbXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbWFnZShwdXNocGluLCB0cmFjay51c2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZiAoXCJkaWN0aW9uYXJ5XCIgaW4gdHJhY2sgJiYgXCJ3b3Jkc1wiIGluIHRyYWNrLmRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIGluIHRyYWNrLmRpY3Rpb25hcnkud29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZFdvcmQgPSBPYmplY3QuYXNzaWduKHt9LCB0cmFjay5kaWN0aW9uYXJ5LndvcmRzW3dvcmRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRXb3JkW1wibmFtZVwiXSA9IHdvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNsb25lZFdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5zb3J0KCh4LCB5KSA9PiB5LnRpbWVzdGFtcCAtIHgudGltZXN0YW1wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tbXCJ3b3Jkc1wiXSA9IHdvcmRzOyovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkVHJhY2tzW3B1c2hwaW5JZF0gPSB0cmFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFRyYWNrc1twdXNocGluSWRdW1wicHVzaHBpblwiXSA9IHB1c2hwaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRUcmFja3NbcHVzaHBpbklkXVtcImhhbmRsZXJzXCJdID0gaGFuZGxlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ2VvaGFzaCBpbiB0cmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3NbZ2VvaGFzaF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKHRyYWNrLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYWNoZWRUcmFja3MpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlkcy5zb21lKHggPT4geCA9PT0gc2VsZi5jYWNoZWRUcmFja3Nba2V5XS5pZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlcklkIG9mIHNlbGYuY2FjaGVkVHJhY2tzW2tleV0uaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaWNyb3NvZnQuTWFwcy5FdmVudHMucmVtb3ZlSGFuZGxlcihoYW5kbGVySWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmVudGl0aWVzLnJlbW92ZShzZWxmLmNhY2hlZFRyYWNrc1trZXldLnB1c2hwaW4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmNhY2hlZFRyYWNrc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVcGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heCA9IDEwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYWRlcmJvYXJkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFja0RpY3Rpb25hcnkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrUmFua2luZyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2YgdHJhY2tzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLnVzZXIuaWQgaW4gdHJhY2tEaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0RpY3Rpb25hcnlbdHJhY2sudXNlci5pZF0uY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBPYmplY3QuYXNzaWduKHt9LCB0cmFjay51c2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W1wiY291bnRcIl0gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tEaWN0aW9uYXJ5W3RyYWNrLnVzZXIuaWRdID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmFja0RpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja1JhbmtpbmcucHVzaCh0cmFja0RpY3Rpb25hcnlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tSYW5raW5nLnNvcnQoKHgsIHkpID0+IHkuY291bnQgLSB4LmNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRyYWNrUmFua2luZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFkZXJib2FyZC5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgbGVhZGVyYm9hcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhZGVyYm9hcmQucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcHNpbG9uID0gTWF0aC5wb3coMTAsIC02KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG9jdW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQgZmlsdGVyZWREb2N1bWVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVybUZyZXF1ZW5jaWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc3QgYmFzZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDI0ICogNjAgKiA2MCAqIDEwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBsaW1pdCA9IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY29yZURpY3Rpb25hcnkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1heFNjb3JlID0gZXBzaWxvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b2tlbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1TZXQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2YgdHJhY2tzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRyYWNrLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybVNldC5pbmNsdWRlcyh0cmFjay5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjay5uYW1lIGluIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lbdHJhY2submFtZV0gKz0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVt0cmFjay5uYW1lXSA9IDEuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1TZXQucHVzaCh0cmFjay5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2godG9rZW5zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kb2N1bWVudHMucHVzaCh7IHRva2VuczogdG9rZW5zLCB0aW1lc3RhbXA6IHVzZXIudGltZXN0YW1wLCB1c2VyOiB7IGlkOiB1c2VyLmlkLCBuYW1lOiB1c2VyLm5hbWUsIGltYWdlOiBcImltYWdlXCIgaW4gdXNlciA/IHVzZXIuaW1hZ2UgOiBudWxsIH0gfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmZvciAoY29uc3QgdHJhY2sgb2YgdHJhY2tzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIndvcmRzXCIgaW4gdXNlciAmJiB1c2VyLndvcmRzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW52ZXJzZURvY3VtZW50RnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEb2N1bWVudEZyZXF1ZW5jeVtrZXldID0gTWF0aC5sb2coZG9jdW1lbnRzLmxlbmd0aCAvIChpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lba2V5XSArIGVwc2lsb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnRpbWVzdGFtcCAqIDEwMDAgPiBiYXNlVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWREb2N1bWVudHMucHVzaChkb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZERvY3VtZW50cy5sZW5ndGggPCBsaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1heChkb2N1bWVudHMubGVuZ3RoIC0gbGltaXQsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWREb2N1bWVudHMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRvY3VtZW50cy5sZW5ndGggLSAxOyBpID49IG1pbjsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERvY3VtZW50cy51bnNoaWZ0KGRvY3VtZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRmID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIGRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Zlt0b2tlbl0gKz0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Zlt0b2tlbl0gPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZltrZXldIC89IGRvY3VtZW50Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gc2NvcmVEaWN0aW9uYXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlRGljdGlvbmFyeVtrZXldID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtRnJlcXVlbmNpZXMucHVzaCh0Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY29yZURpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZXJtRnJlcXVlbmN5IG9mIHRlcm1GcmVxdWVuY2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiB0ZXJtRnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGZpZGYgPSB0ZXJtRnJlcXVlbmN5W2tleV0gKiBpbnZlcnNlRG9jdW1lbnRGcmVxdWVuY3lba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRmaWRmID4gc2NvcmVEaWN0aW9uYXJ5W2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVEaWN0aW9uYXJ5W2tleV0gPSB0ZmlkZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNjb3JlRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA+IDEgJiYga2V5ICE9IFwiLi4uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHsgdGVybToga2V5LCB2YWx1ZTogc2NvcmVEaWN0aW9uYXJ5W2tleV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5zb3J0KCh4LCB5KSA9PiB5LnZhbHVlIC0geC52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29yZXMubGVuZ3RoID4gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5zcGxpY2UobWF4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmUgb2Ygc2NvcmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29yZS52YWx1ZSA+IG1heFNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhTY29yZSA9IHNjb3JlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNjb3JlIG9mIHNjb3Jlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZS52YWx1ZSAvPSBtYXhTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5zb3J0KCh4LCB5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4LnRlcm0gPiB5LnRlcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHgudGVybSA8IHkudGVybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbZG9jdW1lbnRzLCBzY29yZXNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkRG9jdW1lbnRzLnNwbGljZSgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWdzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRvY3VtZW50IG9mIHJlc3VsdHNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZERvY3VtZW50cy5wdXNoKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHNbMV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZ3MucHVzaCh7IGluZGV4OiBpLCBuYW1lOiByZXN1bHRzWzFdW2ldLnRlcm0sIHNjb3JlOiByZXN1bHRzWzFdW2ldLnZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdGhpcy5pc0JsaW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy9hY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmZXRjaDogYXN5bmMgZnVuY3Rpb24gKGlnbm9yZSwgbGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVjaXNpb25zID0geyAxOiAyLCAyOiAyLCAzOiAyLCA0OiAyLCA1OiAyLCA2OiAyLCA3OiAyLCA4OiAyLCA5OiAyLCAxMDogMywgMTE6IDMsIDEyOiA0LCAxMzogNCwgMTQ6IDQsIDE1OiA1LCAxNjogNSwgMTc6IDUsIDE4OiA2LCAxOTogNiwgMjA6IDYgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlckdlb2hhc2ggPSB0aGlzLmVuY29kZUdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgcHJlY2lzaW9uc1t0aGlzLm1hcC5nZXRab29tKCldKTtcclxuICAgICAgICAgICAgICAgIGxldCBnZW9oYXNoZXMgPSBbY2VudGVyR2VvaGFzaF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wUmVjZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJpbWl0aXZlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmRlY29kZUdlb2hhc2goY2VudGVyR2VvaGFzaCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSA2MDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBDYWNoZSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZXMucHVzaChuZXcgTWljcm9zb2Z0Lk1hcHMuUG9seWdvbihbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wcmlnaHQubGF0aXR1ZGUsIHJlY3QudG9wcmlnaHQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC5ib3R0b21yaWdodC5sYXRpdHVkZSwgcmVjdC5ib3R0b21yaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LmJvdHRvbWxlZnQubGF0aXR1ZGUsIHJlY3QuYm90dG9tbGVmdC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LnRvcGxlZnQubGF0aXR1ZGUsIHJlY3QudG9wbGVmdC5sb25naXR1ZGUpXSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlVGhpY2tuZXNzOiAxXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNlbnRlckdlb2hhc2gubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IHRoaXMuZ2V0TmVpZ2hib3JzKGNlbnRlckdlb2hhc2gpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZWlnaGJvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvaGFzaGVzLnB1c2gobmVpZ2hib3JzW2tleV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdCA9IHRoaXMuZGVjb2RlR2VvaGFzaChuZWlnaGJvcnNba2V5XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmVzLnB1c2gobmV3IE1pY3Jvc29mdC5NYXBzLlBvbHlnb24oW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocmVjdC50b3ByaWdodC5sYXRpdHVkZSwgcmVjdC50b3ByaWdodC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QuYm90dG9tcmlnaHQubGF0aXR1ZGUsIHJlY3QuYm90dG9tcmlnaHQubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaWNyb3NvZnQuTWFwcy5Mb2NhdGlvbihyZWN0LmJvdHRvbWxlZnQubGF0aXR1ZGUsIHJlY3QuYm90dG9tbGVmdC5sb25naXR1ZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHJlY3QudG9wbGVmdC5sYXRpdHVkZSwgcmVjdC50b3BsZWZ0LmxvbmdpdHVkZSldLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICdyZ2JhKDI1NSwgMCwgMCwgMC41KScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VUaGlja25lc3M6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVyLnNldFByaW1pdGl2ZXMocHJpbWl0aXZlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVF1ZXVlLnB1c2goY2VudGVyR2VvaGFzaCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBnZW9oYXNoIG9mIGdlb2hhc2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaWdub3JlICYmIGdlb2hhc2ggaW4gdGhpcy5xdWVyeUNhY2hlICYmIHRpbWVzdGFtcCAtIHRoaXMucXVlcnlDYWNoZVtnZW9oYXNoXS50aW1lc3RhbXAgPCB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXNlciBvZiB0aGlzLnF1ZXJ5Q2FjaGVbZ2VvaGFzaF0uZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFJlY2VudC5wdXNoKHVzZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9oYXNoIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2dlb2hhc2hdLnB1c2godXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZ2VvaGFzaF0gPSBbdXNlcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzXCIpLm9yZGVyQnlDaGlsZChcImtleVwiKS5saW1pdFRvTGFzdCg1MCkuc3RhcnRBdChnZW9oYXNoKS5lbmRBdChnZW9oYXNoLnBhZEVuZCgxMiwgXCJ6XCIpICsgXCJcXHVmOGZmXCIpLm9uY2UoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBDYWNoZVtnZW9oYXNoXSA9IHsgdGltZXN0YW1wOiB0aW1lc3RhbXAsIGRhdGE6IFtdIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWN0aW9uYXJ5ID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV1bXCJpZFwiXSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBSZWNlbnQucHVzaChkaWN0aW9uYXJ5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENhY2hlW2dlb2hhc2hdLmRhdGEucHVzaChkaWN0aW9uYXJ5W2tleV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9oYXNoIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2dlb2hhc2hdLnB1c2goZGljdGlvbmFyeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtnZW9oYXNoXSA9IFtkaWN0aW9uYXJ5W2tleV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnlRdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5UXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ2VvaGFzaCBpbiB0ZW1wQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5Q2FjaGVbZ2VvaGFzaF0gPSB0ZW1wQ2FjaGVbZ2VvaGFzaF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeUNhY2hlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wIC0gc2VsZi5xdWVyeUNhY2hlW2tleV0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYucXVlcnlDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VudCA9IHRoaXMudGFrZSh0ZW1wUmVjZW50LnNvcnQoKHgsIHkpID0+IHkudGltZXN0YW1wIC0geC50aW1lc3RhbXApLCAxMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBkYXRhW2tleV0ubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY2VudC5pbmNsdWRlcyhkYXRhW2tleV1baV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2tleV0uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtrZXldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2NhdGU6IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFwicGVybWlzc2lvbnNcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uU3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogXCJnZW9sb2NhdGlvblwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVybWlzc2lvblN0YXR1cy5zdGF0ZSA9PSBcImdyYW50ZWRcIiB8fCBwZXJtaXNzaW9uU3RhdHVzLnN0YXRlID09IFwicHJvbXB0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9jYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNMb2NhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXAuc2V0Vmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzTG9jYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZXJyb3IubWVzc2FnZSwgYWNjZW50OiBzZWxmLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiBzZWxmLmNoYXJhY3Rlci5pbWFnZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvY2F0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0xvY2F0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLnNldFZpZXcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgTWljcm9zb2Z0Lk1hcHMuTG9jYXRpb24ocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHNlbGYubWFwLmdldFpvb20oKSA8IDE2ID8gMTYgOiBzZWxmLm1hcC5nZXRab29tKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNMb2NhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLypjb25zdCBwZXJtaXNzaW9uU3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogXCJnZW9sb2NhdGlvblwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uU3RhdHVzLnN0YXRlID09IFwiZ3JhbnRlZFwiIHx8IHBlcm1pc3Npb25TdGF0dXMuc3RhdGUgPT0gXCJwcm9tcHRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IE1pY3Jvc29mdC5NYXBzLkxvY2F0aW9uKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiBzZWxmLm1hcC5nZXRab29tKCkgPCAxNiA/IDE2IDogc2VsZi5tYXAuZ2V0Wm9vbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOyovXHJcblxyXG4gICAgICAgICAgICAgICAgLyp0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogNTAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAvKmNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHRoaXMudXNlci51aWQpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBrZXk6IGdlb2hhc2ggKyB0aW1lc3RhbXAsIG5hbWU6IHNlbGYudXNlci5kaXNwbGF5TmFtZSwgaW1hZ2U6IHNlbGYudXNlci5waG90b1VSTCwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIH0sIGdlb2hhc2g6IGdlb2hhc2gsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJrZXlcIl0gPSBnZW9oYXNoICsgdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibmFtZVwiXSA9IHNlbGYudXNlci5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcltcImltYWdlXCJdID0gc2VsZi51c2VyLnBob3RvVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wibG9jYXRpb25cIl0gPSB7IGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyW1wiZ2VvaGFzaFwiXSA9IGdlb2hhc2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJ0aW1lc3RhbXBcIl0gPSB0aW1lc3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIGNvbW1pdHRlZCwgc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21taXR0ZWQgJiYgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyBzZWxmLnVzZXIudWlkKS50cmFuc2FjdGlvbihmdW5jdGlvbiAodSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21taXR0ZWQgJiYgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyovXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8qfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZW5kOiBhc3luYyBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRGVidWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBrZXlzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YWdzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRoaXMuaW5wdXQuc3BsaXQoL1xccy8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnNvbWUoKHgpID0+IHguaWQgPT09IHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3MucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDAgJiYgdGFncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL2ltYWdlcy9cIiArIGtleSkudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlW1widGFnc1wiXSA9IHRhZ3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xlYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dC5sZW5ndGggPD0gdGhpcy5tYXhJbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFybih7IG5hbWU6IHRoaXMuaW5wdXQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMZWFybmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbWFnZSBvZiB0aGlzLmJhY2tncm91bmRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBpbWFnZS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dC5sZW5ndGggPiAwICYmIHRoaXMuaW5wdXQubGVuZ3RoIDw9IHRoaXMubWF4SW5wdXRMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYXJuKHsgbmFtZTogdGhpcy5pbnB1dCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTGVhcm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0SW1hZ2U6IGFzeW5jIGZ1bmN0aW9uIChwdXNocGluLCB1c2VyLCBzZWxlY3RlZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIC8vY29uc3QgaG91cnMgPSBuZXcgRGF0ZSh0cmFjay5wb3NpdGlvbi50aW1lc3RhbXAgKiAxMDAwKS5nZXRIb3VycygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcImltYWdlXCIgaW4gdXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAvKnB1c2hwaW4uc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiIHN0YW5kYWxvbmU9XCJub1wiPz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAxOCAxOFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiB4bWxuczpzZXJpZj1cImh0dHA6Ly93d3cuc2VyaWYuY29tL1wiIHN0eWxlPVwiZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMSwwLDAsMSwtMTcuNzA3NywtMTguNzUzOClcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTI2LjcwOCwxOS43NTRDMzEuMTIzLDE5Ljc1NCAzNC43MDgsMjMuMzM5IDM0LjcwOCwyNy43NTRDMzQuNzA4LDMyLjE2OSAzMS4xMjMsMzUuNzU0IDI2LjcwOCwzNS43NTRDMjIuMjkyLDM1Ljc1NCAxOC43MDgsMzIuMTY5IDE4LjcwOCwyNy43NTRDMTguNzA4LDIzLjMzOSAyMi4yOTIsMTkuNzU0IDI2LjcwOCwxOS43NTRaTTI2LjcwOCwyMy43NTRDMjguOTE1LDIzLjc1NCAzMC43MDgsMjUuNTQ2IDMwLjcwOCwyNy43NTRDMzAuNzA4LDI5Ljk2MiAyOC45MTUsMzEuNzU0IDI2LjcwOCwzMS43NTRDMjQuNSwzMS43NTQgMjIuNzA4LDI5Ljk2MiAyMi43MDgsMjcuNzU0QzIyLjcwOCwyNS41NDYgMjQuNSwyMy43NTQgMjYuNzA4LDIzLjc1NFpcIiBzdHlsZT1cImZpbGw6cmdiKDI1NSwyMzgsMCk7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5gXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBhd2FpdCBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXIuaW1hZ2Uuc3RhcnRzV2l0aChcImdzOi8vXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zcmMgPSBhd2FpdCBzdG9yYWdlLnJlZkZyb21VUkwodXNlci5pbWFnZSkuZ2V0RG93bmxvYWRVUkwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zcmMgPSB1c2VyLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hwaW4uc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwibm9cIj8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjU0XCIgdmlld0JveD1cIjAgMCA1MCA1NFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiB4bWxuczpzZXJpZj1cImh0dHA6Ly93d3cuc2VyaWYuY29tL1wiIHN0eWxlPVwiZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDAuOTk5OTk5LDAsMCwwLjk5OTk5OSwxNy4wMDExLC0xMylcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wLDUwTDE2LDUwTDgsNjZMMCw1MFpcIiBzdHlsZT1cImZpbGw6cmdiKDI1NSwyMzgsMCk7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMS45NjQ5MSwwLDAsMS45NjQ5MSwtMzAuMDA5OSwtMjQuNTkzMSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cIm1hdHJpeCgwLjQxMDU3NCwwLDAsMC40MTA1NzQsMzQuMDQ5OCwyNi43Njk0KVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wLC03LjI5Qy0wLjMxMSwtOC4yNDcgLTEuMTM4LC04Ljk0NCAtMi4xMzMsLTkuMDg5TC05LjIxLC0xMC4xMTdMLTEyLjM3NSwtMTYuNTI5Qy0xMi44MTksLTE3LjQzMiAtMTMuNzM4LC0xOC4wMDMgLTE0Ljc0NCwtMTguMDAzQy0xNS43NSwtMTguMDAzIC0xNi42NywtMTcuNDMyIC0xNy4xMTQsLTE2LjUzTC0yMC4yNzksLTEwLjExN0wtMjcuMzU1LC05LjA4OUMtMjguMzUyLC04Ljk0NCAtMjkuMTc5LC04LjI0NyAtMjkuNDksLTcuMjlDLTI5LjgwMSwtNi4zMzMgLTI5LjU0MSwtNS4yODMgLTI4LjgyLC00LjU4MUwtMjMuNywwLjQxTC0yNC45MDgsNy40NTlDLTI1LjA3OCw4LjQ1IC0yNC42NzIsOS40NTIgLTIzLjg1NywxMC4wNDNDLTIzLjA0MywxMC42MzUgLTIxLjk2NSwxMC43MTMgLTIxLjA3NCwxMC4yNDRMLTE0Ljc0NCw2LjkxN0wtOC40MTUsMTAuMjQ0Qy04LjAyOCwxMC40NDcgLTcuNjA2LDEwLjU0OCAtNy4xODYsMTAuNTQ4Qy02LjYzOCwxMC41NDggLTYuMDkyLDEwLjM3NyAtNS42MzIsMTAuMDQzQy00LjgxOCw5LjQ1MiAtNC40MSw4LjQ1IC00LjU4LDcuNDU4TC01Ljc4OSwwLjQxTC0wLjY2OCwtNC41ODFDMC4wNTIsLTUuMjgzIDAuMzEyLC02LjMzMyAwLC03LjI5XCIgc3R5bGU9XCJmaWxsOndoaXRlO2ZpbGwtcnVsZTpub256ZXJvO1wiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IG9wYWNpdHkgPSBob3VycyA+PSA2ICYmIGhvdXJzIDwgMTggPyBcIjAuMDVcIiA6IFwiMVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc3QgYWNjZW50Q29sb3IgPSBzZWxmLnVzZXIudWlkID09PSB3b3JkLmlkID8gc2VsZi5jaGFyYWN0ZXIuYWNjZW50IDogJyNmZmZmZmYnO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc3Qgc2VsZWN0ZWRDb2xvciA9IHNlbGVjdGVkID8gc2VsZi5jaGFyYWN0ZXIuYWNjZW50IDogJ3JnYigyNTQsMjIxLDgwKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5saW5lU3ZnID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cIm5vXCI/PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjUwXCIgaGVpZ2h0PVwiNTRcIiB2aWV3Qm94PVwiMCAwIDUwIDU0XCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHhtbG5zOnNlcmlmPVwiaHR0cDovL3d3dy5zZXJpZi5jb20vXCIgc3R5bGU9XCJmaWxsLXJ1bGU6ZXZlbm9kZDtjbGlwLXJ1bGU6ZXZlbm9kZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cIm1hdHJpeCgwLjk5OTk5OSwwLDAsMC45OTk5OTksMTcuMDAxMSwtMTMpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wLDUwTDE2LDUwTDgsNjZMMCw1MFpcIiBzdHlsZT1cImZpbGw6cmdiKDI1NSwyMzgsMCk7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDEuOTY0OTEsMCwwLDEuOTY0OTEsLTMwLjAwOTksLTI0LjU5MzEpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiIHN0eWxlPVwiZmlsbDpyZ2IoMjU1LDIzOCwwKTtcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiX2NsaXAxXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIyNy45OTZcIiBjeT1cIjI1LjIzOVwiIHI9XCIxMi4yMTRcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jbGlwUGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI19jbGlwMSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPVwibWF0cml4KDAuNzkxNjY3LDAsMCwwLjc5MTY2Nyw1LjgzMjQ5LDUuMjU4MilcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIyNy45OTZcIiBjeT1cIjI1LjIzOVwiIHI9XCIxMi4yMTRcIiBzdHlsZT1cImZpbGw6d2hpdGU7XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiX2NsaXAyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjI3Ljk5NlwiIGN5PVwiMjUuMjM5XCIgcj1cIjEyLjIxNFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2xpcFBhdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI19jbGlwMilcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD1cIkJhY2tncm91bmRcIiB0cmFuc2Zvcm09XCJtYXRyaXgoMC4wMjM4NTYsMCwwLDAuMDIzODU2LC0yLjUzOTY0LC01LjI5NjU4KVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCIjX0ltYWdlM1wiIHg9XCI3NjdcIiB5PVwiNzY3XCIgd2lkdGg9XCIxMDI2cHhcIiBoZWlnaHQ9XCIxMDI2cHhcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltYWdlIGlkPVwiX0ltYWdlM1wiIHdpZHRoPVwiMTAyNnB4XCIgaGVpZ2h0PVwiMTAyNnB4XCIgeGxpbms6aHJlZj1cImAgKyBjLnRvRGF0YVVSTCgpICsgYFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGVmcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+YDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaHBpbi5zZXRPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaW5saW5lU3ZnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dC5sZW5ndGggPD0gdGhpcy5tYXhJbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRIYXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0SGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGxvYWQ6IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVVdWlkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvY2hyb21lLXBsYXRmb3JtLWFuYWx5dGljcy9ibG9iL21hc3Rlci9zcmMvaW50ZXJuYWwvaWRlbnRpZmllci5qc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IEZPUk1BVDogc3RyaW5nID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnMgPSBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hhcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyc1tpXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwieVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzW2ldID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpICsgOCkudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnMuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VSZWYgPSBzdG9yYWdlLnJlZigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGV2ZW50LnRhcmdldC5maWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzLnNvcnQoKHgsIHkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeC5uYW1lID4geS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeC5uYW1lIDwgeS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGxvYWRUYXNrID0gc3RvcmFnZVJlZi5jaGlsZChgaW1hZ2VzLyR7Z2VuZXJhdGVVdWlkKCl9YCkucHV0KGZpbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRUYXNrLm9uKFwic3RhdGVfY2hhbmdlZFwiLCBmdW5jdGlvbiAoc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb2dyZXNzID0gc25hcHNob3QuYnl0ZXNUcmFuc2ZlcnJlZCAvIHNuYXBzaG90LnRvdGFsQnl0ZXMgLyBmaWxlcy5sZW5ndGggKyBwYXRocy5sZW5ndGggLyBmaWxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHRoaXMuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHRoaXMuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aHMucHVzaCh1cGxvYWRUYXNrLnNuYXBzaG90LnJlZi5mdWxsUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL2ltYWdlc1wiKS5wdXNoKHsgcGF0aHM6IHBhdGhzLCB0aW1lc3RhbXA6IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFybjogYXN5bmMgZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdChmb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9cXHsoXFxkKVxcfS9nLCBmdW5jdGlvbiAobSwgYykgeyByZXR1cm4gYXJnc1twYXJzZUludChjKSArIDFdIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwiYXR0cmlidXRlc1wiIGluIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSBpbiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB0aGlzLnVzZXIudWlkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHdvcmQubmFtZSkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIHcuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3LmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHsgbmFtZTogYXR0cmlidXRlLCB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBhdHRyaWJ1dGUsIHZhbHVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7IG5hbWU6IGF0dHJpYnV0ZSwgdmFsdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMud29yZCA9IHsgbmFtZTogd29yZC5uYW1lLCBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFwidXNlclwiIGluIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRbXCJ1c2VyXCJdID0gd29yZC51c2VyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiTGVhcm5cIikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgdHlwZTogb2JqLnR5cGUsIHNwZWVkOiBvYmouc3BlZWQsIGR1cmF0aW9uOiBvYmouZHVyYXRpb24sIHRleHQ6IGZvcm1hdChvYmoudGV4dCwgd29yZC5uYW1lKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjaGVjazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLndvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgPT09IGV2ZW50LnRhcmdldC5kYXRhc2V0LmF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUudmFsdWUgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNoYXJlOiBhc3luYyBmdW5jdGlvbiAod29yZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMubWFwLmdldENlbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VvaGFzaCA9IHRoaXMuZW5jb2RlR2VvaGFzaChsb2NhdGlvbi5sYXRpdHVkZSwgbG9jYXRpb24ubG9uZ2l0dWRlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7IGlkOiB0aGlzLnVzZXIudWlkLCBuYW1lOiB0aGlzLnVzZXIuZGlzcGxheU5hbWUsIGltYWdlOiB0aGlzLnVzZXIucGhvdG9VUkwgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3b3JkLm5hbWUgaW4gdGhpcy53b3JkRGljdGlvbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLndvcmREaWN0aW9uYXJ5W3dvcmQubmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnkpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVtrZXldLndvcmRzLnNvbWUoKHgpID0+IHggPT09IHdvcmQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXIucHJvdmlkZXJEYXRhWzBdLnByb3ZpZGVySWQgPT09IGZpcmViYXNlLmF1dGguVHdpdHRlckF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBhd2FpdCBkYXRhYmFzZS5yZWYoYCR7ZGF0YWJhc2VSb290fS91c2Vycy8ke3RoaXMudXNlci51aWR9L2xpbmtgKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rLmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJbXCJsaW5rXCJdID0gbGluay52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdGhpcy51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB3b3JkLm5hbWUpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVwZGF0ZVJlcXVpcmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSBpbiBjdXJyZW50LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVsZXRlUmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IHsgYXR0cmlidXRlczoge30gfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSBpbiBjdXJyZW50LmF0dHJpYnV0ZXMgJiYgY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IHRpbWVzdGFtcCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlcXVpcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxldGVSZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjW1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0geyBhdHRyaWJ1dGVzOiB7fSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJ1c2VyXCIgaW4gd29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInVzZXJcIl0gPSB7IGlkOiB3b3JkLnVzZXIuaWQsIG5hbWU6IHdvcmQudXNlci5uYW1lLCBpbWFnZTogd29yZC51c2VyLmltYWdlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgfSwgYXN5bmMgZnVuY3Rpb24gKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpY3Rpb25hcnkgPSBzbmFwc2hvdC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0aW9uYXJ5LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRpY3Rpb25hcnkuYXR0cmlidXRlc1trZXldID09PSBcIm51bWJlclwiICYmIGRpY3Rpb25hcnkuYXR0cmlidXRlc1trZXldID4gMCAmJiBzZWxmLmF0dHJpYnV0ZXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXBzLnB1c2goZGljdGlvbmFyeS5hdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEgJiYgdGltZXN0YW1wc1swXSA9PT0gZGljdGlvbmFyeS50aW1lc3RhbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9cXHsoXFxkKVxcfS9nLCBmdW5jdGlvbiAobSwgYykgeyByZXR1cm4gYXJnc1twYXJzZUludChjKSArIDFdIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgc2VsZi51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvY291bnRcIikudHJhbnNhY3Rpb24oZnVuY3Rpb24gKGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY291bnQgfHwgMCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBzZWxmLnByZXBhcmUoc2VsZi5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIkxlYXJuZWRcIikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZm9ybWF0KG9iai50ZXh0LCB3b3JkLm5hbWUpLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RhcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3RhcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc011dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMudHdpbmtsZS5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInVzZXJcIiBpbiB3b3JkID09PSBmYWxzZSB8fCB3b3JkLnVzZXIuaWQgPT09IHNlbGYudXNlci51aWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzL1wiICsgYXdhaXQgc2VsZi5kaWdlc3RNZXNzYWdlKGAke3NlbGYudXNlci51aWR9JiR7d29yZC5uYW1lfWApKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImtleVwiXSA9IGAke2dlb2hhc2h9JHt0aW1lc3RhbXB9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJsb2NhdGlvblwiXSA9IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImdlb2hhc2hcIl0gPSBnZW9oYXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcInRpbWVzdGFtcFwiXSA9IHRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7IGtleTogYCR7Z2VvaGFzaH0ke3RpbWVzdGFtcH1gLCBuYW1lOiB3b3JkLm5hbWUsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBsb2NhdGlvbi5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGUgfSwgZ2VvaGFzaDogZ2VvaGFzaCwgdXNlcjogdXNlciwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGljdGlvbmFyeS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hdHRyaWJ1dGVzLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBkaWN0aW9uYXJ5LmF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImF0dHJpYnV0ZXNcIl0gPSBhdHRyaWJ1dGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUsIGMsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IGRhdGFiYXNlLnJlZihgJHtkYXRhYmFzZVJvb3R9L3RyYWNrc2ApLnB1c2goKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmLnNldCh7IGtleTogZ2VvaGFzaCArIHRpbWVzdGFtcCwgbmFtZTogd29yZC5uYW1lLCBhdHRyaWJ1dGVzOiB3b3JkLmF0dHJpYnV0ZXMsIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIGxvbmdpdHVkZTogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSB9LCBnZW9oYXNoOiBnZW9oYXNoLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCwgdXNlcjogeyBpZDogc2VsZi51c2VyLnVpZCwgbmFtZTogc2VsZi51c2VyLmRpc3BsYXlOYW1lLCBpbWFnZTogc2VsZi51c2VyLnBob3RvVVJMIH0gfSwgYXN5bmMgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHNlbGYudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L2NvdW50XCIpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCAmJiBjb3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzL1wiICsgYXdhaXQgc2VsZi5kaWdlc3RNZXNzYWdlKGAke3NlbGYudXNlci51aWR9JiR7d29yZC5uYW1lfWApKS50cmFuc2FjdGlvbihmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUsIGMsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlLCBhY2NlbnQ6IHNlbGYuY2hhcmFjdGVyLmFjY2VudCwgaW1hZ2U6IHNlbGYuY2hhcmFjdGVyLmltYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJ1c2VyXCIgaW4gd29yZCA9PT0gZmFsc2UgfHwgd29yZC51c2VyLmlkID09PSBzZWxmLnVzZXIudWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi90cmFja3MvXCIgKyBhd2FpdCBzZWxmLmRpZ2VzdE1lc3NhZ2UoYCR7c2VsZi51c2VyLnVpZH0mJHt3b3JkLm5hbWV9YCkpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJrZXlcIl0gPSBgJHtnZW9oYXNofSR7dGltZXN0YW1wfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImxvY2F0aW9uXCJdID0geyBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsIGxvbmdpdHVkZTogbG9jYXRpb24ubG9uZ2l0dWRlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtcImdlb2hhc2hcIl0gPSBnZW9oYXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbXCJ1c2VyXCJdID0gdXNlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50W1widGltZXN0YW1wXCJdID0gdGltZXN0YW1wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB3b3JkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IHRpbWVzdGFtcCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHsga2V5OiBgJHtnZW9oYXNofSR7dGltZXN0YW1wfWAsIG5hbWU6IHdvcmQubmFtZSwgbG9jYXRpb246IHsgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZSB9LCBnZW9oYXNoOiBnZW9oYXNoLCBhdHRyaWJ1dGVzOiB7fSwgdXNlcjogdXNlciwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2Ygd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUsIGMsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBuZXh0OiBhc3luYyBmdW5jdGlvbiAodXNlcklkLCBzdGFydEF0LCBsaW1pdCA9IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc25hcHNob3Q7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0QXQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHNcIikub3JkZXJCeUtleSgpLmxpbWl0VG9GaXJzdChsaW1pdCArIDEpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzXCIpLm9yZGVyQnlLZXkoKS5zdGFydEF0KHN0YXJ0QXQpLmxpbWl0VG9GaXJzdChsaW1pdCArIDEpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJ3b3Jkc1wiIGluIHRoaXMubW9kZSAmJiBzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUud29yZHMgIT09IG51bGwgJiYgdGhpcy5tb2RlLndvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLmluZGV4ZXMucHVzaCh0aGlzLm1vZGUud29yZHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLndvcmRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB3b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUud29yZHMucHVzaChcInVzZXJcIiBpbiB3b3Jkc1tuYW1lXSA/IHsgbmFtZTogbmFtZSwgYXR0cmlidXRlczogd29yZHNbbmFtZV0uYXR0cmlidXRlcywgdXNlcjogd29yZHNbbmFtZV0udXNlciB9IDogeyBuYW1lOiBuYW1lLCBhdHRyaWJ1dGVzOiB3b3Jkc1tuYW1lXS5hdHRyaWJ1dGVzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZS53b3Jkcy5sZW5ndGggPT09IGxpbWl0ICsgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUubmV4dCA9IHRoaXMubW9kZS53b3Jkcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUubmV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcmV2aW91czogYXN5bmMgZnVuY3Rpb24gKHVzZXJJZCwgc3RhcnRBdCwgbGltaXQgPSA1MCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkc1wiKS5vcmRlckJ5S2V5KCkuc3RhcnRBdChzdGFydEF0KS5saW1pdFRvRmlyc3QobGltaXQpLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJ3b3Jkc1wiIGluIHRoaXMubW9kZSAmJiBzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUud29yZHMgIT09IG51bGwgJiYgdGhpcy5tb2RlLndvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlLm5leHQgPSB0aGlzLm1vZGUud29yZHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGUud29yZHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHdvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZS53b3Jkcy5wdXNoKFwidXNlclwiIGluIHdvcmRzW25hbWVdID8geyBuYW1lOiBuYW1lLCBhdHRyaWJ1dGVzOiB3b3Jkc1tuYW1lXS5hdHRyaWJ1dGVzLCB1c2VyOiB3b3Jkc1tuYW1lXS51c2VyIH0gOiB7IG5hbWU6IG5hbWUsIGF0dHJpYnV0ZXM6IHdvcmRzW25hbWVdLmF0dHJpYnV0ZXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNjb3ZlcjogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd29yZFNldCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYVtrXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGhpcy5yZWNlbnRXb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKHRoaXMudXNlci51aWQgIT09IHdvcmQudXNlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2god29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd29yZFNldFt3b3JkLm5hbWVdID0gd29yZDtcclxuICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmNhY2hlZFRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXIudWlkICE9PSB0aGlzLmNhY2hlZFRyYWNrc1trZXldLnVzZXIuaWQgJiYgdGhpcy5jYWNoZWRUcmFja3Nba2V5XS5uYW1lIGluIHdvcmRTZXQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzLnB1c2godGhpcy5jYWNoZWRUcmFja3Nba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNEaXNjb3ZlcmluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIHNodWZmbGUod29yZHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLypjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHRoaXMudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgd29yZC5uYW1lKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFybih7IG5hbWU6IHdvcmQubmFtZSwgYXR0cmlidXRlczogd29yZC5hdHRyaWJ1dGVzLCB1c2VyOiB3b3JkLnVzZXIgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgc2VsZi51c2VyLnVpZCArIFwiL2RpY3Rpb25hcnkvd29yZHMvXCIgKyB3b3JkLm5hbWUpLnRyYW5zYWN0aW9uKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHsga2V5OiB3b3JkLmtleSwgbmFtZTogd29yZC5uYW1lLCBhdHRyaWJ1dGVzOiB3b3JkLmF0dHJpYnV0ZXMsIGxvY2F0aW9uOiB3b3JkLmxvY2F0aW9uLCBnZW9oYXNoOiB3b3JkLmdlb2hhc2gsIHRpbWVzdGFtcDogdGltZXN0YW1wIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIGNvbW1pdHRlZCwgc25hcHNob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWl0dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFx7KFxcZClcXH0vZywgZnVuY3Rpb24gKG0sIGMpIHsgcmV0dXJuIGFyZ3NbcGFyc2VJbnQoYykgKyAxXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGlzY292ZXJpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhcm4oeyBuYW1lOiB3b3JkLm5hbWUsIGF0dHJpYnV0ZXM6IHdvcmQuYXR0cmlidXRlcywgdXNlcjogd29yZC51c2VyIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHRoaXMuY2hhcmFjdGVyLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJEaXNjb3ZlclwiKSwgd29yZC5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBmb3JtYXQob2JqLnRleHQsIHdvcmQubmFtZSksIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJEaXNjb3ZlclwiKSwgd29yZC5uYW1lLCB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5zZXF1ZW5jZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY2hhcmFjdGVyXCJdID0gdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCB0ZXh0OiBvYmoudGV4dCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNEaXNjb3ZlcmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8qZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHRoaXMuY2hhcmFjdGVyLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJEaXNjb3ZlclwiKSwgXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogb2JqLnRleHQsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLnNlcXVlbmNlcy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gXCJEaXNjb3ZlclwiKSwgXCJcIiwgdGhpcy5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUuc2VxdWVuY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJNZXNzYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLmFsdGVybmF0aXZlLCB0ZXh0OiBvYmoudGV4dCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbXCJjaGFyYWN0ZXJcIl0gPSB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlnZXN0TWVzc2FnZTogYXN5bmMgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZ1VpbnQ4ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKG1lc3NhZ2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuY29kZSBhcyAodXRmLTgpIFVpbnQ4QXJyYXlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIG1zZ1VpbnQ4KTsgICAgICAgICAgIC8vIGhhc2ggdGhlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpOyAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hIZXggPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7IC8vIGNvbnZlcnQgYnl0ZXMgdG8gaGV4IHN0cmluZ1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNoSGV4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhY3RpdmF0ZTogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWRsZVRpbWUgPSBhY3RpdmF0ZVRpbWUgPSAwLjA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVkRG9jdW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFF1ZXVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBbXS5jb25jYXQoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IF9yYW5kb20oMCwgbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGFbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbbl0gPSBhW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFba10gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRvY3VtZW50IG9mIHNodWZmbGUodGhpcy5jYWNoZWREb2N1bWVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UXVldWUucHVzaChkb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb2N1bWVudFF1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXdhaXQgdGhpcy50YWxrKHRoaXMudXNlci51aWQsIGRvY3VtZW50LmZpbHRlcigoeCkgPT4geCAhPT0gdGhpcy5jaGFyYWN0ZXIubmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFsayh0aGlzLnVzZXIudWlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFsayh0aGlzLnVzZXIudWlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFsazogYXN5bmMgZnVuY3Rpb24gKHVzZXJJZCwgdG9rZW5zID0gW10pIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZXMgPSB0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiQWN0aXZhdGVcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VxdWVuY2UgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBbXS5jb25jYXQoYXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IF9yYW5kb20oMCwgbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhW25dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbbl0gPSBhW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtrXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IDYwICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcFN0YXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGVzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ZXIgPSBuZXcgVGlueVNlZ21lbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlblNldCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGhpcy53b3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHRva2VuKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0gPSB7IGF0dHJpYnV0ZXM6IFtdLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgPT09IFwibnVtYmVyXCIgJiYgd29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPiAwICYmIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS5hdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHNodWZmbGUoc2VxdWVuY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVwYXJlZFNlcXVlbmNlID0gdGhpcy5wcmVwYXJlKFtzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc0Fib3J0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBwcmVwYXJlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBBcnJheS5pc0FycmF5KG8udGV4dCkgPyBvLnRleHQgOiBzZWdtZW50ZXIuc2VnbWVudChvLnRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgcHJlcGFyZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgdGhpcy5nZW5lcmF0ZSh1c2VySWQsIG9iai50ZXh0LCB0b2tlbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXAgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWJvcnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWNoZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGV4dCwgY2FjaGVdID0gdGVtcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgdHlwZTogb2JqLnR5cGUsIHNwZWVkOiBvYmouc3BlZWQsIGR1cmF0aW9uOiBvYmouZHVyYXRpb24sIHRleHQ6IHRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUucHVzaChzZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi5sZW5ndGggPiAxICYmICF0b2tlblNldC5pbmNsdWRlcyh0b2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiBpbiB0aGlzLndvcmREaWN0aW9uYXJ5ID09PSBmYWxzZSB8fCB0aW1lc3RhbXAgLSB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGF0YWJhc2UucmVmKGRhdGFiYXNlUm9vdCArIFwiL3VzZXJzL1wiICsgdXNlcklkICsgXCIvZGljdGlvbmFyeS93b3Jkcy9cIiArIHRva2VuKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dID0geyBhdHRyaWJ1dGVzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAod29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pID09PSBcIm51bWJlclwiICYmIHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdID4gMCAmJiB0aGlzLmF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHByZXBhcmVkU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PSBcIk1lc3NhZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCB0aGlzLmdlbmVyYXRlKHVzZXJJZCwgb2JqLnRleHQsIHRva2Vucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWJvcnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RleHQsIGNhY2hlXSA9IHRlbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKHsgdHlwZTogb2JqLnR5cGUsIHNwZWVkOiBvYmouc3BlZWQsIGR1cmF0aW9uOiBvYmouZHVyYXRpb24sIHRleHQ6IHRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU2V0LnB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlcyA9IHRlbXBTdGF0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2YgdGhpcy5wcmVwYXJlKHNlcXVlbmNlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiTWVzc2FnZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCB0aGlzLmdlbmVyYXRlKHVzZXJJZCwgb2JqLnRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXAgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FjaGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RleHQsIGNhY2hlXSA9IHRlbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaCh7IHR5cGU6IG9iai50eXBlLCBzcGVlZDogb2JqLnNwZWVkLCBkdXJhdGlvbjogb2JqLmR1cmF0aW9uLCB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHNlcXVlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2VuZXJhdGU6IGFzeW5jIGZ1bmN0aW9uICh1c2VySWQsIG1lc3NhZ2UsIGhpbnRzID0gW10pIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNob2ljZShwcm9iYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1bSA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9iYWJpbGl0eSBvZiBwcm9iYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdW0gPD0gciAmJiByIDwgc3VtICsgcHJvYmFiaWxpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gcHJvYmFiaWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc29mdG1heCh4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4ID0gTnVtYmVyLk1JTl9WQUxVRTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3VtID0gMC4wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhbaV0gPiBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IHhbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gTWF0aC5leHAoeFtpXSAtIG1heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeS5wdXNoKE1hdGguZXhwKHhbaV0gLSBtYXgpIC8gc3VtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IERhdGUoKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IDYwICogNjA7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VnbWVudGVyID0gbmV3IFRpbnlTZWdtZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0b2tlbnMgPSBBcnJheS5pc0FycmF5KG1lc3NhZ2UpID8gbWVzc2FnZSA6IHNlZ21lbnRlci5zZWdtZW50KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhpbnREaWN0aW9uYXJ5ID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9rZW5TZXQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoXCJbLiMkXFxcXFtcXFxcXV1cIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FjaERpY3Rpb25hcnkgPSB7fTtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlcHNpbG9uID0gTWF0aC5wb3coMTAsIC02KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlYW1XaWR0aCA9IDEwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlcXVlbmNlcyA9IFt7IHNlcXVlbmNlOiBbXSwgc2NvcmU6IDEuMCB9XVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgaGludHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gaW4gdGhpcy53b3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0udGltZXN0YW1wID49IHRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgdG9rZW4pLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dID0geyBhdHRyaWJ1dGVzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZCA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIHdvcmQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHdvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdKSA9PT0gXCJudW1iZXJcIiAmJiB3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA+IDAgJiYgdGhpcy5hdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLndvcmREaWN0aW9uYXJ5W3Rva2VuXS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgaW4gaGludERpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0ucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50RGljdGlvbmFyeVthdHRyaWJ1dGVdID0gW3Rva2VuXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9rZW5TZXQuaW5jbHVkZXModG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIGhpbnREaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBoaW50RGljdGlvbmFyeVthdHRyaWJ1dGVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1zLmluY2x1ZGVzKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMucHVzaChzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSB0YWcubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2godGFnLnNjb3JlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmV3ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXMucHVzaChlcHNpbG9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlIGluIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5ID09PSBmYWxzZSB8fCB0aW1lc3RhbXAgLSB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVthdHRyaWJ1dGVdLnRpbWVzdGFtcCA+PSB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXJJZCArIFwiL2RpY3Rpb25hcnkvd29yZHNcIikub3JkZXJCeUNoaWxkKGBhdHRyaWJ1dGVzLyR7YXR0cmlidXRlfWApLmxpbWl0VG9MYXN0KDEwMCkuc3RhcnRBdCgxKS5vbmNlKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXSA9IHsgd29yZHM6IFtdLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gc25hcHNob3QudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd29yZCBpbiB3b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeVthdHRyaWJ1dGVdLndvcmRzLnB1c2god29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vucy5pbmNsdWRlcyh3b3JkKSAmJiAhdGVybXMuaW5jbHVkZXMod29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtcy5wdXNoKHdvcmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmQgPT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtcy5sZW5ndGggPiAwICYmIHNjb3Jlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmFiaWxpdGllcyA9IHNvZnRtYXgoc2NvcmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FuZGlkYXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHByb2JhYmlsaXRpZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZSA9IFtdLmNvbmNhdChzZXF1ZW5jZXNbaV0uc2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyBpbmRleDogaW5kZXgsIHRlcm06IHRlcm1zW2pdIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHsgc2VxdWVuY2U6IHNlcXVlbmNlLCBzY29yZTogc2VxdWVuY2VzW2ldLnNjb3JlICogcHJvYmFiaWxpdGllc1tqXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjYW5kaWRhdGUgb2YgdGhpcy50YWtlKGNhbmRpZGF0ZXMuc29ydCgoeCwgeSkgPT4geS5zY29yZSAtIHguc2NvcmUpLCBiZWFtV2lkdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKGNhbmRpZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyZWdleC50ZXN0KHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NvcmVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuIGluIHRoaXMud29yZERpY3Rpb25hcnkgPT09IGZhbHNlIHx8IHRpbWVzdGFtcCAtIHRoaXMud29yZERpY3Rpb25hcnlbdG9rZW5dLnRpbWVzdGFtcCA+PSB0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzL1wiICsgdG9rZW4pLm9uY2UoXCJ2YWx1ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0gPSB7IGF0dHJpYnV0ZXM6IFtdLCB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZCA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgaW4gd29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh3b3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgPT09IFwibnVtYmVyXCIgJiYgd29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPiAwICYmIHRoaXMuYXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy53b3JkRGljdGlvbmFyeVt0b2tlbl0uYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUgaW4gaGludERpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgaGludERpY3Rpb25hcnlbYXR0cmlidXRlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtcy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMucHVzaChrZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSBpbiB0aGlzLnJldmVyc2VXb3JkRGljdGlvbmFyeSA9PT0gZmFsc2UgfHwgdGltZXN0YW1wIC0gdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS50aW1lc3RhbXAgPj0gdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdXNlcnMvXCIgKyB1c2VySWQgKyBcIi9kaWN0aW9uYXJ5L3dvcmRzXCIpLm9yZGVyQnlDaGlsZChgYXR0cmlidXRlcy8ke2F0dHJpYnV0ZX1gKS5saW1pdFRvTGFzdCgxMDApLnN0YXJ0QXQoMSkub25jZShcInZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJzZVdvcmREaWN0aW9uYXJ5W2F0dHJpYnV0ZV0gPSB7IHdvcmRzOiBbXSwgdGltZXN0YW1wOiB0aW1lc3RhbXAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gd29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2YgdGhpcy5yZXZlcnNlV29yZERpY3Rpb25hcnlbYXR0cmlidXRlXS53b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vucy5pbmNsdWRlcyh3b3JkKSAmJiAhdGVybXMuaW5jbHVkZXMod29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtcy5wdXNoKHdvcmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmQgPT0gdGFnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3Jlcy5wdXNoKHRhZy5zY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goZXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtcy5sZW5ndGggPiAwICYmIHNjb3Jlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmFiaWxpdGllcyA9IHNvZnRtYXgoc2NvcmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FuZGlkYXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHByb2JhYmlsaXRpZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZSA9IFtdLmNvbmNhdChzZXF1ZW5jZXNbaV0uc2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnB1c2goeyBpbmRleDogaW5kZXgsIHRlcm06IHRlcm1zW2pdIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHsgc2VxdWVuY2U6IHNlcXVlbmNlLCBzY29yZTogc2VxdWVuY2VzW2ldLnNjb3JlICogcHJvYmFiaWxpdGllc1tqXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjYW5kaWRhdGUgb2YgdGhpcy50YWtlKGNhbmRpZGF0ZXMuc29ydCgoeCwgeSkgPT4geS5zY29yZSAtIHguc2NvcmUpLCBiZWFtV2lkdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKGNhbmRpZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblNldC5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHNlcXVlbmNlc1tjaG9pY2Uoc29mdG1heChzZXF1ZW5jZXMubWFwKHggPT4geC5zY29yZSkpKV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5zW2ldIGluIGNhY2hEaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FjaERpY3Rpb25hcnlbdG9rZW5zW2ldXSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0b2tlbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGNhY2hEaWN0aW9uYXJ5W3Rva2Vuc1tpXV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc05ldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHMuc2VxdWVuY2UubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnNlcXVlbmNlW2pdLmluZGV4ID09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5zW2ldID09IHMuc2VxdWVuY2Vbal0udGVybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoRGljdGlvbmFyeVt0b2tlbnNbaV1dID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hEaWN0aW9uYXJ5W3Rva2Vuc1tpXV0gPSBzLnNlcXVlbmNlW2pdLnRlcm07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gcy5zZXF1ZW5jZVtqXS50ZXJtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodG9rZW5zW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdG9rZW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBbdGV4dCwgY2FjaERpY3Rpb25hcnldO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBub3RpZnk6IGZ1bmN0aW9uIChkYXRhLCBkdXJhdGlvbiA9IDMwMDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIGRhdGFbXCJpZFwiXSA9IHdpbmRvdy5zZXRUaW1lb3V0KChkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxmLm5vdGlmaWNhdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubm90aWZpY2F0aW9uc1tpXS5pZCA9PT0gZC5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZmljYXRpb25zLnNwbGljZShpLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMudW5zaGlmdChkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmxpbmRlZDogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX3JhbmRvbShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWNrZ3JvdW5kSW1hZ2VzUXVldWUubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gW10uY29uY2F0KGFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBfcmFuZG9tKDAsIG4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gYVtuXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW25dID0gYVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFba10gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2Ygc2h1ZmZsZSh0aGlzLnJlY2VudEltYWdlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzUXVldWUucHVzaChpbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzUXVldWUuc2hpZnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMuc3BsaWNlKDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgaW1hZ2UucGF0aHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWxvYWRJbWFnZXMucHVzaCh7IGlkOiBpbWFnZS5pZCwgdXJsOiBhd2FpdCBzdG9yYWdlLnJlZigpLmNoaWxkKHBhdGgpLmdldERvd25sb2FkVVJMKCksIHRpbWVzdGFtcDogaW1hZ2UudGltZXN0YW1wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyB0ZXh0OiBlLm1lc3NhZ2UsIGFjY2VudDogdGhpcy5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogdGhpcy5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcInRhZ3NcIiBpbiBpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFsayh0aGlzLnVzZXIudWlkLCBpbWFnZS50YWdzLmZpbHRlcigoeCkgPT4geCAhPT0gdGhpcy5jaGFyYWN0ZXIubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNDb21wbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGltYWdlIG9mIHRoaXMucHJlbG9hZEltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS51cmwgPT0gdXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlW1wiaXNMb2FkZWRcIl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShcImlzTG9hZGVkXCIgaW4gaW1hZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgdGhpcy5wcmVsb2FkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS5pc0xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaW1hZ2UuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWFnZS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBpbWFnZS50aW1lc3RhbXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZEltYWdlcy5zcGxpY2UoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0JsaW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpc0NvbXBsZXRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW1hZ2Ugb2YgdGhpcy5wcmVsb2FkSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLnVybCA9PSB1cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VbXCJpc0xvYWRlZFwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKFwiaXNMb2FkZWRcIiBpbiBpbWFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbWFnZSBvZiB0aGlzLnByZWxvYWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLmlzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpbWFnZS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGltYWdlLnVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IGltYWdlLnRpbWVzdGFtcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQmxpbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY3JvbGxUb1RvcCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIDApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNjcm9sbFRvRW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2Nyb2xsVGltZW91dElEID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2Nyb2xsVGltZW91dElEKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmb3JtYXREYXRlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIG1vbWVudC5sb2NhbGUod2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudChldmVudCkuZm9ybWF0KFwiTFRcIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFuaW1hdGlvblN0YXJ0OiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRpb25FbmQ6IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGlja2VyVXBkYXRlZDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjbGlwIG9mIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAuY2xpcFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNsaXAucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlciAuaXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aWNrZXJXaWR0aCA9IE1hdGgubWluKHdpZHRoIC8gMiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5sZXZlbFwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcnJhbmdlOiBmdW5jdGlvbiAoY29sbGVjdGlvbiwgbGltaXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCByb3dzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1ucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMubGVuZ3RoIDwgbGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChjb2x1bW5zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucyA9IFtpdGVtXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKGNvbHVtbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByb3dzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0YWtlOiBmdW5jdGlvbiAoY29sbGVjdGlvbiwgY291bnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCA+IGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBbXS5jb25jYXQoY29sbGVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXAuc3BsaWNlKGNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KGNvbGxlY3Rpb24pLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9ybWF0VGltZTogZnVuY3Rpb24gKHRpbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBNYXRoLmZsb29yKHRpbWUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3IodCAvIDg2NDAwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0IC8gMzYwMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0IC8gNjApO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kcyA9IHQgJSA2MDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF5cyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyArIFwiZFwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtaW51dGVzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChob3VycyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvdXJzICsgXCJoXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWludXRlcyArIFwibVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWNvbmRzICsgXCJzXCI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpZ2VzdE1lc3NhZ2U6IGFzeW5jIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2dVaW50OCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShtZXNzYWdlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmNvZGUgYXMgKHV0Zi04KSBVaW50OEFycmF5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsIG1zZ1VpbnQ4KTsgICAgICAgICAgIC8vIGhhc2ggdGhlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpOyAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hIZXggPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKS5qb2luKFwiXCIpOyAvLyBjb252ZXJ0IGJ5dGVzIHRvIGhleCBzdHJpbmdcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzaEhleDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RGlzdGFuY2U6IGZ1bmN0aW9uIChsYXQxLCBsb24xLCBsYXQyLCBsb24yKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgUiA9IDYzNzE7IC8vIFJhZGl1cyBvZiB0aGUgZWFydGggaW4ga21cclxuICAgICAgICAgICAgICAgIHZhciBkTGF0ID0gdGhpcy5kZWcycmFkKGxhdDIgLSBsYXQxKTtcclxuICAgICAgICAgICAgICAgIHZhciBkTG9uID0gdGhpcy5kZWcycmFkKGxvbjIgLSBsb24xKTtcclxuICAgICAgICAgICAgICAgIHZhciBhID1cclxuICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihkTGF0IC8gMikgKiBNYXRoLnNpbihkTGF0IC8gMikgK1xyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguY29zKHRoaXMuZGVnMnJhZChsYXQxKSkgKiBNYXRoLmNvcyh0aGlzLmRlZzJyYWQobGF0MikpICpcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihkTG9uIC8gMikgKiBNYXRoLnNpbihkTG9uIC8gMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEgLSBhKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IFIgKiBjOyAvLyBEaXN0YW5jZSBpbiBrbVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWcycmFkOiBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVnICogKE1hdGguUEkgLyAxODApXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVuY29kZUdlb2hhc2g6IGZ1bmN0aW9uIChsYXRpdHVkZSwgbG9uZ2l0dWRlLCBwcmVjaXNpb24gPSAxMikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQklUUyA9IFsxNiwgOCwgNCwgMiwgMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCQVNFMzIgPSBcIjAxMjM0NTY3ODliY2RlZmdoamttbnBxcnN0dXZ3eHl6XCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNfZXZlbiA9IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0ID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgYml0ID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciBjaCA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ2VvaGFzaCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgbGF0WzBdID0gLTkwLjA7IGxhdFsxXSA9IDkwLjA7XHJcbiAgICAgICAgICAgICAgICBsb25bMF0gPSAtMTgwLjA7IGxvblsxXSA9IDE4MC4wO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChnZW9oYXNoLmxlbmd0aCA8IHByZWNpc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc19ldmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pZCA9IChsb25bMF0gKyBsb25bMV0pIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb25naXR1ZGUgPiBtaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoIHw9IEJJVFNbYml0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvblswXSA9IG1pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25bMV0gPSBtaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWlkID0gKGxhdFswXSArIGxhdFsxXSkgLyAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGl0dWRlID4gbWlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaCB8PSBCSVRTW2JpdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRbMF0gPSBtaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0WzFdID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXNfZXZlbiA9ICFpc19ldmVuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYml0IDwgNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXQrKztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9oYXNoICs9IEJBU0UzMltjaF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdlb2hhc2g7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlY29kZUdlb2hhc2g6IGZ1bmN0aW9uIChnZW9oYXNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBCSVRTID0gWzE2LCA4LCA0LCAyLCAxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJBU0UzMiA9IFwiMDEyMzQ1Njc4OWJjZGVmZ2hqa21ucHFyc3R1dnd4eXpcIjtcclxuICAgICAgICAgICAgICAgIHZhciBpc19ldmVuID0gMTtcclxuICAgICAgICAgICAgICAgIHZhciBsYXQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBsb24gPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBsYXRfZXJyID0gOTAuMDtcclxuICAgICAgICAgICAgICAgIHZhciBsb25fZXJyID0gMTgwLjA7XHJcblxyXG4gICAgICAgICAgICAgICAgbGF0WzBdID0gLTkwLjA7XHJcbiAgICAgICAgICAgICAgICBsYXRbMV0gPSA5MC4wO1xyXG4gICAgICAgICAgICAgICAgbG9uWzBdID0gLTE4MC4wO1xyXG4gICAgICAgICAgICAgICAgbG9uWzFdID0gMTgwLjA7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9oYXNoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBnZW9oYXNoW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjZCA9IEJBU0UzMi5pbmRleE9mKGMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDU7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXNrID0gQklUU1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc19ldmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25fZXJyIC89IDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNkICYgbWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvblswXSA9IChsb25bMF0gKyBsb25bMV0pIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uWzFdID0gKGxvblswXSArIGxvblsxXSkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0X2VyciAvPSAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZCAmIG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRbMF0gPSAobGF0WzBdICsgbGF0WzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdFsxXSA9IChsYXRbMF0gKyBsYXRbMV0pIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfZXZlbiA9ICFpc19ldmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsYXRbMl0gPSAobGF0WzBdICsgbGF0WzFdKSAvIDI7XHJcbiAgICAgICAgICAgICAgICBsb25bMl0gPSAobG9uWzBdICsgbG9uWzFdKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbGF0WzJdLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9uWzJdLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcGxlZnQ6IHsgbGF0aXR1ZGU6IGxhdFswXSwgbG9uZ2l0dWRlOiBsb25bMF0gfSxcclxuICAgICAgICAgICAgICAgICAgICB0b3ByaWdodDogeyBsYXRpdHVkZTogbGF0WzFdLCBsb25naXR1ZGU6IGxvblswXSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbXJpZ2h0OiB7IGxhdGl0dWRlOiBsYXRbMV0sIGxvbmdpdHVkZTogbG9uWzFdIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tbGVmdDogeyBsYXRpdHVkZTogbGF0WzBdLCBsb25naXR1ZGU6IGxvblsxXSB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXROZWlnaGJvcnM6IGZ1bmN0aW9uIChnZW9oYXNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodEdlb2hhc2ggPSB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGdlb2hhc2gsICdyaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdEdlb2hhc2ggPSB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGdlb2hhc2gsICdsZWZ0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQoZ2VvaGFzaCwgJ3RvcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5jYWxjdWxhdGVBZGphY2VudChnZW9oYXNoLCAnYm90dG9tJyksXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0R2VvaGFzaCxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0R2VvaGFzaCxcclxuICAgICAgICAgICAgICAgICAgICB0b3BsZWZ0OiB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGxlZnRHZW9oYXNoLCAndG9wJyksXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wcmlnaHQ6IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQocmlnaHRHZW9oYXNoLCAndG9wJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tcmlnaHQ6IHRoaXMuY2FsY3VsYXRlQWRqYWNlbnQocmlnaHRHZW9oYXNoLCAnYm90dG9tJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tbGVmdDogdGhpcy5jYWxjdWxhdGVBZGphY2VudChsZWZ0R2VvaGFzaCwgJ2JvdHRvbScpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYWxjdWxhdGVBZGphY2VudDogZnVuY3Rpb24gKHNyY0hhc2gsIGRpcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQkFTRTMyID0gXCIwMTIzNDU2Nzg5YmNkZWZnaGprbW5wcXJzdHV2d3h5elwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgTkVJR0hCT1JTID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB7IGV2ZW46IFwiYmMwMWZnNDUyMzg5NjdkZXV2aGp5em5wa21zdHFyd3hcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHsgZXZlbjogXCIyMzg5NjdkZWJjMDFmZzQ1a21zdHFyd3h1dmhqeXpucFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB7IGV2ZW46IFwicDByMjE0MzZ4OHpiOWRjZjVoN2tqbm1xZXNndXR3dnlcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogeyBldmVuOiBcIjE0MzY1aDdrOWRjZmVzZ3Vqbm1xcDByMnR3dnl4OHpiXCIgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEJPUkRFUlMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHsgZXZlbjogXCJiY2ZndXZ5elwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogeyBldmVuOiBcIjAxNDVoam5wXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHsgZXZlbjogXCJwcnh6XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHsgZXZlbjogXCIwMjhiXCIgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBORUlHSEJPUlMuYm90dG9tLm9kZCA9IE5FSUdIQk9SUy5sZWZ0LmV2ZW47XHJcbiAgICAgICAgICAgICAgICBORUlHSEJPUlMudG9wLm9kZCA9IE5FSUdIQk9SUy5yaWdodC5ldmVuO1xyXG4gICAgICAgICAgICAgICAgTkVJR0hCT1JTLmxlZnQub2RkID0gTkVJR0hCT1JTLmJvdHRvbS5ldmVuO1xyXG4gICAgICAgICAgICAgICAgTkVJR0hCT1JTLnJpZ2h0Lm9kZCA9IE5FSUdIQk9SUy50b3AuZXZlbjtcclxuXHJcbiAgICAgICAgICAgICAgICBCT1JERVJTLmJvdHRvbS5vZGQgPSBCT1JERVJTLmxlZnQuZXZlbjtcclxuICAgICAgICAgICAgICAgIEJPUkRFUlMudG9wLm9kZCA9IEJPUkRFUlMucmlnaHQuZXZlbjtcclxuICAgICAgICAgICAgICAgIEJPUkRFUlMubGVmdC5vZGQgPSBCT1JERVJTLmJvdHRvbS5ldmVuO1xyXG4gICAgICAgICAgICAgICAgQk9SREVSUy5yaWdodC5vZGQgPSBCT1JERVJTLnRvcC5ldmVuO1xyXG5cclxuICAgICAgICAgICAgICAgIHNyY0hhc2ggPSBzcmNIYXNoLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RDaHIgPSBzcmNIYXNoLmNoYXJBdChzcmNIYXNoLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAoc3JjSGFzaC5sZW5ndGggJSAyKSA/ICdvZGQnIDogJ2V2ZW4nO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJhc2UgPSBzcmNIYXNoLnN1YnN0cmluZygwLCBzcmNIYXNoLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChCT1JERVJTW2Rpcl1bdHlwZV0uaW5kZXhPZihsYXN0Q2hyKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSB0aGlzLmNhbGN1bGF0ZUFkamFjZW50KGJhc2UsIGRpcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2UgKyBCQVNFMzJbTkVJR0hCT1JTW2Rpcl1bdHlwZV0uaW5kZXhPZihsYXN0Q2hyKV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByZXBhcmU6IGZ1bmN0aW9uIChzZXF1ZW5jZXMsIHN0YXRlID0gbnVsbCwgc2VsZWN0ZWRTZXF1ZW5jZXMgPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjaG9vc2VkU2VxdWVuY2VzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgZmxhdHRlbmVkU2VxdWVuY2UgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcFN0YXRlID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gbnVsbCAmJiBzLm5hbWUgaW4gdGhpcy5zdGF0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0YXRlID0gdGhpcy5zdGF0ZXNbcy5uYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wU3RhdGUgIT09IG51bGwgJiYgXCJzdGF0ZVwiIGluIHMgJiYgcy5zdGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHMuc3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4LnRlc3QodGVtcFN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3NlZFNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaG9vc2VkU2VxdWVuY2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBzZXF1ZW5jZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RhdGVcIiBpbiBzID09PSBmYWxzZSB8fCBzLnN0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9vc2VkU2VxdWVuY2VzLnB1c2gocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hvb3NlZFNlcXVlbmNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXVlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBjaG9vc2VkU2VxdWVuY2VzW19yYW5kb20oMCwgY2hvb3NlZFNlcXVlbmNlcy5sZW5ndGgpXS5zZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVzW3MubmFtZV0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHF1ZXVlLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnR5cGUgPT0gXCJTZXF1ZW5jZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXF1ZW5jZVwiIGluIG9iaiA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJhY2VkU2VxdWVuY2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhbGxhYmxlU2VxdWVuY2VzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBzZWxlY3RlZFNlcXVlbmNlcyA9PT0gbnVsbCA/IHRoaXMuY2hhcmFjdGVyLnNlcXVlbmNlcyA6IHNlbGVjdGVkU2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZVN0YWNrID0gdGhpcy5nZXRTZXF1ZW5jZVN0YWNrKHMsIG9iaik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2VTdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhY2sgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHBlZFNlcXVlbmNlID0gc2VxdWVuY2VTdGFjay5wb3AoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFN0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygc2VxdWVuY2VTdGFja1tzZXF1ZW5jZVN0YWNrLmxlbmd0aCAtIDFdLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFwiU2VxdWVuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInNlcXVlbmNlXCIgaW4gbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNOZXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZW1wU2VxdWVuY2Ugb2Ygc3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wU2VxdWVuY2UgPT09IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05ldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RhY2sucHVzaChvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8gPT09IHBvcHBlZFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBTdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHRlbXBTdGFjay5wb3AoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInNlcXVlbmNlXCIgaW4gcG9wcGVkU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGVtcFNlcXVlbmNlIG9mIHN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFNlcXVlbmNlID09PSBwb3BwZWRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmV3ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gocG9wcGVkU2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoc2VxdWVuY2VTdGFjay5sZW5ndGggPiAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlZFNlcXVlbmNlcy5wdXNoKHN0YWNrLnBvcCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlZFNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdGF0ZVwiIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlc1tvYmoubmFtZV0gPSBvYmouc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdHJhY2VkU2VxdWVuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5uYW1lID09IG9iai5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChzLnN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KG9iai5zdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYWJsZVNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHRyYWNlZFNlcXVlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PSBvYmoubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0YXRlXCIgaW4gcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5uYW1lIGluIHRoaXMuc3RhdGVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAocy5zdGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QodGhpcy5zdGF0ZXNbcy5uYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYWJsZVNlcXVlbmNlcy5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGFibGVTZXF1ZW5jZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIGNhbGxhYmxlU2VxdWVuY2VzW19yYW5kb20oMCwgY2FsbGFibGVTZXF1ZW5jZXMubGVuZ3RoKV0uc2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnNwbGljZShpbmRleCwgMCwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhdHRlbmVkU2VxdWVuY2UucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmbGF0dGVuZWRTZXF1ZW5jZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0U2VxdWVuY2VTdGFjazogZnVuY3Rpb24gKHNvdXJjZVNlcXVlbmNlLCB0YXJnZXRTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlcXVlbmNlU3RhY2sgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZVN0YWNrLnB1c2goc291cmNlU2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZVN0YWNrW3NlcXVlbmNlU3RhY2subGVuZ3RoIC0gMV0gIT09IHRhcmdldFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic2VxdWVuY2VcIiBpbiBzb3VyY2VTZXF1ZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygc291cmNlU2VxdWVuY2Uuc2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLnR5cGUgPT0gXCJTZXF1ZW5jZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YWNrID0gdGhpcy5nZXRTZXF1ZW5jZVN0YWNrKG8sIHRhcmdldFNlcXVlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDAgJiYgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPT09IHRhcmdldFNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wU3RhY2sgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdGFjay5wdXNoKHN0YWNrLnBvcCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZVN0YWNrLnB1c2godGVtcFN0YWNrLnBvcCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAodGVtcFN0YWNrLmxlbmd0aCA+IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcXVlbmNlU3RhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZVN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZVN0YWNrO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRlOiBhc3luYyBmdW5jdGlvbiAodGltZXN0YW1wKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFyYWN0ZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmFuZG9tKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gKHRpbWVzdGFtcCAtIHRoaXMuZWxhcHNlZCkgLyAxMDAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsYXBzZWQgPSB0aW1lc3RhbXA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlcXVlbmNlUXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZSArPSBkZWx0YVRpbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZVRpbWUgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZVF1ZXVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZhdGVUaW1lID49IGFjdGl2YXRlVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVkRG9jdW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRRdWV1ZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yYW5kb20obWluLCBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IFtdLmNvbmNhdChhcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBhcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrID0gX3JhbmRvbSgwLCBuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhW25dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtuXSA9IGFba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFba10gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBzaHVmZmxlKHRoaXMuY2FjaGVkRG9jdW1lbnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRRdWV1ZS5wdXNoKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50UXVldWUuc2hpZnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFsayh0aGlzLnVzZXIudWlkLCBkb2N1bWVudC5maWx0ZXIoKHgpID0+IHggIT09IHRoaXMuY2hhcmFjdGVyLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkbGVUaW1lID0gYWN0aXZhdGVUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpZGxlVGltZSA+PSBibGlua1RocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VRdWV1ZS5wdXNoKHRoaXMucHJlcGFyZSh0aGlzLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiSWRsZVwiKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkbGVUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2NrZWQgJiYgdGhpcy5zZXF1ZW5jZVF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSB0aGlzLnNlcXVlbmNlUXVldWVbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlWzBdLnR5cGUgPT0gXCJBbmltYXRpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImZyYW1lc1wiIGluIHNlcXVlbmNlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHNlcXVlbmNlWzBdLmZyYW1lcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImNoYXJhY3RlclwiIGluIHNlcXVlbmNlWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUXVldWUucHVzaCh7IGNoYXJhY3Rlcjogc2VxdWVuY2VbMF0uY2hhcmFjdGVyLCBpbWFnZXM6IG9iaiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlLnB1c2goeyBjaGFyYWN0ZXI6IHRoaXMuY2hhcmFjdGVyLCBpbWFnZXM6IG9iaiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAob2JqKSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIml0ZXJhdGlvbnNcIiBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiaW1hZ2VzXCIgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gXCJjaGFyYWN0ZXJcIiBpbiBzZXF1ZW5jZVswXSA/IHNlcXVlbmNlWzBdLmNoYXJhY3RlciA6IHRoaXMuY2hhcmFjdGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLml0ZXJhdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uUXVldWUucHVzaCh7IGNoYXJhY3RlcjogYywgaW1hZ2VzOiBvYmouaW1hZ2VzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwic3ByaXRlc1wiIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IFwiY2hhcmFjdGVyXCIgaW4gc2VxdWVuY2VbMF0gPyBzZXF1ZW5jZVswXS5jaGFyYWN0ZXIgOiB0aGlzLmNoYXJhY3RlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5pdGVyYXRpb25zOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlLnB1c2goeyBjaGFyYWN0ZXI6IGMsIGltYWdlczogb2JqLnNwcml0ZXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlcXVlbmNlWzBdLnR5cGUgPT0gXCJNZXNzYWdlXCIgJiYgdGhpcy5tZXNzYWdlID09PSBudWxsICYmIHRoaXMuYW5pbWF0aW9uUXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2hhcmFjdGVyXCIgaW4gc2VxdWVuY2VbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0geyB0aW1lOiAwLCBkdXJhdGlvbjogc2VxdWVuY2VbMF0uZHVyYXRpb24sIHR5cGU6IHsgZWxhcHNlZDogLTEsIHNwZWVkOiBzZXF1ZW5jZVswXS5zcGVlZCwgcmV2ZXJzZTogZmFsc2UsIGJ1ZmZlcjogXCJcIiwgY291bnQ6IDAgfSwgY2hhcmFjdGVyOiBzZXF1ZW5jZVswXS5jaGFyYWN0ZXIsIHRleHQ6IHNlcXVlbmNlWzBdLnRleHQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSB7IHRpbWU6IDAsIGR1cmF0aW9uOiBzZXF1ZW5jZVswXS5kdXJhdGlvbiwgdHlwZTogeyBlbGFwc2VkOiAtMSwgc3BlZWQ6IHNlcXVlbmNlWzBdLnNwZWVkLCByZXZlcnNlOiBmYWxzZSwgYnVmZmVyOiBcIlwiLCBjb3VudDogMCB9LCBjaGFyYWN0ZXI6IHsgbmFtZTogdGhpcy5jaGFyYWN0ZXIubmFtZSwgYWNjZW50OiB0aGlzLmNoYXJhY3Rlci5hY2NlbnQsIGltYWdlOiB0aGlzLmNoYXJhY3Rlci5pbWFnZSB9LCB0ZXh0OiBzZXF1ZW5jZVswXS50ZXh0IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmlmICghdGhpcy5pc011dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLm1lc3NhZ2UudGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9haS5taWxjaGNoYW4uY29tL2FwaS9zeW50aGVzaXplP3RleHQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodGV4dCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGF3YWl0IHJlc3BvbnNlLmJsb2IoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlICE9PSBudWxsICYmIHRleHQgPT09IHRoaXMubWVzc2FnZS50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnBsYXllci5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVzc2FnZSA9PT0gbnVsbCAmJiB0aGlzLmFuaW1hdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYWNoZWRJbWFnZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5jYWNoZWRTcHJpdGVzLnNvbWUoeCA9PiB4LnNvdXJjZSA9PT0ga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZi5jYWNoZWRJbWFnZXNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlUXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgKz0gZGVsdGFUaW1lICogMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPj0gMS4wIC8gdGhpcy5tZXNzYWdlLnR5cGUuc3BlZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5tZXNzYWdlLnR5cGUuY291bnQgLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5tZXNzYWdlLnRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSBNYXRoLmZsb29yKHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCAvIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoIDw9IHdpZHRoICYmIHRoaXMubWVzc2FnZS50eXBlLmNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmNvdW50IC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyID0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLnN1YnN0cmluZygwLCB0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1BvcHVwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCA8IHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc0FuaW1hdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuZWxhcHNlZCA9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUG9wdXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuZWxhcHNlZCA+PSAxLjAgLyB0aGlzLm1lc3NhZ2UudHlwZS5zcGVlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gTWF0aC5mbG9vcih0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGggLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gdGhpcy5tZXNzYWdlLnRleHQubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuY291bnQgPj0gd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyICs9IHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlLnR5cGUuY291bnQgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnR5cGUuY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS50eXBlLmVsYXBzZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnRpbWUgKz0gZGVsdGFUaW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UudGltZSA+PSB0aGlzLm1lc3NhZ2UuZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHlwZS5yZXZlcnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50ZXh0Lmxlbmd0aCA9PT0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVycyA9IHRoaXMubWVzc2FnZS50ZXh0LnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0LnB1c2goeyBrZXk6IGksIHZhbHVlOiBjaGFyYWN0ZXJzW2ldIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJBcnJheSA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmRvbUJ1ZmZlciA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc3NhZ2UudGV4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXJyYXkuaW5kZXhPZih0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkpID09IC0xICYmIHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpKSAhPSBcIlxcblwiICYmIHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpKS5tYXRjaCgvXFxzLykgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQXJyYXkucHVzaCh0aGlzLm1lc3NhZ2UudGV4dC5jaGFyQXQoaSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckFycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWVzc2FnZS50eXBlLmNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZS50ZXh0LmNoYXJBdChpKSA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kb21CdWZmZXIgKz0gXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbUJ1ZmZlciArPSBjaGFyQXJyYXlbfn5fcmFuZG9tKDAsIGNoYXJBcnJheS5sZW5ndGgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tQnVmZmVyLmxlbmd0aCA+IHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gKHRoaXMubWVzc2FnZS50eXBlLmJ1ZmZlciArIHJhbmRvbUJ1ZmZlci5zdWJzdHJpbmcodGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCwgcmFuZG9tQnVmZmVyLmxlbmd0aCkpLnNwbGl0KFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJhY3RlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0LnB1c2goeyBrZXk6IGksIHZhbHVlOiBjaGFyYWN0ZXJzW2ldIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50ZXh0Lmxlbmd0aCAhPT0gdGhpcy5tZXNzYWdlLnR5cGUuYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlcnMgPSB0aGlzLm1lc3NhZ2UudHlwZS5idWZmZXIuc3BsaXQoXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcmFjdGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQucHVzaCh7IGtleTogaSwgdmFsdWU6IGNoYXJhY3RlcnNbaV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb25RdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uUXVldWVbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2NrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGEgb2YgdGhpcy5hbmltYXRpb25RdWV1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9ja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGEgb2YgYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIGEuaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGUuc291cmNlIGluIHRoaXMuY2FjaGVkSW1hZ2VzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3JjID0gc3ByaXRlLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRJbWFnZXNbc3ByaXRlLnNvdXJjZV0gPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2NrZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uLmNoYXJhY3Rlci5uYW1lID09PSB0aGlzLmNoYXJhY3Rlci5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRTcHJpdGVzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpdGUgb2YgdGhpcy5yZW5kZXIodGhpcy4kcmVmcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCwgYW5pbWF0aW9uLmltYWdlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRTcHJpdGVzLnB1c2goc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmUgPSB0aGlzLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlQ2FjaGVkU3ByaXRlcy5zcGxpY2UoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaXRlIG9mIHRoaXMucmVuZGVyKHRoaXMuJHJlZnMuYWx0ZXJuYXRpdmUuZ2V0Q29udGV4dChcIjJkXCIpLCB0aGlzLmFsdGVybmF0aXZlQ2FudmFzV2lkdGgsIHRoaXMuYWx0ZXJuYXRpdmVDYW52YXNIZWlnaHQsIGFuaW1hdGlvbi5pbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmVDYWNoZWRTcHJpdGVzLnB1c2goc3ByaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25RdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChjdHgsIHdpZHRoLCBoZWlnaHQsIGFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ByaXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpdGUgb2YgYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwcml0ZS5zb3VyY2UgaW4gdGhpcy5jYWNoZWRJbWFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwib3BhY2l0eVwiIGluIHNwcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gc3ByaXRlLm9wYWNpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuY2FjaGVkSW1hZ2VzW3Nwcml0ZS5zb3VyY2VdLCBzcHJpdGUueCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBzcHJpdGUueSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBzcHJpdGUud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgc3ByaXRlLmhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZXMucHVzaChzcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzcHJpdGVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGRhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vbGV0IGNvbnRhaW5lciA9IHRoaXMuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnNldFRvcCA9IHRoaXMuJHJlZnMuaW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5pbnNldEJvdHRvbSA9IHRoaXMuJHJlZnMuYmxhbmsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy90aGlzLiRyZWZzLnRpY2tlci5zdHlsZS53aWR0aCA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNpbnB1dCAuY29sdW1ucz4uY29sdW1uIC5jb250cm9sOm50aC1sYXN0LW9mLXR5cGUoMSkgLmxldmVsOm50aC1sYXN0LW9mLXR5cGUoMSkgZm9ybVwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XHJcblxyXG4gICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNoZWFkaW5nPi5jb2x1bW5zPi5jb2x1bW4+LmNvbHVtbnM6Zmlyc3QtY2hpbGQ+LmNvbHVtbj4uY29sdW1uczpsYXN0LWNoaWxkIC5sZXZlbDpmaXJzdC1jaGlsZCAubGV2ZWwtaXRlbSAuZmllbGQgLnRpY2tlclwiKS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICAvKnRoaXMuJHJlZnMudGlja2VyLnN0eWxlLndpZHRoID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI2lucHV0IC5jb2x1bW5zPi5jb2x1bW4gLmNvbnRyb2w6bnRoLWxhc3Qtb2YtdHlwZSgxKSAubGV2ZWw6bnRoLWxhc3Qtb2YtdHlwZSgxKSBmb3JtXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLypmb3IgKGNvbnN0IGNsaXAgb2YgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5jbGlwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjbGlwLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXIgLml0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpY2tlcldpZHRoID0gTWF0aC5taW4od2lkdGggLyAyLCBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQ+LmNvbHVtbnM6bGFzdC1vZi10eXBlPi5jb2x1bW4+LmNvbnRyb2wgLmxldmVsXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXJcIikuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3VudGVkOiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNob2ljZShjb2xsZWN0aW9uLCBmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdW0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JhYmlsaXR5ID0gZnVuYyhpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1bSA8PSByICYmIHIgPCBzdW0gKyBwcm9iYWJpbGl0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBwcm9iYWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uW2luZGV4XTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvdFN0b3JhZ2VJdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJib3RcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxTdG9yYWdlSXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY3JlZGVudGlhbFwiKTtcclxuICAgICAgICAgICAgbGV0IGNyZWRlbnRpYWwgPSBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gW3sgcGF0aDogXCIvYXNzZXRzL21pbGNoLmpzb25cIiwgcHJvYmFiaWxpdHk6IDEuMCB9XTtcclxuICAgICAgICAgICAgY29uc3QgYWx0ZXJuYXRpdmVzID0gW3sgcGF0aDogXCIvYXNzZXRzL21lcmt1Lmpzb25cIiwgcHJvYmFiaWxpdHk6IDEuMCB9XTtcclxuXHJcbiAgICAgICAgICAgIGlmIChib3RTdG9yYWdlSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBib3QgPSBKU09OLnBhcnNlKGJvdFN0b3JhZ2VJdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTXV0ZWQgPSBib3QubXV0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJib3RcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjcmVkZW50aWFsU3RvcmFnZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbCA9IEpTT04ucGFyc2UoY3JlZGVudGlhbFN0b3JhZ2VJdGVtKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNyZWRlbnRpYWxcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLmFmdGVyKHN0YXRzLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnNldFRvcCA9IHRoaXMuJHJlZnMuaW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5pbnNldEJvdHRvbSA9IHRoaXMuJHJlZnMuYmxhbmsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWljcm9zb2Z0Lk1hcHMuTWFwKHRoaXMuJHJlZnMubWFwLCB7XHJcbiAgICAgICAgICAgICAgICBtYXBUeXBlSWQ6IE1pY3Jvc29mdC5NYXBzLk1hcFR5cGVJZC5jYW52YXNMaWdodFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVIaWdoRHBpOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93TG9jYXRlTWVCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd01hcFR5cGVTZWxlY3RvcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaG93Wm9vbUJ1dHRvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hvd1NjYWxlYmFyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHN1cHBvcnRlZE1hcFR5cGVzOiBbTWljcm9zb2Z0Lk1hcHMuTWFwVHlwZUlkLmdyYXlzY2FsZSwgTWljcm9zb2Z0Lk1hcHMuTWFwVHlwZUlkLmNhbnZhc0xpZ2h0LCBNaWNyb3NvZnQuTWFwcy5NYXBUeXBlSWQuY2FudmFzRGFya11cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxheWVyID0gbmV3IE1pY3Jvc29mdC5NYXBzLkxheWVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLmxheWVycy5pbnNlcnQodGhpcy5sYXllcik7XHJcblxyXG4gICAgICAgICAgICBNaWNyb3NvZnQuTWFwcy5FdmVudHMuYWRkSGFuZGxlcih0aGlzLm1hcCwgJ3ZpZXdjaGFuZ2VlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi51c2VyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UxID0gYXdhaXQgZmV0Y2goY2hvaWNlKGNoYXJhY3RlcnMsICh4KSA9PiB4LnByb2JhYmlsaXR5KS5wYXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZTEub2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSBhd2FpdCByZXNwb25zZTEuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlID0gdGhpcy5wcmVwYXJlKGNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiU3RhcnRcIiksIG51bGwsIGNoYXJhY3Rlci5zZXF1ZW5jZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UyID0gYXdhaXQgZmV0Y2goY2hvaWNlKGFsdGVybmF0aXZlcywgKHgpID0+IHgucHJvYmFiaWxpdHkpLnBhdGgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsdGVybmF0aXZlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UyLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlID0gYXdhaXQgcmVzcG9uc2UyLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UyLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLndpZHRoID0gY2hhcmFjdGVyLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5oZWlnaHQgPSBjaGFyYWN0ZXIuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5kZXZpY2VXaWR0aCA9IGNoYXJhY3Rlci53aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5kZXZpY2VIZWlnaHQgPSBjaGFyYWN0ZXIuaGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmFsdGVybmF0aXZlLndpZHRoID0gYWx0ZXJuYXRpdmUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNTaXplLmFsdGVybmF0aXZlLmhlaWdodCA9IGFsdGVybmF0aXZlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuZGV2aWNlV2lkdGggPSBhbHRlcm5hdGl2ZS53aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS5kZXZpY2VIZWlnaHQgPSBhbHRlcm5hdGl2ZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygc2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09IFwiQW5pbWF0aW9uXCIgJiYgXCJmcmFtZXNcIiBpbiBvYmogJiYgb2JqLmZyYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmouZnJhbWVzWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcyA9IG9iai5mcmFtZXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAob2JqLmZyYW1lc1swXSkgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpdGVyYXRpb25zXCIgaW4gb2JqLmZyYW1lc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbWFnZXNcIiBpbiBvYmouZnJhbWVzWzBdICYmIG9iai5mcmFtZXNbMF0uaW1hZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcyA9IG9iai5mcmFtZXNbMF0uaW1hZ2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwic3ByaXRlc1wiIGluIG9iai5mcmFtZXNbMF0gJiYgb2JqLmZyYW1lc1swXS5zcHJpdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcyA9IG9iai5mcmFtZXNbMF0uc3ByaXRlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpdGUgb2YgaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGUuc291cmNlIGluIHRoaXMuY2FjaGVkSW1hZ2VzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBJbWFnZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9uZXJyb3IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3JjID0gc3ByaXRlLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRJbWFnZXNbc3ByaXRlLnNvdXJjZV0gPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFNwcml0ZXMuc3BsaWNlKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcml0ZSBvZiB0aGlzLnJlbmRlcih0aGlzLiRyZWZzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksIHRoaXMuY2FudmFzV2lkdGgsIHRoaXMuY2FudmFzSGVpZ2h0LCBpbWFnZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkU3ByaXRlcy5wdXNoKHNwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3RlciA9IGNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3RlcltcImFsdGVybmF0aXZlXCJdID0gYWx0ZXJuYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZVF1ZXVlLnB1c2goc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UxLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgdGV4dDogZS5tZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlID0gXCJzaWduLWluXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmV2ZWFsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWwucHJvdmlkZXJJZCA9PT0gZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChjcmVkZW50aWFsLmlkVG9rZW4pKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3JlZGVudGlhbC5wcm92aWRlcklkID09PSBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChjcmVkZW50aWFsLmFjY2Vzc1Rva2VuKSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyZWRlbnRpYWwucHJvdmlkZXJJZCA9PT0gZmlyZWJhc2UuYXV0aC5Ud2l0dGVyQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGZpcmViYXNlLmF1dGguVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsKGNyZWRlbnRpYWwuYWNjZXNzVG9rZW4sIGNyZWRlbnRpYWwuc2VjcmV0KSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZSA9IFwic2lnbi1pblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZXZlYWxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qZmlyZWJhc2UuYXV0aCgpLnNpZ25JbkFub255bW91c2x5KCkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm5vdGlmeSh7IHRleHQ6IGVycm9yLm1lc3NhZ2UsIGFjY2VudDogc2VsZi5jaGFyYWN0ZXIuYWNjZW50LCBpbWFnZTogc2VsZi5jaGFyYWN0ZXIuaW1hZ2UgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIGlzIHNpZ25lZCBpbi5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHVzZXIudWlkICsgXCIvZGljdGlvbmFyeS9jb3VudFwiKS5vbihcInZhbHVlXCIsIHNuYXBzaG90ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBzbmFwc2hvdC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGFycyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJzID0gY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvdHJhY2tzXCIpLm9yZGVyQnlDaGlsZChcInRpbWVzdGFtcFwiKS5saW1pdFRvTGFzdCgxMCkub24oXCJ2YWx1ZVwiLCBzbmFwc2hvdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZHMgPSBzbmFwc2hvdC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBXb3JkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB3b3Jkcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRzW2tleV1bXCJpZFwiXSA9IGtleTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdvcmRzLnB1c2god29yZHNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB3b3JkIG9mIHRlbXBXb3Jkcy5zb3J0KCh4LCB5KSA9PiB5LnRpbWVzdGFtcCAtIHgudGltZXN0YW1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVJbmRleCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGYucmVjZW50V29yZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucmVjZW50V29yZHNbaV0ubmFtZSA9PSB3b3JkLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUluZGV4ID0gaTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRXb3Jkcy5zcGxpY2UocmVtb3ZlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRXb3Jkcy5zcGxpY2UoaW5kZXgsIDAsIHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHNlbGYucmVjZW50V29yZHMubGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNlbnRXb3Jkcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi51c2VyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBpcyBzaWduZWQgb3V0LlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi91c2Vycy9cIiArIHNlbGYudXNlci51aWQgKyBcIi9kaWN0aW9uYXJ5L2NvdW50XCIpLm9mZihcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihkYXRhYmFzZVJvb3QgKyBcIi90cmFja3NcIikub2ZmKFwidmFsdWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXNlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9kYXRhYmFzZS5yZWYoZGF0YWJhc2VSb290ICsgXCIvd29yZHNcIikub3JkZXJCeUNoaWxkKFwidGltZXN0YW1wXCIpLmxpbWl0VG9MYXN0KDEwMCkub24oXCJ2YWx1ZVwiLCBzbmFwc2hvdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICBjb25zdCB3b3JkcyA9IHNuYXBzaG90LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgLypsZXQgaXNVcGRhdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnJlY2VudEltYWdlcy5zb21lKHggPT4geC5pZCA9PT0ga2V5ICYmIHgudGltZXN0YW1wID09PSBpbWFnZXNba2V5XS50aW1lc3RhbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGlzVXBkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVjZW50SW1hZ2VzLnNwbGljZSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlc1trZXldW1wiaWRcIl0gPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjZW50SW1hZ2VzLnB1c2goaW1hZ2VzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoc2VsZi5yZWNlbnRJbWFnZXMsIHNlbGYubWF4VGFncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0JsaW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgICAgICAvL30pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVubW91bnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMudGlja0ludGVydmFsSUQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aWNrSW50ZXJ2YWxJRCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2cm1Nb2RlbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2NlbmUucmVtb3ZlKHZybU1vZGVsLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIHZybU1vZGVsID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pLm1vdW50KFwiI2FwcFwiKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgYXBwLmluc2V0VG9wID0gYXBwLiRyZWZzLmluZGljYXRvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICAgICAgYXBwLmluc2V0Qm90dG9tID0gYXBwLiRyZWZzLmJsYW5rLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS53aWR0aCA9IGFwcC5jaGFyYWN0ZXIud2lkdGg7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuaGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5oZWlnaHQ7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuZGV2aWNlV2lkdGggPSBhcHAuY2hhcmFjdGVyLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuZGV2aWNlSGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICBhcHAuY2FudmFzU2l6ZS5hbHRlcm5hdGl2ZS53aWR0aCA9IGFwcC5jaGFyYWN0ZXIuYWx0ZXJuYXRpdmUud2lkdGg7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuaGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5oZWlnaHQ7XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuZGV2aWNlV2lkdGggPSBhcHAuY2hhcmFjdGVyLmFsdGVybmF0aXZlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgYXBwLmNhbnZhc1NpemUuYWx0ZXJuYXRpdmUuZGV2aWNlSGVpZ2h0ID0gYXBwLmNoYXJhY3Rlci5hbHRlcm5hdGl2ZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICBhcHAuYW5pbWF0aW9uUXVldWUudW5zaGlmdCh7IGNoYXJhY3RlcjogYXBwLmNoYXJhY3RlciwgaW1hZ2VzOiBbXS5jb25jYXQoYXBwLmNhY2hlZFNwcml0ZXMpIH0pO1xyXG5cclxuICAgICAgICBpZiAoYXBwLmFsdGVybmF0aXZlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFwcC5hbmltYXRpb25RdWV1ZS51bnNoaWZ0KHsgY2hhcmFjdGVyOiBhcHAuY2hhcmFjdGVyLmFsdGVybmF0aXZlLCBpbWFnZXM6IFtdLmNvbmNhdChhcHAuYWx0ZXJuYXRpdmVDYWNoZWRTcHJpdGVzKSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLypcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBPYmplY3Qua2V5cyhhcHAuY2FjaGVkSW1hZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIGFwcC5jYWNoZWRJbWFnZXNba2V5XTtcclxuICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAvL2FwcC4kcmVmcy50aWNrZXIuc3R5bGUud2lkdGggPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCIjaW5wdXQgLmNvbHVtbnM+LmNvbHVtbiAuY29udHJvbDpudGgtbGFzdC1vZi10eXBlKDEpIC5sZXZlbDpudGgtbGFzdC1vZi10eXBlKDEpIGZvcm1cIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKyAncHgnO1xyXG5cclxuICAgICAgICAvKmNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gd2luZG93Lm91dGVySGVpZ2h0O1xyXG4gICAgIFxyXG4gICAgICAgIGJsb29tUGFzcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGZ4YWFTaGFkZXIudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZS5zZXQoMSAvICh3aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSwgMSAvIChoZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykpO1xyXG4gICAgIFxyXG4gICAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgXHJcbiAgICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xyXG4gICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgXHJcbiAgICAgICAgY29tcG9zZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgY29tcG9zZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTsqL1xyXG5cclxuICAgICAgICAvKmFwcC4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNsaXAgb2YgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiI2lucHV0Pi5jb2x1bW5zOmxhc3Qtb2YtdHlwZT4uY29sdW1uPi5jb250cm9sIC5jbGlwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjbGlwLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgLnRpY2tlci13cmFwIC50aWNrZXIgLml0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAudGlja2VyV2lkdGggPSBNYXRoLm1pbih3aWR0aCAvIDIsIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNpbnB1dD4uY29sdW1uczpsYXN0LW9mLXR5cGU+LmNvbHVtbj4uY29udHJvbCAubGV2ZWxcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXAucXVlcnlTZWxlY3RvcihcIjpzY29wZSAudGlja2VyLXdyYXAgLnRpY2tlclwiKS5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7Ki9cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIC8vYXBwLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgLy9hY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGV2ZW50ID0+IHtcclxuICAgICAgICAvKmlmIChldmVudC5idXR0b24gPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGJlc3RJbnRlcnNlY3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzcHJpbmdCb25lSW5kZXggPSAwO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGVCb25lID0geyBwb2ludDogeyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH0sIGRpcmVjdGlvbjogeyB4OiAwLCB5OiAwLCB9LCBkaXN0YW5jZTogMCwgaW5kZXg6IC0xIH07XHJcbiAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNwcmluZ0JvbmVHcm91cCBvZiB2cm1Nb2RlbC5zcHJpbmdCb25lTWFuYWdlci5zcHJpbmdCb25lR3JvdXBMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpbmdCb25lIG9mIHNwcmluZ0JvbmVHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHNwcmluZ0JvbmUuYm9uZS5nZXRXb3JsZFBvc2l0aW9uKG5ldyBUSFJFRS5WZWN0b3IzKCkpLmRpc3RhbmNlVG8oYmVzdEludGVyc2VjdC5wb2ludCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZUJvbmUuaW5kZXggPSBzcHJpbmdCb25lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaW5nQm9uZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwLmNoYXJhY3RlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5zZXF1ZW5jZVF1ZXVlLnB1c2goYXBwLnByZXBhcmUoYXBwLmNoYXJhY3Rlci5zZXF1ZW5jZXMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IFwiVG91Y2hTdGFydFwiKSwgYmVzdEludGVyc2VjdC5vYmplY3QubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSovXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGV2ZW50ID0+IHtcclxuXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgLyppZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChhcHAuY2hhcmFjdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhcHAuc2VxdWVuY2VRdWV1ZS5wdXNoKGFwcC5wcmVwYXJlKGFwcC5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlRvdWNoRW5kXCIpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9Ki9cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGV2ZW50ID0+IHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKHRhcENvdW50ID09IDApIHtcclxuICAgICAgICAgICAgdGFwQ291bnQrKztcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFwQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB9LCA1MDApO1xyXG5cclxuICAgICAgICAgICAgLypsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgICAgICAgICAgbGV0IGJlc3RJbnRlcnNlY3QgPSBudWxsO1xyXG4gICAgXHJcbiAgICAgICAgICAgIG1vdXNlLnggPSAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIDIuMCAtIDEuMDtcclxuICAgICAgICAgICAgbW91c2UueSA9IC0oZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAvIHdpbmRvdy5vdXRlckhlaWdodCkgKiAyLjAgKyAxLjA7XHJcbiAgICBcclxuICAgICAgICAgICAgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEobW91c2UsIGNhbWVyYSk7XHJcbiAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaW50ZXJzZWN0IG9mIHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lLmNoaWxkcmVuLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdC5kaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVzdEludGVyc2VjdCA9IGludGVyc2VjdDtcclxuICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGludGVyc2VjdC5kaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGlmIChiZXN0SW50ZXJzZWN0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ByaW5nQm9uZUluZGV4ID0gMDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlQm9uZSA9IHsgcG9pbnQ6IHsgeDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCwgeTogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSB9LCBkaXJlY3Rpb246IHsgeDogMCwgeTogMCwgfSwgZGlzdGFuY2U6IDAsIGluZGV4OiAtMSB9O1xyXG4gICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcHJpbmdCb25lR3JvdXAgb2YgdnJtTW9kZWwuc3ByaW5nQm9uZU1hbmFnZXIuc3ByaW5nQm9uZUdyb3VwTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ByaW5nQm9uZSBvZiBzcHJpbmdCb25lR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBzcHJpbmdCb25lLmJvbmUuZ2V0V29ybGRQb3NpdGlvbihuZXcgVEhSRUUuVmVjdG9yMygpKS5kaXN0YW5jZVRvKGJlc3RJbnRlcnNlY3QucG9pbnQpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGVCb25lLmluZGV4ID0gc3ByaW5nQm9uZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcmluZ0JvbmVJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGFwcC5jaGFyYWN0ZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuc2VxdWVuY2VRdWV1ZS5wdXNoKGFwcC5wcmVwYXJlKGFwcC5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlRvdWNoU3RhcnRcIiksIGJlc3RJbnRlcnNlY3Qub2JqZWN0Lm5hbWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGxvb2tBbmltYXRpb24gPSB7IHRpbWU6IDAuMCwgZHVyYXRpb246IDAuNSwgc291cmNlOiB7IHg6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi54LCB5OiBsb29rQXRUYXJnZXQucG9zaXRpb24ueSB9LCB0YXJnZXQ6IHsgeDogKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSAwLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAxMC4wLCB5OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIDAuNSAqIHdpbmRvdy5vdXRlckhlaWdodCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAtMTAuMCB9IH07XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShtb3VzZSwgY2FtZXJhKTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgKHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lLmNoaWxkcmVuLCB0cnVlKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vYXBwLnRhbGsoYXBwLnVzZXIudWlkKTtcclxuICAgICAgICAgICAgLy9hY3RpdmF0ZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgdGFwQ291bnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAvL2xvb2tBbmltYXRpb24gPSB7IHRpbWU6IDAuMCwgZHVyYXRpb246IDAuNSwgc291cmNlOiB7IHg6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi54LCB5OiBsb29rQXRUYXJnZXQucG9zaXRpb24ueSB9LCB0YXJnZXQ6IHsgeDogKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSAwLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAxMC4wLCB5OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIDAuNSAqIHdpbmRvdy5vdXRlckhlaWdodCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAtMTAuMCB9IH07XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAvKmxvb2tBbmltYXRpb24gPSB7IHRpbWU6IDAuMCwgZHVyYXRpb246IDAuNSwgc291cmNlOiB7IHg6IGxvb2tBdFRhcmdldC5wb3NpdGlvbi54LCB5OiBsb29rQXRUYXJnZXQucG9zaXRpb24ueSB9LCB0YXJnZXQ6IHsgeDogKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSAwLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAxMC4wLCB5OiAoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIDAuNSAqIHdpbmRvdy5vdXRlckhlaWdodCkgLyB3aW5kb3cub3V0ZXJIZWlnaHQgKiAtMTAuMCB9IH07XHJcbiAgICBcclxuICAgICAgICBpZiAoYXBwLmNoYXJhY3RlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhcHAuc2VxdWVuY2VRdWV1ZS5wdXNoKGFwcC5wcmVwYXJlKGFwcC5jaGFyYWN0ZXIuc2VxdWVuY2VzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBcIlRvdWNoRW5kXCIpKSk7XHJcbiAgICAgICAgfSovXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBlID0+IHtcclxuICAgICAgICBpZiAoZS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGFwcC5pc0RhcmtNb2RlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcHAuaXNEYXJrTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsiXSwic291cmNlUm9vdCI6IiJ9